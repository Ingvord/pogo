/*
* generated by Xtext
*/

package fr.esrf.tango.pogo.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class PogoDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class PogoSystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PogoSystem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cClassesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClassesPogoDeviceClassParserRuleCall_1_0 = (RuleCall)cClassesAssignment_1.eContents().get(0);
		private final Assignment cMultiClassesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMultiClassesPogoMultiClassesParserRuleCall_2_0 = (RuleCall)cMultiClassesAssignment_2.eContents().get(0);
		
		//PogoSystem:
		//	imports+=Import* classes+=PogoDeviceClass* multiClasses+=PogoMultiClasses*;
		public ParserRule getRule() { return rule; }

		//imports+=Import* classes+=PogoDeviceClass* multiClasses+=PogoMultiClasses*
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//classes+=PogoDeviceClass*
		public Assignment getClassesAssignment_1() { return cClassesAssignment_1; }

		//PogoDeviceClass
		public RuleCall getClassesPogoDeviceClassParserRuleCall_1_0() { return cClassesPogoDeviceClassParserRuleCall_1_0; }

		//multiClasses+=PogoMultiClasses*
		public Assignment getMultiClassesAssignment_2() { return cMultiClassesAssignment_2; }

		//PogoMultiClasses
		public RuleCall getMultiClassesPogoMultiClassesParserRuleCall_2_0() { return cMultiClassesPogoMultiClassesParserRuleCall_2_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		//Import:
		//	"import" importURI=STRING;
		public ParserRule getRule() { return rule; }

		//"import" importURI=STRING
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
	}

	public class PogoMultiClassesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PogoMultiClasses");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPogoRevisionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPogoRevisionIDTerminalRuleCall_0_0 = (RuleCall)cPogoRevisionAssignment_0.eContents().get(0);
		private final Keyword cMulticlassesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSourcePathAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSourcePathSTRINGTerminalRuleCall_4_0 = (RuleCall)cSourcePathAssignment_4.eContents().get(0);
		private final Assignment cDescriptionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_5_0 = (RuleCall)cDescriptionAssignment_5.eContents().get(0);
		private final Assignment cTitleAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTitleSTRINGTerminalRuleCall_6_0 = (RuleCall)cTitleAssignment_6.eContents().get(0);
		private final Assignment cLicenseAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cLicenseSTRINGTerminalRuleCall_7_0 = (RuleCall)cLicenseAssignment_7.eContents().get(0);
		private final Keyword cClassesKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cClassesAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cClassesOneClassSimpleDefParserRuleCall_9_0 = (RuleCall)cClassesAssignment_9.eContents().get(0);
		private final Assignment cFilestogenerateAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cFilestogenerateSTRINGTerminalRuleCall_10_0 = (RuleCall)cFilestogenerateAssignment_10.eContents().get(0);
		private final Assignment cPreferencesAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cPreferencesPreferencesParserRuleCall_11_0 = (RuleCall)cPreferencesAssignment_11.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		////==============================================
		////	Multi Classes definition
		////==============================================
		//PogoMultiClasses:
		//	pogoRevision= //	To check Pogo revision when xmi has been created
		//	ID "multiclasses" name=ID "{" sourcePath=STRING description=STRING title=STRING license=STRING "classes:"
		//	classes+=OneClassSimpleDef filestogenerate= //	File(s) to generate (code, makefile,....)
		//	STRING preferences= //	Preferences (for programer, for site or at run time)
		//	Preferences "}";
		public ParserRule getRule() { return rule; }

		//pogoRevision= //	To check Pogo revision when xmi has been created
		//ID "multiclasses" name=ID "{" sourcePath=STRING description=STRING title=STRING license=STRING "classes:"
		//classes+=OneClassSimpleDef filestogenerate= //	File(s) to generate (code, makefile,....)
		//STRING preferences= //	Preferences (for programer, for site or at run time)
		//Preferences "}"
		public Group getGroup() { return cGroup; }

		//pogoRevision= //	To check Pogo revision when xmi has been created
		//ID
		public Assignment getPogoRevisionAssignment_0() { return cPogoRevisionAssignment_0; }

		////	To check Pogo revision when xmi has been created
		//ID
		public RuleCall getPogoRevisionIDTerminalRuleCall_0_0() { return cPogoRevisionIDTerminalRuleCall_0_0; }

		//"multiclasses"
		public Keyword getMulticlassesKeyword_1() { return cMulticlassesKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//sourcePath=STRING
		public Assignment getSourcePathAssignment_4() { return cSourcePathAssignment_4; }

		//STRING
		public RuleCall getSourcePathSTRINGTerminalRuleCall_4_0() { return cSourcePathSTRINGTerminalRuleCall_4_0; }

		//description=STRING
		public Assignment getDescriptionAssignment_5() { return cDescriptionAssignment_5; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_5_0() { return cDescriptionSTRINGTerminalRuleCall_5_0; }

		//title=STRING
		public Assignment getTitleAssignment_6() { return cTitleAssignment_6; }

		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_6_0() { return cTitleSTRINGTerminalRuleCall_6_0; }

		//license=STRING
		public Assignment getLicenseAssignment_7() { return cLicenseAssignment_7; }

		//STRING
		public RuleCall getLicenseSTRINGTerminalRuleCall_7_0() { return cLicenseSTRINGTerminalRuleCall_7_0; }

		//"classes:"
		public Keyword getClassesKeyword_8() { return cClassesKeyword_8; }

		//classes+=OneClassSimpleDef
		public Assignment getClassesAssignment_9() { return cClassesAssignment_9; }

		//OneClassSimpleDef
		public RuleCall getClassesOneClassSimpleDefParserRuleCall_9_0() { return cClassesOneClassSimpleDefParserRuleCall_9_0; }

		//filestogenerate= //	File(s) to generate (code, makefile,....)
		//STRING
		public Assignment getFilestogenerateAssignment_10() { return cFilestogenerateAssignment_10; }

		////	File(s) to generate (code, makefile,....)
		//STRING
		public RuleCall getFilestogenerateSTRINGTerminalRuleCall_10_0() { return cFilestogenerateSTRINGTerminalRuleCall_10_0; }

		//preferences= //	Preferences (for programer, for site or at run time)
		//Preferences
		public Assignment getPreferencesAssignment_11() { return cPreferencesAssignment_11; }

		////	Preferences (for programer, for site or at run time)
		//Preferences
		public RuleCall getPreferencesPreferencesParserRuleCall_11_0() { return cPreferencesPreferencesParserRuleCall_11_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}

	public class OneClassSimpleDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OneClassSimpleDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClassnameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cClassnameSTRINGTerminalRuleCall_0_0 = (RuleCall)cClassnameAssignment_0.eContents().get(0);
		private final Assignment cSourcePathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSourcePathSTRINGTerminalRuleCall_1_0 = (RuleCall)cSourcePathAssignment_1.eContents().get(0);
		private final Assignment cHasDynamicAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cHasDynamicBooleanParserRuleCall_2_0 = (RuleCall)cHasDynamicAssignment_2.eContents().get(0);
		private final Assignment cPogo6Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPogo6BooleanParserRuleCall_3_0 = (RuleCall)cPogo6Assignment_3.eContents().get(0);
		private final Keyword cInheritancesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cInheritancesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cInheritancesInheritanceParserRuleCall_5_0 = (RuleCall)cInheritancesAssignment_5.eContents().get(0);
		private final Keyword cParentClassesKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cParentClassesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cParentClassesSTRINGTerminalRuleCall_7_0 = (RuleCall)cParentClassesAssignment_7.eContents().get(0);
		private final Keyword cAdditionalFilesKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cAdditionalFilesAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cAdditionalFilesAdditionalFileParserRuleCall_9_0 = (RuleCall)cAdditionalFilesAssignment_9.eContents().get(0);
		
		////
		////	One class simple definition
		////
		//OneClassSimpleDef:
		//	classname=STRING sourcePath=STRING hasDynamic=Boolean pogo6=Boolean "inheritances:" inheritances+=Inheritance //	inheritance class definitions
		//	"parentClasses:" parentClasses+=STRING //	Used only by graphical display
		//	"additionalFiles:" additionalFiles+=AdditionalFile* //	Programmer's additional files to be added in Makefile (utils, threads,...)
		//;
		public ParserRule getRule() { return rule; }

		//classname=STRING sourcePath=STRING hasDynamic=Boolean pogo6=Boolean "inheritances:" inheritances+=Inheritance //	inheritance class definitions
		//"parentClasses:" parentClasses+=STRING //	Used only by graphical display
		//"additionalFiles:" additionalFiles+=AdditionalFile* //	Programmer's additional files to be added in Makefile (utils, threads,...)
		public Group getGroup() { return cGroup; }

		//classname=STRING
		public Assignment getClassnameAssignment_0() { return cClassnameAssignment_0; }

		//STRING
		public RuleCall getClassnameSTRINGTerminalRuleCall_0_0() { return cClassnameSTRINGTerminalRuleCall_0_0; }

		//sourcePath=STRING
		public Assignment getSourcePathAssignment_1() { return cSourcePathAssignment_1; }

		//STRING
		public RuleCall getSourcePathSTRINGTerminalRuleCall_1_0() { return cSourcePathSTRINGTerminalRuleCall_1_0; }

		//hasDynamic=Boolean
		public Assignment getHasDynamicAssignment_2() { return cHasDynamicAssignment_2; }

		//Boolean
		public RuleCall getHasDynamicBooleanParserRuleCall_2_0() { return cHasDynamicBooleanParserRuleCall_2_0; }

		//pogo6=Boolean
		public Assignment getPogo6Assignment_3() { return cPogo6Assignment_3; }

		//Boolean
		public RuleCall getPogo6BooleanParserRuleCall_3_0() { return cPogo6BooleanParserRuleCall_3_0; }

		//"inheritances:"
		public Keyword getInheritancesKeyword_4() { return cInheritancesKeyword_4; }

		//inheritances+=Inheritance
		public Assignment getInheritancesAssignment_5() { return cInheritancesAssignment_5; }

		//Inheritance
		public RuleCall getInheritancesInheritanceParserRuleCall_5_0() { return cInheritancesInheritanceParserRuleCall_5_0; }

		//"parentClasses:"
		public Keyword getParentClassesKeyword_6() { return cParentClassesKeyword_6; }

		//parentClasses+=STRING
		public Assignment getParentClassesAssignment_7() { return cParentClassesAssignment_7; }

		//STRING
		public RuleCall getParentClassesSTRINGTerminalRuleCall_7_0() { return cParentClassesSTRINGTerminalRuleCall_7_0; }

		//"additionalFiles:"
		public Keyword getAdditionalFilesKeyword_8() { return cAdditionalFilesKeyword_8; }

		//additionalFiles+=AdditionalFile*
		public Assignment getAdditionalFilesAssignment_9() { return cAdditionalFilesAssignment_9; }

		//AdditionalFile
		public RuleCall getAdditionalFilesAdditionalFileParserRuleCall_9_0() { return cAdditionalFilesAdditionalFileParserRuleCall_9_0; }
	}

	public class PogoDeviceClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PogoDeviceClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeviceclassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cIsAbstractAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cIsAbstractAbstractKeyword_2_0 = (Keyword)cIsAbstractAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cBaseClassAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cBaseClassPogoDeviceClassCrossReference_3_1_0 = (CrossReference)cBaseClassAssignment_3_1.eContents().get(0);
		private final RuleCall cBaseClassPogoDeviceClassIDTerminalRuleCall_3_1_0_1 = (RuleCall)cBaseClassPogoDeviceClassCrossReference_3_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPogoRevisionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPogoRevisionIDTerminalRuleCall_5_0 = (RuleCall)cPogoRevisionAssignment_5.eContents().get(0);
		private final Assignment cInstituteAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cInstituteIDTerminalRuleCall_6_0 = (RuleCall)cInstituteAssignment_6.eContents().get(0);
		private final Keyword cDescriptionKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cDescriptionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cDescriptionClassDescriptionParserRuleCall_8_0 = (RuleCall)cDescriptionAssignment_8.eContents().get(0);
		private final Keyword cClassPropertiesKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cClassPropertiesAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cClassPropertiesPropertyParserRuleCall_10_0 = (RuleCall)cClassPropertiesAssignment_10.eContents().get(0);
		private final Keyword cDevicePropertiesKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cDevicePropertiesAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cDevicePropertiesPropertyParserRuleCall_12_0 = (RuleCall)cDevicePropertiesAssignment_12.eContents().get(0);
		private final Keyword cCommandsKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cCommandsAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cCommandsCommandParserRuleCall_14_0 = (RuleCall)cCommandsAssignment_14.eContents().get(0);
		private final Keyword cDynamicCommandsKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Assignment cDynamicCommandsAssignment_16 = (Assignment)cGroup.eContents().get(16);
		private final RuleCall cDynamicCommandsCommandParserRuleCall_16_0 = (RuleCall)cDynamicCommandsAssignment_16.eContents().get(0);
		private final Keyword cAttributesKeyword_17 = (Keyword)cGroup.eContents().get(17);
		private final Assignment cAttributesAssignment_18 = (Assignment)cGroup.eContents().get(18);
		private final RuleCall cAttributesAttributeParserRuleCall_18_0 = (RuleCall)cAttributesAssignment_18.eContents().get(0);
		private final Keyword cDynamicAttributesKeyword_19 = (Keyword)cGroup.eContents().get(19);
		private final Assignment cDynamicAttributesAssignment_20 = (Assignment)cGroup.eContents().get(20);
		private final RuleCall cDynamicAttributesAttributeParserRuleCall_20_0 = (RuleCall)cDynamicAttributesAssignment_20.eContents().get(0);
		private final Keyword cStatesKeyword_21 = (Keyword)cGroup.eContents().get(21);
		private final Assignment cStatesAssignment_22 = (Assignment)cGroup.eContents().get(22);
		private final RuleCall cStatesStateParserRuleCall_22_0 = (RuleCall)cStatesAssignment_22.eContents().get(0);
		private final Assignment cPreferencesAssignment_23 = (Assignment)cGroup.eContents().get(23);
		private final RuleCall cPreferencesPreferencesParserRuleCall_23_0 = (RuleCall)cPreferencesAssignment_23.eContents().get(0);
		private final Keyword cAdditionalFilesKeyword_24 = (Keyword)cGroup.eContents().get(24);
		private final Assignment cAdditionalFilesAssignment_25 = (Assignment)cGroup.eContents().get(25);
		private final RuleCall cAdditionalFilesAdditionalFileParserRuleCall_25_0 = (RuleCall)cAdditionalFilesAssignment_25.eContents().get(0);
		private final Keyword cOverlodedPollPeriodObjectKeyword_26 = (Keyword)cGroup.eContents().get(26);
		private final Assignment cOverlodedPollPeriodObjectAssignment_27 = (Assignment)cGroup.eContents().get(27);
		private final RuleCall cOverlodedPollPeriodObjectOverlodedPollPeriodObjectParserRuleCall_27_0 = (RuleCall)cOverlodedPollPeriodObjectAssignment_27.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_28 = (Keyword)cGroup.eContents().get(28);
		
		////==============================================
		////	Class definition
		////==============================================
		//PogoDeviceClass:
		//	"deviceclass" name=ID isAbstract?="abstract"? ("extends" baseClass=[PogoDeviceClass])? "{" pogoRevision= //	To check Pogo revision when xmi has been created
		//	ID institute= //	For future specific features 
		//	ID //	Class information
		//	"description:" description=ClassDescription //	Class property list
		//	"classProperties:" classProperties+=Property* //	Device Property list
		//	"deviceProperties:" deviceProperties+=Property* //	Device static command list
		//	"commands:" commands+=Command* //	Device dynamic command list
		//	"dynamicCommands:" dynamicCommands+=Command* //	Device static attribute list
		//	"attributes:" attributes+=Attribute* //	Device dynamic attribute list
		//	"dynamicAttributes:" dynamicAttributes+=Attribute* //	Device state list
		//	"states:" states+=State* preferences= //	Preferences (for programer, for site or at run time)
		//	Preferences //	Programmer's additional files to be added in Makefile (utils, threads,...)
		//	"additionalFiles:" additionalFiles+=AdditionalFile* //	Object list (Command or Attribute) where polling period has been overloaded
		//	"overlodedPollPeriodObject:" overlodedPollPeriodObject+=OverlodedPollPeriodObject* "}";
		public ParserRule getRule() { return rule; }

		//"deviceclass" name=ID isAbstract?="abstract"? ("extends" baseClass=[PogoDeviceClass])? "{" pogoRevision= //	To check Pogo revision when xmi has been created
		//ID institute= //	For future specific features 
		//ID //	Class information
		//"description:" description=ClassDescription //	Class property list
		//"classProperties:" classProperties+=Property* //	Device Property list
		//"deviceProperties:" deviceProperties+=Property* //	Device static command list
		//"commands:" commands+=Command* //	Device dynamic command list
		//"dynamicCommands:" dynamicCommands+=Command* //	Device static attribute list
		//"attributes:" attributes+=Attribute* //	Device dynamic attribute list
		//"dynamicAttributes:" dynamicAttributes+=Attribute* //	Device state list
		//"states:" states+=State* preferences= //	Preferences (for programer, for site or at run time)
		//Preferences //	Programmer's additional files to be added in Makefile (utils, threads,...)
		//"additionalFiles:" additionalFiles+=AdditionalFile* //	Object list (Command or Attribute) where polling period has been overloaded
		//"overlodedPollPeriodObject:" overlodedPollPeriodObject+=OverlodedPollPeriodObject* "}"
		public Group getGroup() { return cGroup; }

		//"deviceclass"
		public Keyword getDeviceclassKeyword_0() { return cDeviceclassKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//isAbstract?="abstract"?
		public Assignment getIsAbstractAssignment_2() { return cIsAbstractAssignment_2; }

		//"abstract"
		public Keyword getIsAbstractAbstractKeyword_2_0() { return cIsAbstractAbstractKeyword_2_0; }

		//("extends" baseClass=[PogoDeviceClass])?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//baseClass=[PogoDeviceClass]
		public Assignment getBaseClassAssignment_3_1() { return cBaseClassAssignment_3_1; }

		//[PogoDeviceClass]
		public CrossReference getBaseClassPogoDeviceClassCrossReference_3_1_0() { return cBaseClassPogoDeviceClassCrossReference_3_1_0; }

		//ID
		public RuleCall getBaseClassPogoDeviceClassIDTerminalRuleCall_3_1_0_1() { return cBaseClassPogoDeviceClassIDTerminalRuleCall_3_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//pogoRevision= //	To check Pogo revision when xmi has been created
		//ID
		public Assignment getPogoRevisionAssignment_5() { return cPogoRevisionAssignment_5; }

		////	To check Pogo revision when xmi has been created
		//ID
		public RuleCall getPogoRevisionIDTerminalRuleCall_5_0() { return cPogoRevisionIDTerminalRuleCall_5_0; }

		//institute= //	For future specific features 
		//ID
		public Assignment getInstituteAssignment_6() { return cInstituteAssignment_6; }

		////	For future specific features 
		//ID
		public RuleCall getInstituteIDTerminalRuleCall_6_0() { return cInstituteIDTerminalRuleCall_6_0; }

		////	Class information
		//"description:"
		public Keyword getDescriptionKeyword_7() { return cDescriptionKeyword_7; }

		//description=ClassDescription
		public Assignment getDescriptionAssignment_8() { return cDescriptionAssignment_8; }

		//ClassDescription
		public RuleCall getDescriptionClassDescriptionParserRuleCall_8_0() { return cDescriptionClassDescriptionParserRuleCall_8_0; }

		////	Class property list
		//"classProperties:"
		public Keyword getClassPropertiesKeyword_9() { return cClassPropertiesKeyword_9; }

		//classProperties+=Property*
		public Assignment getClassPropertiesAssignment_10() { return cClassPropertiesAssignment_10; }

		//Property
		public RuleCall getClassPropertiesPropertyParserRuleCall_10_0() { return cClassPropertiesPropertyParserRuleCall_10_0; }

		////	Device Property list
		//"deviceProperties:"
		public Keyword getDevicePropertiesKeyword_11() { return cDevicePropertiesKeyword_11; }

		//deviceProperties+=Property*
		public Assignment getDevicePropertiesAssignment_12() { return cDevicePropertiesAssignment_12; }

		//Property
		public RuleCall getDevicePropertiesPropertyParserRuleCall_12_0() { return cDevicePropertiesPropertyParserRuleCall_12_0; }

		////	Device static command list
		//"commands:"
		public Keyword getCommandsKeyword_13() { return cCommandsKeyword_13; }

		//commands+=Command*
		public Assignment getCommandsAssignment_14() { return cCommandsAssignment_14; }

		//Command
		public RuleCall getCommandsCommandParserRuleCall_14_0() { return cCommandsCommandParserRuleCall_14_0; }

		////	Device dynamic command list
		//"dynamicCommands:"
		public Keyword getDynamicCommandsKeyword_15() { return cDynamicCommandsKeyword_15; }

		//dynamicCommands+=Command*
		public Assignment getDynamicCommandsAssignment_16() { return cDynamicCommandsAssignment_16; }

		//Command
		public RuleCall getDynamicCommandsCommandParserRuleCall_16_0() { return cDynamicCommandsCommandParserRuleCall_16_0; }

		////	Device static attribute list
		//"attributes:"
		public Keyword getAttributesKeyword_17() { return cAttributesKeyword_17; }

		//attributes+=Attribute*
		public Assignment getAttributesAssignment_18() { return cAttributesAssignment_18; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_18_0() { return cAttributesAttributeParserRuleCall_18_0; }

		////	Device dynamic attribute list
		//"dynamicAttributes:"
		public Keyword getDynamicAttributesKeyword_19() { return cDynamicAttributesKeyword_19; }

		//dynamicAttributes+=Attribute*
		public Assignment getDynamicAttributesAssignment_20() { return cDynamicAttributesAssignment_20; }

		//Attribute
		public RuleCall getDynamicAttributesAttributeParserRuleCall_20_0() { return cDynamicAttributesAttributeParserRuleCall_20_0; }

		////	Device state list
		//"states:"
		public Keyword getStatesKeyword_21() { return cStatesKeyword_21; }

		//states+=State*
		public Assignment getStatesAssignment_22() { return cStatesAssignment_22; }

		//State
		public RuleCall getStatesStateParserRuleCall_22_0() { return cStatesStateParserRuleCall_22_0; }

		//preferences= //	Preferences (for programer, for site or at run time)
		//Preferences
		public Assignment getPreferencesAssignment_23() { return cPreferencesAssignment_23; }

		////	Preferences (for programer, for site or at run time)
		//Preferences
		public RuleCall getPreferencesPreferencesParserRuleCall_23_0() { return cPreferencesPreferencesParserRuleCall_23_0; }

		////	Programmer's additional files to be added in Makefile (utils, threads,...)
		//"additionalFiles:"
		public Keyword getAdditionalFilesKeyword_24() { return cAdditionalFilesKeyword_24; }

		//additionalFiles+=AdditionalFile*
		public Assignment getAdditionalFilesAssignment_25() { return cAdditionalFilesAssignment_25; }

		//AdditionalFile
		public RuleCall getAdditionalFilesAdditionalFileParserRuleCall_25_0() { return cAdditionalFilesAdditionalFileParserRuleCall_25_0; }

		////	Object list (Command or Attribute) where polling period has been overloaded
		//"overlodedPollPeriodObject:"
		public Keyword getOverlodedPollPeriodObjectKeyword_26() { return cOverlodedPollPeriodObjectKeyword_26; }

		//overlodedPollPeriodObject+=OverlodedPollPeriodObject*
		public Assignment getOverlodedPollPeriodObjectAssignment_27() { return cOverlodedPollPeriodObjectAssignment_27; }

		//OverlodedPollPeriodObject
		public RuleCall getOverlodedPollPeriodObjectOverlodedPollPeriodObjectParserRuleCall_27_0() { return cOverlodedPollPeriodObjectOverlodedPollPeriodObjectParserRuleCall_27_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_28() { return cRightCurlyBracketKeyword_28; }
	}

	public class LanguageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Language");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCppKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cJavaKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPythonKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		////
		////	Miscellaneous definitions
		////
		//Language:
		//	"Cpp" | "Java" | "Python";
		public ParserRule getRule() { return rule; }

		//"Cpp" | "Java" | "Python"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"Cpp"
		public Keyword getCppKeyword_0() { return cCppKeyword_0; }

		//"Java"
		public Keyword getJavaKeyword_1() { return cJavaKeyword_1; }

		//"Python"
		public Keyword getPythonKeyword_2() { return cPythonKeyword_2; }
	}

	public class DisplayLevelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DisplayLevel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cOPERATORKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cEXPERTKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//DisplayLevel:
		//	"OPERATOR" | "EXPERT";
		public ParserRule getRule() { return rule; }

		//"OPERATOR" | "EXPERT"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"OPERATOR"
		public Keyword getOPERATORKeyword_0() { return cOPERATORKeyword_0; }

		//"EXPERT"
		public Keyword getEXPERTKeyword_1() { return cEXPERTKeyword_1; }
	}

	public class AttrTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttrType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cScalarKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSpectrumKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cImageKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//AttrType:
		//	"Scalar" | "Spectrum" | "Image";
		public ParserRule getRule() { return rule; }

		//"Scalar" | "Spectrum" | "Image"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"Scalar"
		public Keyword getScalarKeyword_0() { return cScalarKeyword_0; }

		//"Spectrum"
		public Keyword getSpectrumKeyword_1() { return cSpectrumKeyword_1; }

		//"Image"
		public Keyword getImageKeyword_2() { return cImageKeyword_2; }
	}

	public class RW_TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RW_Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cREADKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cWRITEKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cREAD_WRITEKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cREAD_WITH_WRITEKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//RW_Type:
		//	"READ" | "WRITE" | "READ_WRITE" | "READ_WITH_WRITE";
		public ParserRule getRule() { return rule; }

		//"READ" | "WRITE" | "READ_WRITE" | "READ_WITH_WRITE"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"READ"
		public Keyword getREADKeyword_0() { return cREADKeyword_0; }

		//"WRITE"
		public Keyword getWRITEKeyword_1() { return cWRITEKeyword_1; }

		//"READ_WRITE"
		public Keyword getREAD_WRITEKeyword_2() { return cREAD_WRITEKeyword_2; }

		//"READ_WITH_WRITE"
		public Keyword getREAD_WITH_WRITEKeyword_3() { return cREAD_WITH_WRITEKeyword_3; }
	}

	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Boolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Boolean:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class ClassDescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassDescription");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDescriptionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_0_0 = (RuleCall)cDescriptionAssignment_0.eContents().get(0);
		private final Assignment cTitleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_1_0 = (RuleCall)cTitleAssignment_1.eContents().get(0);
		private final Assignment cSourcePathAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSourcePathSTRINGTerminalRuleCall_2_0 = (RuleCall)cSourcePathAssignment_2.eContents().get(0);
		private final Keyword cInheritancesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInheritancesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInheritancesInheritanceParserRuleCall_4_0 = (RuleCall)cInheritancesAssignment_4.eContents().get(0);
		private final Assignment cLanguageAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLanguageLanguageParserRuleCall_5_0 = (RuleCall)cLanguageAssignment_5.eContents().get(0);
		private final Assignment cFilestogenerateAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFilestogenerateSTRINGTerminalRuleCall_6_0 = (RuleCall)cFilestogenerateAssignment_6.eContents().get(0);
		private final Assignment cIdentificationAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cIdentificationClassIdentificationParserRuleCall_7_0 = (RuleCall)cIdentificationAssignment_7.eContents().get(0);
		private final Assignment cCommentsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cCommentsCommentsParserRuleCall_8_0 = (RuleCall)cCommentsAssignment_8.eContents().get(0);
		private final Assignment cLicenseAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cLicenseSTRINGTerminalRuleCall_9_0 = (RuleCall)cLicenseAssignment_9.eContents().get(0);
		private final Assignment cHasMandatoryPropertyAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cHasMandatoryPropertyBooleanParserRuleCall_10_0 = (RuleCall)cHasMandatoryPropertyAssignment_10.eContents().get(0);
		private final Assignment cHasConcretePropertyAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cHasConcretePropertyBooleanParserRuleCall_11_0 = (RuleCall)cHasConcretePropertyAssignment_11.eContents().get(0);
		private final Assignment cHasAbstractCommandAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cHasAbstractCommandBooleanParserRuleCall_12_0 = (RuleCall)cHasAbstractCommandAssignment_12.eContents().get(0);
		private final Assignment cHasAbstractAttributeAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cHasAbstractAttributeBooleanParserRuleCall_13_0 = (RuleCall)cHasAbstractAttributeAssignment_13.eContents().get(0);
		private final Assignment cDescriptionHtmlExistsAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cDescriptionHtmlExistsBooleanParserRuleCall_14_0 = (RuleCall)cDescriptionHtmlExistsAssignment_14.eContents().get(0);
		
		////
		////	Class information
		////
		//ClassDescription:
		//	description= //	Class description
		//	STRING title= //	Short description
		//	STRING sourcePath= //	Files location
		//	STRING "inheritances:" inheritances+=Inheritance //	inheritance class definitions
		//	language= //	Language to generate
		//	Language filestogenerate= //	File(s) to generate (code, makefile,....)
		//	STRING identification=ClassIdentification comments=Comments license=STRING hasMandatoryProperty=Boolean
		//	hasConcreteProperty=Boolean hasAbstractCommand=Boolean hasAbstractAttribute=Boolean descriptionHtmlExists= //	File from pogo-6
		//	Boolean;
		public ParserRule getRule() { return rule; }

		//description= //	Class description
		//STRING title= //	Short description
		//STRING sourcePath= //	Files location
		//STRING "inheritances:" inheritances+=Inheritance //	inheritance class definitions
		//language= //	Language to generate
		//Language filestogenerate= //	File(s) to generate (code, makefile,....)
		//STRING identification=ClassIdentification comments=Comments license=STRING hasMandatoryProperty=Boolean
		//hasConcreteProperty=Boolean hasAbstractCommand=Boolean hasAbstractAttribute=Boolean descriptionHtmlExists= //	File from pogo-6
		//Boolean
		public Group getGroup() { return cGroup; }

		//description= //	Class description
		//STRING
		public Assignment getDescriptionAssignment_0() { return cDescriptionAssignment_0; }

		////	Class description
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_0_0() { return cDescriptionSTRINGTerminalRuleCall_0_0; }

		//title= //	Short description
		//STRING
		public Assignment getTitleAssignment_1() { return cTitleAssignment_1; }

		////	Short description
		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_1_0() { return cTitleSTRINGTerminalRuleCall_1_0; }

		//sourcePath= //	Files location
		//STRING
		public Assignment getSourcePathAssignment_2() { return cSourcePathAssignment_2; }

		////	Files location
		//STRING
		public RuleCall getSourcePathSTRINGTerminalRuleCall_2_0() { return cSourcePathSTRINGTerminalRuleCall_2_0; }

		//"inheritances:"
		public Keyword getInheritancesKeyword_3() { return cInheritancesKeyword_3; }

		//inheritances+=Inheritance
		public Assignment getInheritancesAssignment_4() { return cInheritancesAssignment_4; }

		//Inheritance
		public RuleCall getInheritancesInheritanceParserRuleCall_4_0() { return cInheritancesInheritanceParserRuleCall_4_0; }

		//language= //	Language to generate
		//Language
		public Assignment getLanguageAssignment_5() { return cLanguageAssignment_5; }

		////	Language to generate
		//Language
		public RuleCall getLanguageLanguageParserRuleCall_5_0() { return cLanguageLanguageParserRuleCall_5_0; }

		//filestogenerate= //	File(s) to generate (code, makefile,....)
		//STRING
		public Assignment getFilestogenerateAssignment_6() { return cFilestogenerateAssignment_6; }

		////	File(s) to generate (code, makefile,....)
		//STRING
		public RuleCall getFilestogenerateSTRINGTerminalRuleCall_6_0() { return cFilestogenerateSTRINGTerminalRuleCall_6_0; }

		//identification=ClassIdentification
		public Assignment getIdentificationAssignment_7() { return cIdentificationAssignment_7; }

		//ClassIdentification
		public RuleCall getIdentificationClassIdentificationParserRuleCall_7_0() { return cIdentificationClassIdentificationParserRuleCall_7_0; }

		//comments=Comments
		public Assignment getCommentsAssignment_8() { return cCommentsAssignment_8; }

		//Comments
		public RuleCall getCommentsCommentsParserRuleCall_8_0() { return cCommentsCommentsParserRuleCall_8_0; }

		//license=STRING
		public Assignment getLicenseAssignment_9() { return cLicenseAssignment_9; }

		//STRING
		public RuleCall getLicenseSTRINGTerminalRuleCall_9_0() { return cLicenseSTRINGTerminalRuleCall_9_0; }

		//hasMandatoryProperty=Boolean
		public Assignment getHasMandatoryPropertyAssignment_10() { return cHasMandatoryPropertyAssignment_10; }

		//Boolean
		public RuleCall getHasMandatoryPropertyBooleanParserRuleCall_10_0() { return cHasMandatoryPropertyBooleanParserRuleCall_10_0; }

		//hasConcreteProperty=Boolean
		public Assignment getHasConcretePropertyAssignment_11() { return cHasConcretePropertyAssignment_11; }

		//Boolean
		public RuleCall getHasConcretePropertyBooleanParserRuleCall_11_0() { return cHasConcretePropertyBooleanParserRuleCall_11_0; }

		//hasAbstractCommand=Boolean
		public Assignment getHasAbstractCommandAssignment_12() { return cHasAbstractCommandAssignment_12; }

		//Boolean
		public RuleCall getHasAbstractCommandBooleanParserRuleCall_12_0() { return cHasAbstractCommandBooleanParserRuleCall_12_0; }

		//hasAbstractAttribute=Boolean
		public Assignment getHasAbstractAttributeAssignment_13() { return cHasAbstractAttributeAssignment_13; }

		//Boolean
		public RuleCall getHasAbstractAttributeBooleanParserRuleCall_13_0() { return cHasAbstractAttributeBooleanParserRuleCall_13_0; }

		//descriptionHtmlExists= //	File from pogo-6
		//Boolean
		public Assignment getDescriptionHtmlExistsAssignment_14() { return cDescriptionHtmlExistsAssignment_14; }

		////	File from pogo-6
		//Boolean
		public RuleCall getDescriptionHtmlExistsBooleanParserRuleCall_14_0() { return cDescriptionHtmlExistsBooleanParserRuleCall_14_0; }
	}

	public class InheritanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Inheritance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClassnameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cClassnameSTRINGTerminalRuleCall_0_0 = (RuleCall)cClassnameAssignment_0.eContents().get(0);
		private final Assignment cSourcePathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSourcePathSTRINGTerminalRuleCall_1_0 = (RuleCall)cSourcePathAssignment_1.eContents().get(0);
		
		////
		////	Inheritance Definition
		////
		//Inheritance:
		//	classname=STRING sourcePath=STRING;
		public ParserRule getRule() { return rule; }

		//classname=STRING sourcePath=STRING
		public Group getGroup() { return cGroup; }

		//classname=STRING
		public Assignment getClassnameAssignment_0() { return cClassnameAssignment_0; }

		//STRING
		public RuleCall getClassnameSTRINGTerminalRuleCall_0_0() { return cClassnameSTRINGTerminalRuleCall_0_0; }

		//sourcePath=STRING
		public Assignment getSourcePathAssignment_1() { return cSourcePathAssignment_1; }

		//STRING
		public RuleCall getSourcePathSTRINGTerminalRuleCall_1_0() { return cSourcePathSTRINGTerminalRuleCall_1_0; }
	}

	public class ClassIdentificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassIdentification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cContactAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cContactSTRINGTerminalRuleCall_0_0 = (RuleCall)cContactAssignment_0.eContents().get(0);
		private final Assignment cAuthorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAuthorSTRINGTerminalRuleCall_1_0 = (RuleCall)cAuthorAssignment_1.eContents().get(0);
		private final Assignment cEmailDomainAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEmailDomainSTRINGTerminalRuleCall_2_0 = (RuleCall)cEmailDomainAssignment_2.eContents().get(0);
		private final Assignment cClassFamilyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cClassFamilySTRINGTerminalRuleCall_3_0 = (RuleCall)cClassFamilyAssignment_3.eContents().get(0);
		private final Assignment cSiteSpecificAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSiteSpecificSTRINGTerminalRuleCall_4_0 = (RuleCall)cSiteSpecificAssignment_4.eContents().get(0);
		private final Assignment cPlatformAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPlatformSTRINGTerminalRuleCall_5_0 = (RuleCall)cPlatformAssignment_5.eContents().get(0);
		private final Assignment cBusAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBusSTRINGTerminalRuleCall_6_0 = (RuleCall)cBusAssignment_6.eContents().get(0);
		private final Assignment cManufacturerAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cManufacturerSTRINGTerminalRuleCall_7_0 = (RuleCall)cManufacturerAssignment_7.eContents().get(0);
		private final Assignment cReferenceAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cReferenceSTRINGTerminalRuleCall_8_0 = (RuleCall)cReferenceAssignment_8.eContents().get(0);
		
		////
		////	Class identification
		////
		////	product reference if any 
		//ClassIdentification:
		//	contact= //	email address of the person in charge
		//	STRING author= //	get from contact
		//	STRING emailDomain= //	get from contact
		//	STRING classFamily= //	class family to be sorted in html doc
		//	STRING siteSpecific= //	If specific for an institute, name of this institute
		//	STRING platform= //	OS where it can run
		//	STRING bus= //	Hardware bus to control.
		//	STRING manufacturer= //	mannufacturer if any
		//	STRING reference=STRING;
		public ParserRule getRule() { return rule; }

		//contact= //	email address of the person in charge
		//STRING author= //	get from contact
		//STRING emailDomain= //	get from contact
		//STRING classFamily= //	class family to be sorted in html doc
		//STRING siteSpecific= //	If specific for an institute, name of this institute
		//STRING platform= //	OS where it can run
		//STRING bus= //	Hardware bus to control.
		//STRING manufacturer= //	mannufacturer if any
		//STRING reference=STRING
		public Group getGroup() { return cGroup; }

		//contact= //	email address of the person in charge
		//STRING
		public Assignment getContactAssignment_0() { return cContactAssignment_0; }

		////	email address of the person in charge
		//STRING
		public RuleCall getContactSTRINGTerminalRuleCall_0_0() { return cContactSTRINGTerminalRuleCall_0_0; }

		//author= //	get from contact
		//STRING
		public Assignment getAuthorAssignment_1() { return cAuthorAssignment_1; }

		////	get from contact
		//STRING
		public RuleCall getAuthorSTRINGTerminalRuleCall_1_0() { return cAuthorSTRINGTerminalRuleCall_1_0; }

		//emailDomain= //	get from contact
		//STRING
		public Assignment getEmailDomainAssignment_2() { return cEmailDomainAssignment_2; }

		////	get from contact
		//STRING
		public RuleCall getEmailDomainSTRINGTerminalRuleCall_2_0() { return cEmailDomainSTRINGTerminalRuleCall_2_0; }

		//classFamily= //	class family to be sorted in html doc
		//STRING
		public Assignment getClassFamilyAssignment_3() { return cClassFamilyAssignment_3; }

		////	class family to be sorted in html doc
		//STRING
		public RuleCall getClassFamilySTRINGTerminalRuleCall_3_0() { return cClassFamilySTRINGTerminalRuleCall_3_0; }

		//siteSpecific= //	If specific for an institute, name of this institute
		//STRING
		public Assignment getSiteSpecificAssignment_4() { return cSiteSpecificAssignment_4; }

		////	If specific for an institute, name of this institute
		//STRING
		public RuleCall getSiteSpecificSTRINGTerminalRuleCall_4_0() { return cSiteSpecificSTRINGTerminalRuleCall_4_0; }

		//platform= //	OS where it can run
		//STRING
		public Assignment getPlatformAssignment_5() { return cPlatformAssignment_5; }

		////	OS where it can run
		//STRING
		public RuleCall getPlatformSTRINGTerminalRuleCall_5_0() { return cPlatformSTRINGTerminalRuleCall_5_0; }

		//bus= //	Hardware bus to control.
		//STRING
		public Assignment getBusAssignment_6() { return cBusAssignment_6; }

		////	Hardware bus to control.
		//STRING
		public RuleCall getBusSTRINGTerminalRuleCall_6_0() { return cBusSTRINGTerminalRuleCall_6_0; }

		//manufacturer= //	mannufacturer if any
		//STRING
		public Assignment getManufacturerAssignment_7() { return cManufacturerAssignment_7; }

		////	mannufacturer if any
		//STRING
		public RuleCall getManufacturerSTRINGTerminalRuleCall_7_0() { return cManufacturerSTRINGTerminalRuleCall_7_0; }

		//reference=STRING
		public Assignment getReferenceAssignment_8() { return cReferenceAssignment_8; }

		//STRING
		public RuleCall getReferenceSTRINGTerminalRuleCall_8_0() { return cReferenceSTRINGTerminalRuleCall_8_0; }
	}

	public class CommentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comments");
		private final Assignment cCommandsTableAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCommandsTableSTRINGTerminalRuleCall_0 = (RuleCall)cCommandsTableAssignment.eContents().get(0);
		
		////
		////	Comments Definition (code generated by java Pogo and not by xtext/xpand)
		////
		////	!!!	Not used since xtend implementation !!!
		//Comments:
		//	commandsTable=STRING;
		public ParserRule getRule() { return rule; }

		//commandsTable=STRING
		public Assignment getCommandsTableAssignment() { return cCommandsTableAssignment; }

		//STRING
		public RuleCall getCommandsTableSTRINGTerminalRuleCall_0() { return cCommandsTableSTRINGTerminalRuleCall_0; }
	}

	public class PreferencesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Preferences");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocHomeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocHomeSTRINGTerminalRuleCall_0_0 = (RuleCall)cDocHomeAssignment_0.eContents().get(0);
		private final Assignment cMakefileHomeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMakefileHomeSTRINGTerminalRuleCall_1_0 = (RuleCall)cMakefileHomeAssignment_1.eContents().get(0);
		private final Assignment cInstallHomeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInstallHomeSTRINGTerminalRuleCall_2_0 = (RuleCall)cInstallHomeAssignment_2.eContents().get(0);
		private final Assignment cHtmlVersionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cHtmlVersionBooleanParserRuleCall_3_0 = (RuleCall)cHtmlVersionAssignment_3.eContents().get(0);
		
		////
		////	Preferences (for programer or for site)
		////
		////	Used by web automat to manage tag version
		//Preferences:
		//	docHome=STRING makefileHome=STRING installHome=STRING htmlVersion=Boolean;
		public ParserRule getRule() { return rule; }

		//docHome=STRING makefileHome=STRING installHome=STRING htmlVersion=Boolean
		public Group getGroup() { return cGroup; }

		//docHome=STRING
		public Assignment getDocHomeAssignment_0() { return cDocHomeAssignment_0; }

		//STRING
		public RuleCall getDocHomeSTRINGTerminalRuleCall_0_0() { return cDocHomeSTRINGTerminalRuleCall_0_0; }

		//makefileHome=STRING
		public Assignment getMakefileHomeAssignment_1() { return cMakefileHomeAssignment_1; }

		//STRING
		public RuleCall getMakefileHomeSTRINGTerminalRuleCall_1_0() { return cMakefileHomeSTRINGTerminalRuleCall_1_0; }

		//installHome=STRING
		public Assignment getInstallHomeAssignment_2() { return cInstallHomeAssignment_2; }

		//STRING
		public RuleCall getInstallHomeSTRINGTerminalRuleCall_2_0() { return cInstallHomeSTRINGTerminalRuleCall_2_0; }

		//htmlVersion=Boolean
		public Assignment getHtmlVersionAssignment_3() { return cHtmlVersionAssignment_3; }

		//Boolean
		public RuleCall getHtmlVersionBooleanParserRuleCall_3_0() { return cHtmlVersionBooleanParserRuleCall_3_0; }
	}

	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cDescriptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_1_0 = (RuleCall)cDescriptionAssignment_1.eContents().get(0);
		private final Assignment cStatusAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatusInheritanceStatusParserRuleCall_2_0 = (RuleCall)cStatusAssignment_2.eContents().get(0);
		
		////
		////	State Definition
		////
		//State:
		//	name=ID description=STRING status=InheritanceStatus;
		public ParserRule getRule() { return rule; }

		//name=ID description=STRING status=InheritanceStatus
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//description=STRING
		public Assignment getDescriptionAssignment_1() { return cDescriptionAssignment_1; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_1_0() { return cDescriptionSTRINGTerminalRuleCall_1_0; }

		//status=InheritanceStatus
		public Assignment getStatusAssignment_2() { return cStatusAssignment_2; }

		//InheritanceStatus
		public RuleCall getStatusInheritanceStatusParserRuleCall_2_0() { return cStatusInheritanceStatusParserRuleCall_2_0; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypePropTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cStatusAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatusInheritanceStatusParserRuleCall_2_0 = (RuleCall)cStatusAssignment_2.eContents().get(0);
		private final Assignment cMandatoryAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMandatoryBooleanParserRuleCall_3_0 = (RuleCall)cMandatoryAssignment_3.eContents().get(0);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		private final Keyword cDefaultPropValueKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDefaultPropValueAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDefaultPropValueSTRINGTerminalRuleCall_6_0 = (RuleCall)cDefaultPropValueAssignment_6.eContents().get(0);
		
		////
		////	Property Definition
		////
		//Property:
		//	name=ID type=PropType status=InheritanceStatus mandatory=Boolean description=STRING "defaultPropValue:"
		//	DefaultPropValue+=STRING*;
		public ParserRule getRule() { return rule; }

		//name=ID type=PropType status=InheritanceStatus mandatory=Boolean description=STRING "defaultPropValue:"
		//DefaultPropValue+=STRING*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//type=PropType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//PropType
		public RuleCall getTypePropTypeParserRuleCall_1_0() { return cTypePropTypeParserRuleCall_1_0; }

		//status=InheritanceStatus
		public Assignment getStatusAssignment_2() { return cStatusAssignment_2; }

		//InheritanceStatus
		public RuleCall getStatusInheritanceStatusParserRuleCall_2_0() { return cStatusInheritanceStatusParserRuleCall_2_0; }

		//mandatory=Boolean
		public Assignment getMandatoryAssignment_3() { return cMandatoryAssignment_3; }

		//Boolean
		public RuleCall getMandatoryBooleanParserRuleCall_3_0() { return cMandatoryBooleanParserRuleCall_3_0; }

		//description=STRING
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_4_0() { return cDescriptionSTRINGTerminalRuleCall_4_0; }

		//"defaultPropValue:"
		public Keyword getDefaultPropValueKeyword_5() { return cDefaultPropValueKeyword_5; }

		//DefaultPropValue+=STRING*
		public Assignment getDefaultPropValueAssignment_6() { return cDefaultPropValueAssignment_6; }

		//STRING
		public RuleCall getDefaultPropValueSTRINGTerminalRuleCall_6_0() { return cDefaultPropValueSTRINGTerminalRuleCall_6_0; }
	}

	public class PropTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVectorTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////	types could be one of the types
		//PropType:
		//	SimpleType | VectorType;
		public ParserRule getRule() { return rule; }

		//SimpleType | VectorType
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleType
		public RuleCall getSimpleTypeParserRuleCall_0() { return cSimpleTypeParserRuleCall_0; }

		//VectorType
		public RuleCall getVectorTypeParserRuleCall_1() { return cVectorTypeParserRuleCall_1; }
	}

	public class SimpleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cShortTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUShortTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIntTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cUIntTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cFloatTypeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDoubleTypeParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cStringTypeParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//SimpleType:
		//	BooleanType | ShortType | UShortType | IntType | UIntType | FloatType | DoubleType | StringType;
		public ParserRule getRule() { return rule; }

		//BooleanType | ShortType | UShortType | IntType | UIntType | FloatType | DoubleType | StringType
		public Alternatives getAlternatives() { return cAlternatives; }

		//BooleanType
		public RuleCall getBooleanTypeParserRuleCall_0() { return cBooleanTypeParserRuleCall_0; }

		//ShortType
		public RuleCall getShortTypeParserRuleCall_1() { return cShortTypeParserRuleCall_1; }

		//UShortType
		public RuleCall getUShortTypeParserRuleCall_2() { return cUShortTypeParserRuleCall_2; }

		//IntType
		public RuleCall getIntTypeParserRuleCall_3() { return cIntTypeParserRuleCall_3; }

		//UIntType
		public RuleCall getUIntTypeParserRuleCall_4() { return cUIntTypeParserRuleCall_4; }

		//FloatType
		public RuleCall getFloatTypeParserRuleCall_5() { return cFloatTypeParserRuleCall_5; }

		//DoubleType
		public RuleCall getDoubleTypeParserRuleCall_6() { return cDoubleTypeParserRuleCall_6; }

		//StringType
		public RuleCall getStringTypeParserRuleCall_7() { return cStringTypeParserRuleCall_7; }
	}

	public class VectorTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VectorType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cShortVectorTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntVectorTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFloatVectorTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDoubleVectorTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cStringVectorTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//VectorType:
		//	ShortVectorType | IntVectorType | FloatVectorType | DoubleVectorType | StringVectorType;
		public ParserRule getRule() { return rule; }

		//ShortVectorType | IntVectorType | FloatVectorType | DoubleVectorType | StringVectorType
		public Alternatives getAlternatives() { return cAlternatives; }

		//ShortVectorType
		public RuleCall getShortVectorTypeParserRuleCall_0() { return cShortVectorTypeParserRuleCall_0; }

		//IntVectorType
		public RuleCall getIntVectorTypeParserRuleCall_1() { return cIntVectorTypeParserRuleCall_1; }

		//FloatVectorType
		public RuleCall getFloatVectorTypeParserRuleCall_2() { return cFloatVectorTypeParserRuleCall_2; }

		//DoubleVectorType
		public RuleCall getDoubleVectorTypeParserRuleCall_3() { return cDoubleVectorTypeParserRuleCall_3; }

		//StringVectorType
		public RuleCall getStringVectorTypeParserRuleCall_4() { return cStringVectorTypeParserRuleCall_4; }
	}

	public class InheritanceStatusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InheritanceStatus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAbstractBooleanParserRuleCall_0_0 = (RuleCall)cAbstractAssignment_0.eContents().get(0);
		private final Assignment cInheritedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInheritedBooleanParserRuleCall_1_0 = (RuleCall)cInheritedAssignment_1.eContents().get(0);
		private final Assignment cConcreteAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConcreteBooleanParserRuleCall_2_0 = (RuleCall)cConcreteAssignment_2.eContents().get(0);
		private final Assignment cConcreteHereAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConcreteHereBooleanParserRuleCall_3_0 = (RuleCall)cConcreteHereAssignment_3.eContents().get(0);
		private final Assignment cHasChangedAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cHasChangedSTRINGTerminalRuleCall_4_0 = (RuleCall)cHasChangedAssignment_4.eContents().get(0);
		
		////	What has changed (dataType, attType, RWtype)
		//InheritanceStatus:
		//	abstract= //	is abstract or inherited from abstract
		//	Boolean inherited= //	is hinerited
		//	Boolean concrete= //	is concrete or overloaded
		//	Boolean concreteHere= //	is concrete or overloaded in this class
		//	Boolean hasChanged=STRING;
		public ParserRule getRule() { return rule; }

		//abstract= //	is abstract or inherited from abstract
		//Boolean inherited= //	is hinerited
		//Boolean concrete= //	is concrete or overloaded
		//Boolean concreteHere= //	is concrete or overloaded in this class
		//Boolean hasChanged=STRING
		public Group getGroup() { return cGroup; }

		//abstract= //	is abstract or inherited from abstract
		//Boolean
		public Assignment getAbstractAssignment_0() { return cAbstractAssignment_0; }

		////	is abstract or inherited from abstract
		//Boolean
		public RuleCall getAbstractBooleanParserRuleCall_0_0() { return cAbstractBooleanParserRuleCall_0_0; }

		//inherited= //	is hinerited
		//Boolean
		public Assignment getInheritedAssignment_1() { return cInheritedAssignment_1; }

		////	is hinerited
		//Boolean
		public RuleCall getInheritedBooleanParserRuleCall_1_0() { return cInheritedBooleanParserRuleCall_1_0; }

		//concrete= //	is concrete or overloaded
		//Boolean
		public Assignment getConcreteAssignment_2() { return cConcreteAssignment_2; }

		////	is concrete or overloaded
		//Boolean
		public RuleCall getConcreteBooleanParserRuleCall_2_0() { return cConcreteBooleanParserRuleCall_2_0; }

		//concreteHere= //	is concrete or overloaded in this class
		//Boolean
		public Assignment getConcreteHereAssignment_3() { return cConcreteHereAssignment_3; }

		////	is concrete or overloaded in this class
		//Boolean
		public RuleCall getConcreteHereBooleanParserRuleCall_3_0() { return cConcreteHereBooleanParserRuleCall_3_0; }

		//hasChanged=STRING
		public Assignment getHasChangedAssignment_4() { return cHasChangedAssignment_4; }

		//STRING
		public RuleCall getHasChangedSTRINGTerminalRuleCall_4_0() { return cHasChangedSTRINGTerminalRuleCall_4_0; }
	}

	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Command");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cArginAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArginArgumentParserRuleCall_1_0 = (RuleCall)cArginAssignment_1.eContents().get(0);
		private final Assignment cArgoutAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgoutArgumentParserRuleCall_2_0 = (RuleCall)cArgoutAssignment_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		private final Assignment cStatusAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatusInheritanceStatusParserRuleCall_4_0 = (RuleCall)cStatusAssignment_4.eContents().get(0);
		private final Assignment cExecMethodAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExecMethodSTRINGTerminalRuleCall_5_0 = (RuleCall)cExecMethodAssignment_5.eContents().get(0);
		private final Assignment cDisplayLevelAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDisplayLevelDisplayLevelParserRuleCall_6_0 = (RuleCall)cDisplayLevelAssignment_6.eContents().get(0);
		private final Assignment cPolledPeriodAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPolledPeriodSTRINGTerminalRuleCall_7_0 = (RuleCall)cPolledPeriodAssignment_7.eContents().get(0);
		private final Assignment cIsDynamicAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cIsDynamicBooleanParserRuleCall_8_0 = (RuleCall)cIsDynamicAssignment_8.eContents().get(0);
		private final Keyword cExcludedStatesKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cExcludedStatesAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cExcludedStatesSTRINGTerminalRuleCall_10_0 = (RuleCall)cExcludedStatesAssignment_10.eContents().get(0);
		
		////
		////	Command Definition
		////
		//Command:
		//	name=ID argin=Argument argout=Argument description=STRING status=InheritanceStatus execMethod=STRING
		//	displayLevel=DisplayLevel polledPeriod=STRING isDynamic=Boolean "excludedStates:" excludedStates+=STRING*;
		public ParserRule getRule() { return rule; }

		//name=ID argin=Argument argout=Argument description=STRING status=InheritanceStatus execMethod=STRING
		//displayLevel=DisplayLevel polledPeriod=STRING isDynamic=Boolean "excludedStates:" excludedStates+=STRING*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//argin=Argument
		public Assignment getArginAssignment_1() { return cArginAssignment_1; }

		//Argument
		public RuleCall getArginArgumentParserRuleCall_1_0() { return cArginArgumentParserRuleCall_1_0; }

		//argout=Argument
		public Assignment getArgoutAssignment_2() { return cArgoutAssignment_2; }

		//Argument
		public RuleCall getArgoutArgumentParserRuleCall_2_0() { return cArgoutArgumentParserRuleCall_2_0; }

		//description=STRING
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_0() { return cDescriptionSTRINGTerminalRuleCall_3_0; }

		//status=InheritanceStatus
		public Assignment getStatusAssignment_4() { return cStatusAssignment_4; }

		//InheritanceStatus
		public RuleCall getStatusInheritanceStatusParserRuleCall_4_0() { return cStatusInheritanceStatusParserRuleCall_4_0; }

		//execMethod=STRING
		public Assignment getExecMethodAssignment_5() { return cExecMethodAssignment_5; }

		//STRING
		public RuleCall getExecMethodSTRINGTerminalRuleCall_5_0() { return cExecMethodSTRINGTerminalRuleCall_5_0; }

		//displayLevel=DisplayLevel
		public Assignment getDisplayLevelAssignment_6() { return cDisplayLevelAssignment_6; }

		//DisplayLevel
		public RuleCall getDisplayLevelDisplayLevelParserRuleCall_6_0() { return cDisplayLevelDisplayLevelParserRuleCall_6_0; }

		//polledPeriod=STRING
		public Assignment getPolledPeriodAssignment_7() { return cPolledPeriodAssignment_7; }

		//STRING
		public RuleCall getPolledPeriodSTRINGTerminalRuleCall_7_0() { return cPolledPeriodSTRINGTerminalRuleCall_7_0; }

		//isDynamic=Boolean
		public Assignment getIsDynamicAssignment_8() { return cIsDynamicAssignment_8; }

		//Boolean
		public RuleCall getIsDynamicBooleanParserRuleCall_8_0() { return cIsDynamicBooleanParserRuleCall_8_0; }

		//"excludedStates:"
		public Keyword getExcludedStatesKeyword_9() { return cExcludedStatesKeyword_9; }

		//excludedStates+=STRING*
		public Assignment getExcludedStatesAssignment_10() { return cExcludedStatesAssignment_10; }

		//STRING
		public RuleCall getExcludedStatesSTRINGTerminalRuleCall_10_0() { return cExcludedStatesSTRINGTerminalRuleCall_10_0; }
	}

	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Argument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cDescriptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_1_0 = (RuleCall)cDescriptionAssignment_1.eContents().get(0);
		
		//Argument:
		//	type=Type description=STRING;
		public ParserRule getRule() { return rule; }

		//type=Type description=STRING
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//description=STRING
		public Assignment getDescriptionAssignment_1() { return cDescriptionAssignment_1; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_1_0() { return cDescriptionSTRINGTerminalRuleCall_1_0; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cAttTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttTypeAttrTypeParserRuleCall_1_0 = (RuleCall)cAttTypeAssignment_1.eContents().get(0);
		private final Assignment cDataTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDataTypeTypeParserRuleCall_2_0 = (RuleCall)cDataTypeAssignment_2.eContents().get(0);
		private final Assignment cRwTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRwTypeRW_TypeParserRuleCall_3_0 = (RuleCall)cRwTypeAssignment_3.eContents().get(0);
		private final Assignment cDisplayLevelAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDisplayLevelDisplayLevelParserRuleCall_4_0 = (RuleCall)cDisplayLevelAssignment_4.eContents().get(0);
		private final Assignment cPolledPeriodAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPolledPeriodSTRINGTerminalRuleCall_5_0 = (RuleCall)cPolledPeriodAssignment_5.eContents().get(0);
		private final Assignment cMaxXAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMaxXSTRINGTerminalRuleCall_6_0 = (RuleCall)cMaxXAssignment_6.eContents().get(0);
		private final Assignment cMaxYAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cMaxYSTRINGTerminalRuleCall_7_0 = (RuleCall)cMaxYAssignment_7.eContents().get(0);
		private final Assignment cAssociatedAttrAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cAssociatedAttrSTRINGTerminalRuleCall_8_0 = (RuleCall)cAssociatedAttrAssignment_8.eContents().get(0);
		private final Assignment cMemorizedAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cMemorizedBooleanParserRuleCall_9_0 = (RuleCall)cMemorizedAssignment_9.eContents().get(0);
		private final Assignment cMemorizedAtInitAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cMemorizedAtInitBooleanParserRuleCall_10_0 = (RuleCall)cMemorizedAtInitAssignment_10.eContents().get(0);
		private final Assignment cChangeEventAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cChangeEventFireEventsParserRuleCall_11_0 = (RuleCall)cChangeEventAssignment_11.eContents().get(0);
		private final Assignment cArchiveEventAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cArchiveEventFireEventsParserRuleCall_12_0 = (RuleCall)cArchiveEventAssignment_12.eContents().get(0);
		private final Assignment cDataReadyEventAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cDataReadyEventFireEventsParserRuleCall_13_0 = (RuleCall)cDataReadyEventAssignment_13.eContents().get(0);
		private final Assignment cStatusAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cStatusInheritanceStatusParserRuleCall_14_0 = (RuleCall)cStatusAssignment_14.eContents().get(0);
		private final Assignment cPropertiesAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final RuleCall cPropertiesAttrPropertiesParserRuleCall_15_0 = (RuleCall)cPropertiesAssignment_15.eContents().get(0);
		private final Assignment cAllocReadMemberAssignment_16 = (Assignment)cGroup.eContents().get(16);
		private final RuleCall cAllocReadMemberBooleanParserRuleCall_16_0 = (RuleCall)cAllocReadMemberAssignment_16.eContents().get(0);
		private final Assignment cIsDynamicAssignment_17 = (Assignment)cGroup.eContents().get(17);
		private final RuleCall cIsDynamicBooleanParserRuleCall_17_0 = (RuleCall)cIsDynamicAssignment_17.eContents().get(0);
		private final Assignment cEventCriteriaAssignment_18 = (Assignment)cGroup.eContents().get(18);
		private final RuleCall cEventCriteriaEventCriteriaParserRuleCall_18_0 = (RuleCall)cEventCriteriaAssignment_18.eContents().get(0);
		private final Assignment cEvArchiveCriteriaAssignment_19 = (Assignment)cGroup.eContents().get(19);
		private final RuleCall cEvArchiveCriteriaEventCriteriaParserRuleCall_19_0 = (RuleCall)cEvArchiveCriteriaAssignment_19.eContents().get(0);
		private final Keyword cEnumLabelsKeyword_20 = (Keyword)cGroup.eContents().get(20);
		private final Assignment cEnumLabelsAssignment_21 = (Assignment)cGroup.eContents().get(21);
		private final RuleCall cEnumLabelsSTRINGTerminalRuleCall_21_0 = (RuleCall)cEnumLabelsAssignment_21.eContents().get(0);
		private final Keyword cReadExcludedStatesKeyword_22 = (Keyword)cGroup.eContents().get(22);
		private final Assignment cReadExcludedStatesAssignment_23 = (Assignment)cGroup.eContents().get(23);
		private final RuleCall cReadExcludedStatesSTRINGTerminalRuleCall_23_0 = (RuleCall)cReadExcludedStatesAssignment_23.eContents().get(0);
		private final Keyword cWriteExcludedStatesKeyword_24 = (Keyword)cGroup.eContents().get(24);
		private final Assignment cWriteExcludedStatesAssignment_25 = (Assignment)cGroup.eContents().get(25);
		private final RuleCall cWriteExcludedStatesSTRINGTerminalRuleCall_25_0 = (RuleCall)cWriteExcludedStatesAssignment_25.eContents().get(0);
		
		////
		////	Attribute Definition
		////
		//Attribute:
		//	name=ID attType=AttrType dataType=Type rwType=RW_Type displayLevel=DisplayLevel polledPeriod=STRING maxX=STRING
		//	maxY=STRING associatedAttr=STRING memorized=Boolean memorizedAtInit=Boolean changeEvent=FireEvents
		//	archiveEvent=FireEvents dataReadyEvent=FireEvents status=InheritanceStatus properties=AttrProperties
		//	allocReadMember=Boolean isDynamic=Boolean eventCriteria=EventCriteria evArchiveCriteria=EventCriteria "enumLabels:"
		//	enumLabels+=STRING* "readExcludedStates:" readExcludedStates+=STRING* "writeExcludedStates:"
		//	writeExcludedStates+=STRING*;
		public ParserRule getRule() { return rule; }

		//name=ID attType=AttrType dataType=Type rwType=RW_Type displayLevel=DisplayLevel polledPeriod=STRING maxX=STRING
		//maxY=STRING associatedAttr=STRING memorized=Boolean memorizedAtInit=Boolean changeEvent=FireEvents
		//archiveEvent=FireEvents dataReadyEvent=FireEvents status=InheritanceStatus properties=AttrProperties
		//allocReadMember=Boolean isDynamic=Boolean eventCriteria=EventCriteria evArchiveCriteria=EventCriteria "enumLabels:"
		//enumLabels+=STRING* "readExcludedStates:" readExcludedStates+=STRING* "writeExcludedStates:"
		//writeExcludedStates+=STRING*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//attType=AttrType
		public Assignment getAttTypeAssignment_1() { return cAttTypeAssignment_1; }

		//AttrType
		public RuleCall getAttTypeAttrTypeParserRuleCall_1_0() { return cAttTypeAttrTypeParserRuleCall_1_0; }

		//dataType=Type
		public Assignment getDataTypeAssignment_2() { return cDataTypeAssignment_2; }

		//Type
		public RuleCall getDataTypeTypeParserRuleCall_2_0() { return cDataTypeTypeParserRuleCall_2_0; }

		//rwType=RW_Type
		public Assignment getRwTypeAssignment_3() { return cRwTypeAssignment_3; }

		//RW_Type
		public RuleCall getRwTypeRW_TypeParserRuleCall_3_0() { return cRwTypeRW_TypeParserRuleCall_3_0; }

		//displayLevel=DisplayLevel
		public Assignment getDisplayLevelAssignment_4() { return cDisplayLevelAssignment_4; }

		//DisplayLevel
		public RuleCall getDisplayLevelDisplayLevelParserRuleCall_4_0() { return cDisplayLevelDisplayLevelParserRuleCall_4_0; }

		//polledPeriod=STRING
		public Assignment getPolledPeriodAssignment_5() { return cPolledPeriodAssignment_5; }

		//STRING
		public RuleCall getPolledPeriodSTRINGTerminalRuleCall_5_0() { return cPolledPeriodSTRINGTerminalRuleCall_5_0; }

		//maxX=STRING
		public Assignment getMaxXAssignment_6() { return cMaxXAssignment_6; }

		//STRING
		public RuleCall getMaxXSTRINGTerminalRuleCall_6_0() { return cMaxXSTRINGTerminalRuleCall_6_0; }

		//maxY=STRING
		public Assignment getMaxYAssignment_7() { return cMaxYAssignment_7; }

		//STRING
		public RuleCall getMaxYSTRINGTerminalRuleCall_7_0() { return cMaxYSTRINGTerminalRuleCall_7_0; }

		//associatedAttr=STRING
		public Assignment getAssociatedAttrAssignment_8() { return cAssociatedAttrAssignment_8; }

		//STRING
		public RuleCall getAssociatedAttrSTRINGTerminalRuleCall_8_0() { return cAssociatedAttrSTRINGTerminalRuleCall_8_0; }

		//memorized=Boolean
		public Assignment getMemorizedAssignment_9() { return cMemorizedAssignment_9; }

		//Boolean
		public RuleCall getMemorizedBooleanParserRuleCall_9_0() { return cMemorizedBooleanParserRuleCall_9_0; }

		//memorizedAtInit=Boolean
		public Assignment getMemorizedAtInitAssignment_10() { return cMemorizedAtInitAssignment_10; }

		//Boolean
		public RuleCall getMemorizedAtInitBooleanParserRuleCall_10_0() { return cMemorizedAtInitBooleanParserRuleCall_10_0; }

		//changeEvent=FireEvents
		public Assignment getChangeEventAssignment_11() { return cChangeEventAssignment_11; }

		//FireEvents
		public RuleCall getChangeEventFireEventsParserRuleCall_11_0() { return cChangeEventFireEventsParserRuleCall_11_0; }

		//archiveEvent=FireEvents
		public Assignment getArchiveEventAssignment_12() { return cArchiveEventAssignment_12; }

		//FireEvents
		public RuleCall getArchiveEventFireEventsParserRuleCall_12_0() { return cArchiveEventFireEventsParserRuleCall_12_0; }

		//dataReadyEvent=FireEvents
		public Assignment getDataReadyEventAssignment_13() { return cDataReadyEventAssignment_13; }

		//FireEvents
		public RuleCall getDataReadyEventFireEventsParserRuleCall_13_0() { return cDataReadyEventFireEventsParserRuleCall_13_0; }

		//status=InheritanceStatus
		public Assignment getStatusAssignment_14() { return cStatusAssignment_14; }

		//InheritanceStatus
		public RuleCall getStatusInheritanceStatusParserRuleCall_14_0() { return cStatusInheritanceStatusParserRuleCall_14_0; }

		//properties=AttrProperties
		public Assignment getPropertiesAssignment_15() { return cPropertiesAssignment_15; }

		//AttrProperties
		public RuleCall getPropertiesAttrPropertiesParserRuleCall_15_0() { return cPropertiesAttrPropertiesParserRuleCall_15_0; }

		//allocReadMember=Boolean
		public Assignment getAllocReadMemberAssignment_16() { return cAllocReadMemberAssignment_16; }

		//Boolean
		public RuleCall getAllocReadMemberBooleanParserRuleCall_16_0() { return cAllocReadMemberBooleanParserRuleCall_16_0; }

		//isDynamic=Boolean
		public Assignment getIsDynamicAssignment_17() { return cIsDynamicAssignment_17; }

		//Boolean
		public RuleCall getIsDynamicBooleanParserRuleCall_17_0() { return cIsDynamicBooleanParserRuleCall_17_0; }

		//eventCriteria=EventCriteria
		public Assignment getEventCriteriaAssignment_18() { return cEventCriteriaAssignment_18; }

		//EventCriteria
		public RuleCall getEventCriteriaEventCriteriaParserRuleCall_18_0() { return cEventCriteriaEventCriteriaParserRuleCall_18_0; }

		//evArchiveCriteria=EventCriteria
		public Assignment getEvArchiveCriteriaAssignment_19() { return cEvArchiveCriteriaAssignment_19; }

		//EventCriteria
		public RuleCall getEvArchiveCriteriaEventCriteriaParserRuleCall_19_0() { return cEvArchiveCriteriaEventCriteriaParserRuleCall_19_0; }

		//"enumLabels:"
		public Keyword getEnumLabelsKeyword_20() { return cEnumLabelsKeyword_20; }

		//enumLabels+=STRING*
		public Assignment getEnumLabelsAssignment_21() { return cEnumLabelsAssignment_21; }

		//STRING
		public RuleCall getEnumLabelsSTRINGTerminalRuleCall_21_0() { return cEnumLabelsSTRINGTerminalRuleCall_21_0; }

		//"readExcludedStates:"
		public Keyword getReadExcludedStatesKeyword_22() { return cReadExcludedStatesKeyword_22; }

		//readExcludedStates+=STRING*
		public Assignment getReadExcludedStatesAssignment_23() { return cReadExcludedStatesAssignment_23; }

		//STRING
		public RuleCall getReadExcludedStatesSTRINGTerminalRuleCall_23_0() { return cReadExcludedStatesSTRINGTerminalRuleCall_23_0; }

		//"writeExcludedStates:"
		public Keyword getWriteExcludedStatesKeyword_24() { return cWriteExcludedStatesKeyword_24; }

		//writeExcludedStates+=STRING*
		public Assignment getWriteExcludedStatesAssignment_25() { return cWriteExcludedStatesAssignment_25; }

		//STRING
		public RuleCall getWriteExcludedStatesSTRINGTerminalRuleCall_25_0() { return cWriteExcludedStatesSTRINGTerminalRuleCall_25_0; }
	}

	public class FireEventsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FireEvents");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFireAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFireBooleanParserRuleCall_0_0 = (RuleCall)cFireAssignment_0.eContents().get(0);
		private final Assignment cLibCheckCriteriaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLibCheckCriteriaBooleanParserRuleCall_1_0 = (RuleCall)cLibCheckCriteriaAssignment_1.eContents().get(0);
		
		//FireEvents:
		//	fire=Boolean libCheckCriteria=Boolean;
		public ParserRule getRule() { return rule; }

		//fire=Boolean libCheckCriteria=Boolean
		public Group getGroup() { return cGroup; }

		//fire=Boolean
		public Assignment getFireAssignment_0() { return cFireAssignment_0; }

		//Boolean
		public RuleCall getFireBooleanParserRuleCall_0_0() { return cFireBooleanParserRuleCall_0_0; }

		//libCheckCriteria=Boolean
		public Assignment getLibCheckCriteriaAssignment_1() { return cLibCheckCriteriaAssignment_1; }

		//Boolean
		public RuleCall getLibCheckCriteriaBooleanParserRuleCall_1_0() { return cLibCheckCriteriaBooleanParserRuleCall_1_0; }
	}

	public class EventCriteriaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventCriteria");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRelChangeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRelChangeSTRINGTerminalRuleCall_0_0 = (RuleCall)cRelChangeAssignment_0.eContents().get(0);
		private final Assignment cAbsChangeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAbsChangeSTRINGTerminalRuleCall_1_0 = (RuleCall)cAbsChangeAssignment_1.eContents().get(0);
		private final Assignment cPeriodAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPeriodSTRINGTerminalRuleCall_2_0 = (RuleCall)cPeriodAssignment_2.eContents().get(0);
		
		//EventCriteria:
		//	relChange=STRING absChange=STRING period=STRING;
		public ParserRule getRule() { return rule; }

		//relChange=STRING absChange=STRING period=STRING
		public Group getGroup() { return cGroup; }

		//relChange=STRING
		public Assignment getRelChangeAssignment_0() { return cRelChangeAssignment_0; }

		//STRING
		public RuleCall getRelChangeSTRINGTerminalRuleCall_0_0() { return cRelChangeSTRINGTerminalRuleCall_0_0; }

		//absChange=STRING
		public Assignment getAbsChangeAssignment_1() { return cAbsChangeAssignment_1; }

		//STRING
		public RuleCall getAbsChangeSTRINGTerminalRuleCall_1_0() { return cAbsChangeSTRINGTerminalRuleCall_1_0; }

		//period=STRING
		public Assignment getPeriodAssignment_2() { return cPeriodAssignment_2; }

		//STRING
		public RuleCall getPeriodSTRINGTerminalRuleCall_2_0() { return cPeriodSTRINGTerminalRuleCall_2_0; }
	}

	public class AttrPropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttrProperties");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDescriptionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_0_0 = (RuleCall)cDescriptionAssignment_0.eContents().get(0);
		private final Assignment cLabelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLabelSTRINGTerminalRuleCall_1_0 = (RuleCall)cLabelAssignment_1.eContents().get(0);
		private final Assignment cUnitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUnitSTRINGTerminalRuleCall_2_0 = (RuleCall)cUnitAssignment_2.eContents().get(0);
		private final Assignment cStandardUnitAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStandardUnitSTRINGTerminalRuleCall_3_0 = (RuleCall)cStandardUnitAssignment_3.eContents().get(0);
		private final Assignment cDisplayUnitAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDisplayUnitSTRINGTerminalRuleCall_4_0 = (RuleCall)cDisplayUnitAssignment_4.eContents().get(0);
		private final Assignment cFormatAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFormatSTRINGTerminalRuleCall_5_0 = (RuleCall)cFormatAssignment_5.eContents().get(0);
		private final Assignment cMaxValueAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMaxValueSTRINGTerminalRuleCall_6_0 = (RuleCall)cMaxValueAssignment_6.eContents().get(0);
		private final Assignment cMinValueAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cMinValueSTRINGTerminalRuleCall_7_0 = (RuleCall)cMinValueAssignment_7.eContents().get(0);
		private final Assignment cMaxAlarmAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cMaxAlarmSTRINGTerminalRuleCall_8_0 = (RuleCall)cMaxAlarmAssignment_8.eContents().get(0);
		private final Assignment cMinAlarmAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cMinAlarmSTRINGTerminalRuleCall_9_0 = (RuleCall)cMinAlarmAssignment_9.eContents().get(0);
		private final Assignment cMaxWarningAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cMaxWarningSTRINGTerminalRuleCall_10_0 = (RuleCall)cMaxWarningAssignment_10.eContents().get(0);
		private final Assignment cMinWarningAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cMinWarningSTRINGTerminalRuleCall_11_0 = (RuleCall)cMinWarningAssignment_11.eContents().get(0);
		private final Assignment cDeltaTimeAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cDeltaTimeSTRINGTerminalRuleCall_12_0 = (RuleCall)cDeltaTimeAssignment_12.eContents().get(0);
		private final Assignment cDeltaValueAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cDeltaValueSTRINGTerminalRuleCall_13_0 = (RuleCall)cDeltaValueAssignment_13.eContents().get(0);
		
		////
		////	Attribute Properties Definition
		////
		//AttrProperties:
		//	description=STRING label=STRING unit=STRING standardUnit=STRING displayUnit=STRING format=STRING maxValue=STRING
		//	minValue=STRING maxAlarm=STRING minAlarm=STRING maxWarning=STRING minWarning=STRING deltaTime=STRING
		//	deltaValue=STRING;
		public ParserRule getRule() { return rule; }

		//description=STRING label=STRING unit=STRING standardUnit=STRING displayUnit=STRING format=STRING maxValue=STRING
		//minValue=STRING maxAlarm=STRING minAlarm=STRING maxWarning=STRING minWarning=STRING deltaTime=STRING deltaValue=STRING
		public Group getGroup() { return cGroup; }

		//description=STRING
		public Assignment getDescriptionAssignment_0() { return cDescriptionAssignment_0; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_0_0() { return cDescriptionSTRINGTerminalRuleCall_0_0; }

		//label=STRING
		public Assignment getLabelAssignment_1() { return cLabelAssignment_1; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_1_0() { return cLabelSTRINGTerminalRuleCall_1_0; }

		//unit=STRING
		public Assignment getUnitAssignment_2() { return cUnitAssignment_2; }

		//STRING
		public RuleCall getUnitSTRINGTerminalRuleCall_2_0() { return cUnitSTRINGTerminalRuleCall_2_0; }

		//standardUnit=STRING
		public Assignment getStandardUnitAssignment_3() { return cStandardUnitAssignment_3; }

		//STRING
		public RuleCall getStandardUnitSTRINGTerminalRuleCall_3_0() { return cStandardUnitSTRINGTerminalRuleCall_3_0; }

		//displayUnit=STRING
		public Assignment getDisplayUnitAssignment_4() { return cDisplayUnitAssignment_4; }

		//STRING
		public RuleCall getDisplayUnitSTRINGTerminalRuleCall_4_0() { return cDisplayUnitSTRINGTerminalRuleCall_4_0; }

		//format=STRING
		public Assignment getFormatAssignment_5() { return cFormatAssignment_5; }

		//STRING
		public RuleCall getFormatSTRINGTerminalRuleCall_5_0() { return cFormatSTRINGTerminalRuleCall_5_0; }

		//maxValue=STRING
		public Assignment getMaxValueAssignment_6() { return cMaxValueAssignment_6; }

		//STRING
		public RuleCall getMaxValueSTRINGTerminalRuleCall_6_0() { return cMaxValueSTRINGTerminalRuleCall_6_0; }

		//minValue=STRING
		public Assignment getMinValueAssignment_7() { return cMinValueAssignment_7; }

		//STRING
		public RuleCall getMinValueSTRINGTerminalRuleCall_7_0() { return cMinValueSTRINGTerminalRuleCall_7_0; }

		//maxAlarm=STRING
		public Assignment getMaxAlarmAssignment_8() { return cMaxAlarmAssignment_8; }

		//STRING
		public RuleCall getMaxAlarmSTRINGTerminalRuleCall_8_0() { return cMaxAlarmSTRINGTerminalRuleCall_8_0; }

		//minAlarm=STRING
		public Assignment getMinAlarmAssignment_9() { return cMinAlarmAssignment_9; }

		//STRING
		public RuleCall getMinAlarmSTRINGTerminalRuleCall_9_0() { return cMinAlarmSTRINGTerminalRuleCall_9_0; }

		//maxWarning=STRING
		public Assignment getMaxWarningAssignment_10() { return cMaxWarningAssignment_10; }

		//STRING
		public RuleCall getMaxWarningSTRINGTerminalRuleCall_10_0() { return cMaxWarningSTRINGTerminalRuleCall_10_0; }

		//minWarning=STRING
		public Assignment getMinWarningAssignment_11() { return cMinWarningAssignment_11; }

		//STRING
		public RuleCall getMinWarningSTRINGTerminalRuleCall_11_0() { return cMinWarningSTRINGTerminalRuleCall_11_0; }

		//deltaTime=STRING
		public Assignment getDeltaTimeAssignment_12() { return cDeltaTimeAssignment_12; }

		//STRING
		public RuleCall getDeltaTimeSTRINGTerminalRuleCall_12_0() { return cDeltaTimeSTRINGTerminalRuleCall_12_0; }

		//deltaValue=STRING
		public Assignment getDeltaValueAssignment_13() { return cDeltaValueAssignment_13; }

		//STRING
		public RuleCall getDeltaValueSTRINGTerminalRuleCall_13_0() { return cDeltaValueSTRINGTerminalRuleCall_13_0; }
	}

	public class AdditionalFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdditionalFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cPathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathSTRINGTerminalRuleCall_1_0 = (RuleCall)cPathAssignment_1.eContents().get(0);
		
		////
		////	Additional files (not Tango classes)
		////
		//AdditionalFile:
		//	name=STRING path=STRING;
		public ParserRule getRule() { return rule; }

		//name=STRING path=STRING
		public Group getGroup() { return cGroup; }

		//name=STRING
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0() { return cNameSTRINGTerminalRuleCall_0_0; }

		//path=STRING
		public Assignment getPathAssignment_1() { return cPathAssignment_1; }

		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_1_0() { return cPathSTRINGTerminalRuleCall_1_0; }
	}

	public class OverlodedPollPeriodObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OverlodedPollPeriodObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeSTRINGTerminalRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cPollPeriodAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPollPeriodSTRINGTerminalRuleCall_2_0 = (RuleCall)cPollPeriodAssignment_2.eContents().get(0);
		
		////
		////	Object (Command or Attribute) where polling period has been overloaded
		////
		//OverlodedPollPeriodObject:
		//	name=STRING type= //	command or attribute
		//	STRING pollPeriod=STRING;
		public ParserRule getRule() { return rule; }

		//name=STRING type= //	command or attribute
		//STRING pollPeriod=STRING
		public Group getGroup() { return cGroup; }

		//name=STRING
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0() { return cNameSTRINGTerminalRuleCall_0_0; }

		//type= //	command or attribute
		//STRING
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		////	command or attribute
		//STRING
		public RuleCall getTypeSTRINGTerminalRuleCall_1_0() { return cTypeSTRINGTerminalRuleCall_1_0; }

		//pollPeriod=STRING
		public Assignment getPollPeriodAssignment_2() { return cPollPeriodAssignment_2; }

		//STRING
		public RuleCall getPollPeriodSTRINGTerminalRuleCall_2_0() { return cPollPeriodSTRINGTerminalRuleCall_2_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVoidTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cShortTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cUShortTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cIntTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cUIntTypeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cFloatTypeParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cDoubleTypeParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cStringTypeParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cCharArrayTypeParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cShortArrayTypeParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cUShortArrayTypeParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cIntArrayTypeParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cUIntArrayTypeParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cFloatArrayTypeParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cDoubleArrayTypeParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cStringArrayTypeParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cLongStringArrayTypeParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cDoubleStringArrayTypeParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cStateTypeParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cConstStringTypeParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		private final RuleCall cBooleanArrayTypeParserRuleCall_21 = (RuleCall)cAlternatives.eContents().get(21);
		private final RuleCall cLongTypeParserRuleCall_22 = (RuleCall)cAlternatives.eContents().get(22);
		private final RuleCall cULongTypeParserRuleCall_23 = (RuleCall)cAlternatives.eContents().get(23);
		private final RuleCall cUCharTypeParserRuleCall_24 = (RuleCall)cAlternatives.eContents().get(24);
		private final RuleCall cLongArrayTypeParserRuleCall_25 = (RuleCall)cAlternatives.eContents().get(25);
		private final RuleCall cULongArrayTypeParserRuleCall_26 = (RuleCall)cAlternatives.eContents().get(26);
		private final RuleCall cDevIntTypeParserRuleCall_27 = (RuleCall)cAlternatives.eContents().get(27);
		private final RuleCall cEncodedTypeParserRuleCall_28 = (RuleCall)cAlternatives.eContents().get(28);
		private final RuleCall cEnumTypeParserRuleCall_29 = (RuleCall)cAlternatives.eContents().get(29);
		
		////
		////	types could be one of the types
		////
		//Type:
		//	VoidType | BooleanType | ShortType | UShortType | IntType | UIntType | FloatType | DoubleType | StringType |
		//	CharArrayType | ShortArrayType | UShortArrayType | IntArrayType | UIntArrayType | FloatArrayType | DoubleArrayType |
		//	StringArrayType | LongStringArrayType | DoubleStringArrayType | StateType | ConstStringType | BooleanArrayType |
		//	LongType | ULongType | UCharType | LongArrayType | ULongArrayType | DevIntType | EncodedType | EnumType;
		public ParserRule getRule() { return rule; }

		//VoidType | BooleanType | ShortType | UShortType | IntType | UIntType | FloatType | DoubleType | StringType |
		//CharArrayType | ShortArrayType | UShortArrayType | IntArrayType | UIntArrayType | FloatArrayType | DoubleArrayType |
		//StringArrayType | LongStringArrayType | DoubleStringArrayType | StateType | ConstStringType | BooleanArrayType |
		//LongType | ULongType | UCharType | LongArrayType | ULongArrayType | DevIntType | EncodedType | EnumType
		public Alternatives getAlternatives() { return cAlternatives; }

		//VoidType
		public RuleCall getVoidTypeParserRuleCall_0() { return cVoidTypeParserRuleCall_0; }

		//BooleanType
		public RuleCall getBooleanTypeParserRuleCall_1() { return cBooleanTypeParserRuleCall_1; }

		//ShortType
		public RuleCall getShortTypeParserRuleCall_2() { return cShortTypeParserRuleCall_2; }

		//UShortType
		public RuleCall getUShortTypeParserRuleCall_3() { return cUShortTypeParserRuleCall_3; }

		//IntType
		public RuleCall getIntTypeParserRuleCall_4() { return cIntTypeParserRuleCall_4; }

		//UIntType
		public RuleCall getUIntTypeParserRuleCall_5() { return cUIntTypeParserRuleCall_5; }

		//FloatType
		public RuleCall getFloatTypeParserRuleCall_6() { return cFloatTypeParserRuleCall_6; }

		//DoubleType
		public RuleCall getDoubleTypeParserRuleCall_7() { return cDoubleTypeParserRuleCall_7; }

		//StringType
		public RuleCall getStringTypeParserRuleCall_8() { return cStringTypeParserRuleCall_8; }

		//CharArrayType
		public RuleCall getCharArrayTypeParserRuleCall_9() { return cCharArrayTypeParserRuleCall_9; }

		//ShortArrayType
		public RuleCall getShortArrayTypeParserRuleCall_10() { return cShortArrayTypeParserRuleCall_10; }

		//UShortArrayType
		public RuleCall getUShortArrayTypeParserRuleCall_11() { return cUShortArrayTypeParserRuleCall_11; }

		//IntArrayType
		public RuleCall getIntArrayTypeParserRuleCall_12() { return cIntArrayTypeParserRuleCall_12; }

		//UIntArrayType
		public RuleCall getUIntArrayTypeParserRuleCall_13() { return cUIntArrayTypeParserRuleCall_13; }

		//FloatArrayType
		public RuleCall getFloatArrayTypeParserRuleCall_14() { return cFloatArrayTypeParserRuleCall_14; }

		//DoubleArrayType
		public RuleCall getDoubleArrayTypeParserRuleCall_15() { return cDoubleArrayTypeParserRuleCall_15; }

		//StringArrayType
		public RuleCall getStringArrayTypeParserRuleCall_16() { return cStringArrayTypeParserRuleCall_16; }

		//LongStringArrayType
		public RuleCall getLongStringArrayTypeParserRuleCall_17() { return cLongStringArrayTypeParserRuleCall_17; }

		//DoubleStringArrayType
		public RuleCall getDoubleStringArrayTypeParserRuleCall_18() { return cDoubleStringArrayTypeParserRuleCall_18; }

		//StateType
		public RuleCall getStateTypeParserRuleCall_19() { return cStateTypeParserRuleCall_19; }

		//ConstStringType
		public RuleCall getConstStringTypeParserRuleCall_20() { return cConstStringTypeParserRuleCall_20; }

		//BooleanArrayType
		public RuleCall getBooleanArrayTypeParserRuleCall_21() { return cBooleanArrayTypeParserRuleCall_21; }

		//LongType
		public RuleCall getLongTypeParserRuleCall_22() { return cLongTypeParserRuleCall_22; }

		//ULongType
		public RuleCall getULongTypeParserRuleCall_23() { return cULongTypeParserRuleCall_23; }

		//UCharType
		public RuleCall getUCharTypeParserRuleCall_24() { return cUCharTypeParserRuleCall_24; }

		//LongArrayType
		public RuleCall getLongArrayTypeParserRuleCall_25() { return cLongArrayTypeParserRuleCall_25; }

		//ULongArrayType
		public RuleCall getULongArrayTypeParserRuleCall_26() { return cULongArrayTypeParserRuleCall_26; }

		//DevIntType
		public RuleCall getDevIntTypeParserRuleCall_27() { return cDevIntTypeParserRuleCall_27; }

		//EncodedType
		public RuleCall getEncodedTypeParserRuleCall_28() { return cEncodedTypeParserRuleCall_28; }

		//EnumType
		public RuleCall getEnumTypeParserRuleCall_29() { return cEnumTypeParserRuleCall_29; }
	}

	public class VoidTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VoidType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVoidTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVoidKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		////
		////	Tango type defined by IDL.
		////
		//VoidType:
		//	{VoidType} "void";
		public ParserRule getRule() { return rule; }

		//{VoidType} "void"
		public Group getGroup() { return cGroup; }

		//{VoidType}
		public Action getVoidTypeAction_0() { return cVoidTypeAction_0; }

		//"void"
		public Keyword getVoidKeyword_1() { return cVoidKeyword_1; }
	}

	public class BooleanTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBooleanKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BooleanType:
		//	{BooleanType} "boolean";
		public ParserRule getRule() { return rule; }

		//{BooleanType} "boolean"
		public Group getGroup() { return cGroup; }

		//{BooleanType}
		public Action getBooleanTypeAction_0() { return cBooleanTypeAction_0; }

		//"boolean"
		public Keyword getBooleanKeyword_1() { return cBooleanKeyword_1; }
	}

	public class ShortTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShortType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cShortTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cShortKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ShortType:
		//	{ShortType} "short";
		public ParserRule getRule() { return rule; }

		//{ShortType} "short"
		public Group getGroup() { return cGroup; }

		//{ShortType}
		public Action getShortTypeAction_0() { return cShortTypeAction_0; }

		//"short"
		public Keyword getShortKeyword_1() { return cShortKeyword_1; }
	}

	public class UShortTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UShortType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUShortTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUshortKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//UShortType:
		//	{UShortType} "ushort";
		public ParserRule getRule() { return rule; }

		//{UShortType} "ushort"
		public Group getGroup() { return cGroup; }

		//{UShortType}
		public Action getUShortTypeAction_0() { return cUShortTypeAction_0; }

		//"ushort"
		public Keyword getUshortKeyword_1() { return cUshortKeyword_1; }
	}

	public class IntTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//IntType:
		//	{IntType} "int";
		public ParserRule getRule() { return rule; }

		//{IntType} "int"
		public Group getGroup() { return cGroup; }

		//{IntType}
		public Action getIntTypeAction_0() { return cIntTypeAction_0; }

		//"int"
		public Keyword getIntKeyword_1() { return cIntKeyword_1; }
	}

	public class UIntTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UIntType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUIntTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUintKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//UIntType:
		//	{UIntType} "uint";
		public ParserRule getRule() { return rule; }

		//{UIntType} "uint"
		public Group getGroup() { return cGroup; }

		//{UIntType}
		public Action getUIntTypeAction_0() { return cUIntTypeAction_0; }

		//"uint"
		public Keyword getUintKeyword_1() { return cUintKeyword_1; }
	}

	public class FloatTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FloatType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFloatTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFloatKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//FloatType:
		//	{FloatType} "float";
		public ParserRule getRule() { return rule; }

		//{FloatType} "float"
		public Group getGroup() { return cGroup; }

		//{FloatType}
		public Action getFloatTypeAction_0() { return cFloatTypeAction_0; }

		//"float"
		public Keyword getFloatKeyword_1() { return cFloatKeyword_1; }
	}

	public class DoubleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoubleType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDoubleTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDoubleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//DoubleType:
		//	{DoubleType} "double";
		public ParserRule getRule() { return rule; }

		//{DoubleType} "double"
		public Group getGroup() { return cGroup; }

		//{DoubleType}
		public Action getDoubleTypeAction_0() { return cDoubleTypeAction_0; }

		//"double"
		public Keyword getDoubleKeyword_1() { return cDoubleKeyword_1; }
	}

	public class StringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//StringType:
		//	{StringType} "string";
		public ParserRule getRule() { return rule; }

		//{StringType} "string"
		public Group getGroup() { return cGroup; }

		//{StringType}
		public Action getStringTypeAction_0() { return cStringTypeAction_0; }

		//"string"
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }
	}

	public class CharArrayTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CharArrayType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCharArrayTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDevVarCharArrayKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//CharArrayType:
		//	{CharArrayType} "DevVarCharArray";
		public ParserRule getRule() { return rule; }

		//{CharArrayType} "DevVarCharArray"
		public Group getGroup() { return cGroup; }

		//{CharArrayType}
		public Action getCharArrayTypeAction_0() { return cCharArrayTypeAction_0; }

		//"DevVarCharArray"
		public Keyword getDevVarCharArrayKeyword_1() { return cDevVarCharArrayKeyword_1; }
	}

	public class ShortArrayTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShortArrayType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cShortArrayTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDevVarShortArrayKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ShortArrayType:
		//	{ShortArrayType} "DevVarShortArray";
		public ParserRule getRule() { return rule; }

		//{ShortArrayType} "DevVarShortArray"
		public Group getGroup() { return cGroup; }

		//{ShortArrayType}
		public Action getShortArrayTypeAction_0() { return cShortArrayTypeAction_0; }

		//"DevVarShortArray"
		public Keyword getDevVarShortArrayKeyword_1() { return cDevVarShortArrayKeyword_1; }
	}

	public class UShortArrayTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UShortArrayType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUShortArrayTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDevVarUShortArrayKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//UShortArrayType:
		//	{UShortArrayType} "DevVarUShortArray";
		public ParserRule getRule() { return rule; }

		//{UShortArrayType} "DevVarUShortArray"
		public Group getGroup() { return cGroup; }

		//{UShortArrayType}
		public Action getUShortArrayTypeAction_0() { return cUShortArrayTypeAction_0; }

		//"DevVarUShortArray"
		public Keyword getDevVarUShortArrayKeyword_1() { return cDevVarUShortArrayKeyword_1; }
	}

	public class IntArrayTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntArrayType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntArrayTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDevVarLongArrayKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//IntArrayType:
		//	{IntArrayType} "DevVarLongArray";
		public ParserRule getRule() { return rule; }

		//{IntArrayType} "DevVarLongArray"
		public Group getGroup() { return cGroup; }

		//{IntArrayType}
		public Action getIntArrayTypeAction_0() { return cIntArrayTypeAction_0; }

		//"DevVarLongArray"
		public Keyword getDevVarLongArrayKeyword_1() { return cDevVarLongArrayKeyword_1; }
	}

	public class UIntArrayTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UIntArrayType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUIntArrayTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDevVarULongArrayKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//UIntArrayType:
		//	{UIntArrayType} "DevVarULongArray";
		public ParserRule getRule() { return rule; }

		//{UIntArrayType} "DevVarULongArray"
		public Group getGroup() { return cGroup; }

		//{UIntArrayType}
		public Action getUIntArrayTypeAction_0() { return cUIntArrayTypeAction_0; }

		//"DevVarULongArray"
		public Keyword getDevVarULongArrayKeyword_1() { return cDevVarULongArrayKeyword_1; }
	}

	public class FloatArrayTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FloatArrayType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFloatArrayTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDevVarFloatArrayKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//FloatArrayType:
		//	{FloatArrayType} "DevVarFloatArray";
		public ParserRule getRule() { return rule; }

		//{FloatArrayType} "DevVarFloatArray"
		public Group getGroup() { return cGroup; }

		//{FloatArrayType}
		public Action getFloatArrayTypeAction_0() { return cFloatArrayTypeAction_0; }

		//"DevVarFloatArray"
		public Keyword getDevVarFloatArrayKeyword_1() { return cDevVarFloatArrayKeyword_1; }
	}

	public class DoubleArrayTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoubleArrayType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDoubleArrayTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDevVarDoubleArrayKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//DoubleArrayType:
		//	{DoubleArrayType} "DevVarDoubleArray";
		public ParserRule getRule() { return rule; }

		//{DoubleArrayType} "DevVarDoubleArray"
		public Group getGroup() { return cGroup; }

		//{DoubleArrayType}
		public Action getDoubleArrayTypeAction_0() { return cDoubleArrayTypeAction_0; }

		//"DevVarDoubleArray"
		public Keyword getDevVarDoubleArrayKeyword_1() { return cDevVarDoubleArrayKeyword_1; }
	}

	public class StringArrayTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringArrayType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringArrayTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDevVarStringArrayKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//StringArrayType:
		//	{StringArrayType} "DevVarStringArray";
		public ParserRule getRule() { return rule; }

		//{StringArrayType} "DevVarStringArray"
		public Group getGroup() { return cGroup; }

		//{StringArrayType}
		public Action getStringArrayTypeAction_0() { return cStringArrayTypeAction_0; }

		//"DevVarStringArray"
		public Keyword getDevVarStringArrayKeyword_1() { return cDevVarStringArrayKeyword_1; }
	}

	public class LongStringArrayTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LongStringArrayType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLongStringArrayTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDevVarLongStringArrayKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//LongStringArrayType:
		//	{LongStringArrayType} "DevVarLongStringArray";
		public ParserRule getRule() { return rule; }

		//{LongStringArrayType} "DevVarLongStringArray"
		public Group getGroup() { return cGroup; }

		//{LongStringArrayType}
		public Action getLongStringArrayTypeAction_0() { return cLongStringArrayTypeAction_0; }

		//"DevVarLongStringArray"
		public Keyword getDevVarLongStringArrayKeyword_1() { return cDevVarLongStringArrayKeyword_1; }
	}

	public class DoubleStringArrayTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoubleStringArrayType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDoubleStringArrayTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDevVarDoubleStringArrayKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//DoubleStringArrayType:
		//	{DoubleStringArrayType} "DevVarDoubleStringArray";
		public ParserRule getRule() { return rule; }

		//{DoubleStringArrayType} "DevVarDoubleStringArray"
		public Group getGroup() { return cGroup; }

		//{DoubleStringArrayType}
		public Action getDoubleStringArrayTypeAction_0() { return cDoubleStringArrayTypeAction_0; }

		//"DevVarDoubleStringArray"
		public Keyword getDevVarDoubleStringArrayKeyword_1() { return cDevVarDoubleStringArrayKeyword_1; }
	}

	public class StateTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDevStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//StateType:
		//	{StateType} "DevState";
		public ParserRule getRule() { return rule; }

		//{StateType} "DevState"
		public Group getGroup() { return cGroup; }

		//{StateType}
		public Action getStateTypeAction_0() { return cStateTypeAction_0; }

		//"DevState"
		public Keyword getDevStateKeyword_1() { return cDevStateKeyword_1; }
	}

	public class ConstStringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstStringType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstStringTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConstDevStringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ConstStringType:
		//	{ConstStringType} "ConstDevString";
		public ParserRule getRule() { return rule; }

		//{ConstStringType} "ConstDevString"
		public Group getGroup() { return cGroup; }

		//{ConstStringType}
		public Action getConstStringTypeAction_0() { return cConstStringTypeAction_0; }

		//"ConstDevString"
		public Keyword getConstDevStringKeyword_1() { return cConstDevStringKeyword_1; }
	}

	public class BooleanArrayTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanArrayType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanArrayTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDevVarBooleanArrayKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BooleanArrayType:
		//	{BooleanArrayType} "DevVarBooleanArray";
		public ParserRule getRule() { return rule; }

		//{BooleanArrayType} "DevVarBooleanArray"
		public Group getGroup() { return cGroup; }

		//{BooleanArrayType}
		public Action getBooleanArrayTypeAction_0() { return cBooleanArrayTypeAction_0; }

		//"DevVarBooleanArray"
		public Keyword getDevVarBooleanArrayKeyword_1() { return cDevVarBooleanArrayKeyword_1; }
	}

	public class UCharTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UCharType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUCharTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDevUCharKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//UCharType:
		//	{UCharType} "DevUChar";
		public ParserRule getRule() { return rule; }

		//{UCharType} "DevUChar"
		public Group getGroup() { return cGroup; }

		//{UCharType}
		public Action getUCharTypeAction_0() { return cUCharTypeAction_0; }

		//"DevUChar"
		public Keyword getDevUCharKeyword_1() { return cDevUCharKeyword_1; }
	}

	public class LongTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LongType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLongTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDevLong64Keyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//LongType:
		//	{LongType} "DevLong64";
		public ParserRule getRule() { return rule; }

		//{LongType} "DevLong64"
		public Group getGroup() { return cGroup; }

		//{LongType}
		public Action getLongTypeAction_0() { return cLongTypeAction_0; }

		//"DevLong64"
		public Keyword getDevLong64Keyword_1() { return cDevLong64Keyword_1; }
	}

	public class ULongTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ULongType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cULongTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDevULong64Keyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ULongType:
		//	{ULongType} "DevULong64";
		public ParserRule getRule() { return rule; }

		//{ULongType} "DevULong64"
		public Group getGroup() { return cGroup; }

		//{ULongType}
		public Action getULongTypeAction_0() { return cULongTypeAction_0; }

		//"DevULong64"
		public Keyword getDevULong64Keyword_1() { return cDevULong64Keyword_1; }
	}

	public class LongArrayTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LongArrayType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLongArrayTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDevVarLong64ArrayKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//LongArrayType:
		//	{LongArrayType} "DevVarLong64Array";
		public ParserRule getRule() { return rule; }

		//{LongArrayType} "DevVarLong64Array"
		public Group getGroup() { return cGroup; }

		//{LongArrayType}
		public Action getLongArrayTypeAction_0() { return cLongArrayTypeAction_0; }

		//"DevVarLong64Array"
		public Keyword getDevVarLong64ArrayKeyword_1() { return cDevVarLong64ArrayKeyword_1; }
	}

	public class ULongArrayTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ULongArrayType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cULongArrayTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDevVarULong64ArrayKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ULongArrayType:
		//	{ULongArrayType} "DevVarULong64Array";
		public ParserRule getRule() { return rule; }

		//{ULongArrayType} "DevVarULong64Array"
		public Group getGroup() { return cGroup; }

		//{ULongArrayType}
		public Action getULongArrayTypeAction_0() { return cULongArrayTypeAction_0; }

		//"DevVarULong64Array"
		public Keyword getDevVarULong64ArrayKeyword_1() { return cDevVarULong64ArrayKeyword_1; }
	}

	public class DevIntTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DevIntType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDevIntTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDevIntKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//DevIntType:
		//	{DevIntType} "DevInt";
		public ParserRule getRule() { return rule; }

		//{DevIntType} "DevInt"
		public Group getGroup() { return cGroup; }

		//{DevIntType}
		public Action getDevIntTypeAction_0() { return cDevIntTypeAction_0; }

		//"DevInt"
		public Keyword getDevIntKeyword_1() { return cDevIntKeyword_1; }
	}

	public class EncodedTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EncodedType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEncodedTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDevEncodedKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//EncodedType:
		//	{EncodedType} "DevEncoded";
		public ParserRule getRule() { return rule; }

		//{EncodedType} "DevEncoded"
		public Group getGroup() { return cGroup; }

		//{EncodedType}
		public Action getEncodedTypeAction_0() { return cEncodedTypeAction_0; }

		//"DevEncoded"
		public Keyword getDevEncodedKeyword_1() { return cDevEncodedKeyword_1; }
	}

	public class EnumTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnumTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDevEnumKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//EnumType:
		//	{EnumType} "DevEnum";
		public ParserRule getRule() { return rule; }

		//{EnumType} "DevEnum"
		public Group getGroup() { return cGroup; }

		//{EnumType}
		public Action getEnumTypeAction_0() { return cEnumTypeAction_0; }

		//"DevEnum"
		public Keyword getDevEnumKeyword_1() { return cDevEnumKeyword_1; }
	}

	public class ShortVectorTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShortVectorType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cShortVectorTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVectorShortKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ShortVectorType:
		//	{ShortVectorType} "vector<short>";
		public ParserRule getRule() { return rule; }

		//{ShortVectorType} "vector<short>"
		public Group getGroup() { return cGroup; }

		//{ShortVectorType}
		public Action getShortVectorTypeAction_0() { return cShortVectorTypeAction_0; }

		//"vector<short>"
		public Keyword getVectorShortKeyword_1() { return cVectorShortKeyword_1; }
	}

	public class IntVectorTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntVectorType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntVectorTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVectorIntKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//IntVectorType:
		//	{IntVectorType} "vector<int>";
		public ParserRule getRule() { return rule; }

		//{IntVectorType} "vector<int>"
		public Group getGroup() { return cGroup; }

		//{IntVectorType}
		public Action getIntVectorTypeAction_0() { return cIntVectorTypeAction_0; }

		//"vector<int>"
		public Keyword getVectorIntKeyword_1() { return cVectorIntKeyword_1; }
	}

	public class FloatVectorTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FloatVectorType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFloatVectorTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVectorFloatKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//FloatVectorType:
		//	{FloatVectorType} "vector<float>";
		public ParserRule getRule() { return rule; }

		//{FloatVectorType} "vector<float>"
		public Group getGroup() { return cGroup; }

		//{FloatVectorType}
		public Action getFloatVectorTypeAction_0() { return cFloatVectorTypeAction_0; }

		//"vector<float>"
		public Keyword getVectorFloatKeyword_1() { return cVectorFloatKeyword_1; }
	}

	public class DoubleVectorTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoubleVectorType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDoubleVectorTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVectorDoubleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//DoubleVectorType:
		//	{DoubleVectorType} "vector<double>";
		public ParserRule getRule() { return rule; }

		//{DoubleVectorType} "vector<double>"
		public Group getGroup() { return cGroup; }

		//{DoubleVectorType}
		public Action getDoubleVectorTypeAction_0() { return cDoubleVectorTypeAction_0; }

		//"vector<double>"
		public Keyword getVectorDoubleKeyword_1() { return cVectorDoubleKeyword_1; }
	}

	public class StringVectorTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringVectorType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringVectorTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVectorStringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//StringVectorType:
		//	{StringVectorType} "vector<string>";
		public ParserRule getRule() { return rule; }

		//{StringVectorType} "vector<string>"
		public Group getGroup() { return cGroup; }

		//{StringVectorType}
		public Action getStringVectorTypeAction_0() { return cStringVectorTypeAction_0; }

		//"vector<string>"
		public Keyword getVectorStringKeyword_1() { return cVectorStringKeyword_1; }
	}
	
	
	private PogoSystemElements pPogoSystem;
	private ImportElements pImport;
	private PogoMultiClassesElements pPogoMultiClasses;
	private OneClassSimpleDefElements pOneClassSimpleDef;
	private PogoDeviceClassElements pPogoDeviceClass;
	private LanguageElements pLanguage;
	private DisplayLevelElements pDisplayLevel;
	private AttrTypeElements pAttrType;
	private RW_TypeElements pRW_Type;
	private BooleanElements pBoolean;
	private ClassDescriptionElements pClassDescription;
	private InheritanceElements pInheritance;
	private ClassIdentificationElements pClassIdentification;
	private CommentsElements pComments;
	private PreferencesElements pPreferences;
	private StateElements pState;
	private PropertyElements pProperty;
	private PropTypeElements pPropType;
	private SimpleTypeElements pSimpleType;
	private VectorTypeElements pVectorType;
	private InheritanceStatusElements pInheritanceStatus;
	private CommandElements pCommand;
	private ArgumentElements pArgument;
	private AttributeElements pAttribute;
	private FireEventsElements pFireEvents;
	private EventCriteriaElements pEventCriteria;
	private AttrPropertiesElements pAttrProperties;
	private AdditionalFileElements pAdditionalFile;
	private OverlodedPollPeriodObjectElements pOverlodedPollPeriodObject;
	private TypeElements pType;
	private VoidTypeElements pVoidType;
	private BooleanTypeElements pBooleanType;
	private ShortTypeElements pShortType;
	private UShortTypeElements pUShortType;
	private IntTypeElements pIntType;
	private UIntTypeElements pUIntType;
	private FloatTypeElements pFloatType;
	private DoubleTypeElements pDoubleType;
	private StringTypeElements pStringType;
	private CharArrayTypeElements pCharArrayType;
	private ShortArrayTypeElements pShortArrayType;
	private UShortArrayTypeElements pUShortArrayType;
	private IntArrayTypeElements pIntArrayType;
	private UIntArrayTypeElements pUIntArrayType;
	private FloatArrayTypeElements pFloatArrayType;
	private DoubleArrayTypeElements pDoubleArrayType;
	private StringArrayTypeElements pStringArrayType;
	private LongStringArrayTypeElements pLongStringArrayType;
	private DoubleStringArrayTypeElements pDoubleStringArrayType;
	private StateTypeElements pStateType;
	private ConstStringTypeElements pConstStringType;
	private BooleanArrayTypeElements pBooleanArrayType;
	private UCharTypeElements pUCharType;
	private LongTypeElements pLongType;
	private ULongTypeElements pULongType;
	private LongArrayTypeElements pLongArrayType;
	private ULongArrayTypeElements pULongArrayType;
	private DevIntTypeElements pDevIntType;
	private EncodedTypeElements pEncodedType;
	private EnumTypeElements pEnumType;
	private ShortVectorTypeElements pShortVectorType;
	private IntVectorTypeElements pIntVectorType;
	private FloatVectorTypeElements pFloatVectorType;
	private DoubleVectorTypeElements pDoubleVectorType;
	private StringVectorTypeElements pStringVectorType;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public PogoDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//PogoSystem:
	//	imports+=Import* classes+=PogoDeviceClass* multiClasses+=PogoMultiClasses*;
	public PogoSystemElements getPogoSystemAccess() {
		return (pPogoSystem != null) ? pPogoSystem : (pPogoSystem = new PogoSystemElements());
	}
	
	public ParserRule getPogoSystemRule() {
		return getPogoSystemAccess().getRule();
	}

	//Import:
	//	"import" importURI=STRING;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	////==============================================
	////	Multi Classes definition
	////==============================================
	//PogoMultiClasses:
	//	pogoRevision= //	To check Pogo revision when xmi has been created
	//	ID "multiclasses" name=ID "{" sourcePath=STRING description=STRING title=STRING license=STRING "classes:"
	//	classes+=OneClassSimpleDef filestogenerate= //	File(s) to generate (code, makefile,....)
	//	STRING preferences= //	Preferences (for programer, for site or at run time)
	//	Preferences "}";
	public PogoMultiClassesElements getPogoMultiClassesAccess() {
		return (pPogoMultiClasses != null) ? pPogoMultiClasses : (pPogoMultiClasses = new PogoMultiClassesElements());
	}
	
	public ParserRule getPogoMultiClassesRule() {
		return getPogoMultiClassesAccess().getRule();
	}

	////
	////	One class simple definition
	////
	//OneClassSimpleDef:
	//	classname=STRING sourcePath=STRING hasDynamic=Boolean pogo6=Boolean "inheritances:" inheritances+=Inheritance //	inheritance class definitions
	//	"parentClasses:" parentClasses+=STRING //	Used only by graphical display
	//	"additionalFiles:" additionalFiles+=AdditionalFile* //	Programmer's additional files to be added in Makefile (utils, threads,...)
	//;
	public OneClassSimpleDefElements getOneClassSimpleDefAccess() {
		return (pOneClassSimpleDef != null) ? pOneClassSimpleDef : (pOneClassSimpleDef = new OneClassSimpleDefElements());
	}
	
	public ParserRule getOneClassSimpleDefRule() {
		return getOneClassSimpleDefAccess().getRule();
	}

	////==============================================
	////	Class definition
	////==============================================
	//PogoDeviceClass:
	//	"deviceclass" name=ID isAbstract?="abstract"? ("extends" baseClass=[PogoDeviceClass])? "{" pogoRevision= //	To check Pogo revision when xmi has been created
	//	ID institute= //	For future specific features 
	//	ID //	Class information
	//	"description:" description=ClassDescription //	Class property list
	//	"classProperties:" classProperties+=Property* //	Device Property list
	//	"deviceProperties:" deviceProperties+=Property* //	Device static command list
	//	"commands:" commands+=Command* //	Device dynamic command list
	//	"dynamicCommands:" dynamicCommands+=Command* //	Device static attribute list
	//	"attributes:" attributes+=Attribute* //	Device dynamic attribute list
	//	"dynamicAttributes:" dynamicAttributes+=Attribute* //	Device state list
	//	"states:" states+=State* preferences= //	Preferences (for programer, for site or at run time)
	//	Preferences //	Programmer's additional files to be added in Makefile (utils, threads,...)
	//	"additionalFiles:" additionalFiles+=AdditionalFile* //	Object list (Command or Attribute) where polling period has been overloaded
	//	"overlodedPollPeriodObject:" overlodedPollPeriodObject+=OverlodedPollPeriodObject* "}";
	public PogoDeviceClassElements getPogoDeviceClassAccess() {
		return (pPogoDeviceClass != null) ? pPogoDeviceClass : (pPogoDeviceClass = new PogoDeviceClassElements());
	}
	
	public ParserRule getPogoDeviceClassRule() {
		return getPogoDeviceClassAccess().getRule();
	}

	////
	////	Miscellaneous definitions
	////
	//Language:
	//	"Cpp" | "Java" | "Python";
	public LanguageElements getLanguageAccess() {
		return (pLanguage != null) ? pLanguage : (pLanguage = new LanguageElements());
	}
	
	public ParserRule getLanguageRule() {
		return getLanguageAccess().getRule();
	}

	//DisplayLevel:
	//	"OPERATOR" | "EXPERT";
	public DisplayLevelElements getDisplayLevelAccess() {
		return (pDisplayLevel != null) ? pDisplayLevel : (pDisplayLevel = new DisplayLevelElements());
	}
	
	public ParserRule getDisplayLevelRule() {
		return getDisplayLevelAccess().getRule();
	}

	//AttrType:
	//	"Scalar" | "Spectrum" | "Image";
	public AttrTypeElements getAttrTypeAccess() {
		return (pAttrType != null) ? pAttrType : (pAttrType = new AttrTypeElements());
	}
	
	public ParserRule getAttrTypeRule() {
		return getAttrTypeAccess().getRule();
	}

	//RW_Type:
	//	"READ" | "WRITE" | "READ_WRITE" | "READ_WITH_WRITE";
	public RW_TypeElements getRW_TypeAccess() {
		return (pRW_Type != null) ? pRW_Type : (pRW_Type = new RW_TypeElements());
	}
	
	public ParserRule getRW_TypeRule() {
		return getRW_TypeAccess().getRule();
	}

	//Boolean:
	//	"true" | "false";
	public BooleanElements getBooleanAccess() {
		return (pBoolean != null) ? pBoolean : (pBoolean = new BooleanElements());
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}

	////
	////	Class information
	////
	//ClassDescription:
	//	description= //	Class description
	//	STRING title= //	Short description
	//	STRING sourcePath= //	Files location
	//	STRING "inheritances:" inheritances+=Inheritance //	inheritance class definitions
	//	language= //	Language to generate
	//	Language filestogenerate= //	File(s) to generate (code, makefile,....)
	//	STRING identification=ClassIdentification comments=Comments license=STRING hasMandatoryProperty=Boolean
	//	hasConcreteProperty=Boolean hasAbstractCommand=Boolean hasAbstractAttribute=Boolean descriptionHtmlExists= //	File from pogo-6
	//	Boolean;
	public ClassDescriptionElements getClassDescriptionAccess() {
		return (pClassDescription != null) ? pClassDescription : (pClassDescription = new ClassDescriptionElements());
	}
	
	public ParserRule getClassDescriptionRule() {
		return getClassDescriptionAccess().getRule();
	}

	////
	////	Inheritance Definition
	////
	//Inheritance:
	//	classname=STRING sourcePath=STRING;
	public InheritanceElements getInheritanceAccess() {
		return (pInheritance != null) ? pInheritance : (pInheritance = new InheritanceElements());
	}
	
	public ParserRule getInheritanceRule() {
		return getInheritanceAccess().getRule();
	}

	////
	////	Class identification
	////
	////	product reference if any 
	//ClassIdentification:
	//	contact= //	email address of the person in charge
	//	STRING author= //	get from contact
	//	STRING emailDomain= //	get from contact
	//	STRING classFamily= //	class family to be sorted in html doc
	//	STRING siteSpecific= //	If specific for an institute, name of this institute
	//	STRING platform= //	OS where it can run
	//	STRING bus= //	Hardware bus to control.
	//	STRING manufacturer= //	mannufacturer if any
	//	STRING reference=STRING;
	public ClassIdentificationElements getClassIdentificationAccess() {
		return (pClassIdentification != null) ? pClassIdentification : (pClassIdentification = new ClassIdentificationElements());
	}
	
	public ParserRule getClassIdentificationRule() {
		return getClassIdentificationAccess().getRule();
	}

	////
	////	Comments Definition (code generated by java Pogo and not by xtext/xpand)
	////
	////	!!!	Not used since xtend implementation !!!
	//Comments:
	//	commandsTable=STRING;
	public CommentsElements getCommentsAccess() {
		return (pComments != null) ? pComments : (pComments = new CommentsElements());
	}
	
	public ParserRule getCommentsRule() {
		return getCommentsAccess().getRule();
	}

	////
	////	Preferences (for programer or for site)
	////
	////	Used by web automat to manage tag version
	//Preferences:
	//	docHome=STRING makefileHome=STRING installHome=STRING htmlVersion=Boolean;
	public PreferencesElements getPreferencesAccess() {
		return (pPreferences != null) ? pPreferences : (pPreferences = new PreferencesElements());
	}
	
	public ParserRule getPreferencesRule() {
		return getPreferencesAccess().getRule();
	}

	////
	////	State Definition
	////
	//State:
	//	name=ID description=STRING status=InheritanceStatus;
	public StateElements getStateAccess() {
		return (pState != null) ? pState : (pState = new StateElements());
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	////
	////	Property Definition
	////
	//Property:
	//	name=ID type=PropType status=InheritanceStatus mandatory=Boolean description=STRING "defaultPropValue:"
	//	DefaultPropValue+=STRING*;
	public PropertyElements getPropertyAccess() {
		return (pProperty != null) ? pProperty : (pProperty = new PropertyElements());
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	////	types could be one of the types
	//PropType:
	//	SimpleType | VectorType;
	public PropTypeElements getPropTypeAccess() {
		return (pPropType != null) ? pPropType : (pPropType = new PropTypeElements());
	}
	
	public ParserRule getPropTypeRule() {
		return getPropTypeAccess().getRule();
	}

	//SimpleType:
	//	BooleanType | ShortType | UShortType | IntType | UIntType | FloatType | DoubleType | StringType;
	public SimpleTypeElements getSimpleTypeAccess() {
		return (pSimpleType != null) ? pSimpleType : (pSimpleType = new SimpleTypeElements());
	}
	
	public ParserRule getSimpleTypeRule() {
		return getSimpleTypeAccess().getRule();
	}

	//VectorType:
	//	ShortVectorType | IntVectorType | FloatVectorType | DoubleVectorType | StringVectorType;
	public VectorTypeElements getVectorTypeAccess() {
		return (pVectorType != null) ? pVectorType : (pVectorType = new VectorTypeElements());
	}
	
	public ParserRule getVectorTypeRule() {
		return getVectorTypeAccess().getRule();
	}

	////	What has changed (dataType, attType, RWtype)
	//InheritanceStatus:
	//	abstract= //	is abstract or inherited from abstract
	//	Boolean inherited= //	is hinerited
	//	Boolean concrete= //	is concrete or overloaded
	//	Boolean concreteHere= //	is concrete or overloaded in this class
	//	Boolean hasChanged=STRING;
	public InheritanceStatusElements getInheritanceStatusAccess() {
		return (pInheritanceStatus != null) ? pInheritanceStatus : (pInheritanceStatus = new InheritanceStatusElements());
	}
	
	public ParserRule getInheritanceStatusRule() {
		return getInheritanceStatusAccess().getRule();
	}

	////
	////	Command Definition
	////
	//Command:
	//	name=ID argin=Argument argout=Argument description=STRING status=InheritanceStatus execMethod=STRING
	//	displayLevel=DisplayLevel polledPeriod=STRING isDynamic=Boolean "excludedStates:" excludedStates+=STRING*;
	public CommandElements getCommandAccess() {
		return (pCommand != null) ? pCommand : (pCommand = new CommandElements());
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}

	//Argument:
	//	type=Type description=STRING;
	public ArgumentElements getArgumentAccess() {
		return (pArgument != null) ? pArgument : (pArgument = new ArgumentElements());
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}

	////
	////	Attribute Definition
	////
	//Attribute:
	//	name=ID attType=AttrType dataType=Type rwType=RW_Type displayLevel=DisplayLevel polledPeriod=STRING maxX=STRING
	//	maxY=STRING associatedAttr=STRING memorized=Boolean memorizedAtInit=Boolean changeEvent=FireEvents
	//	archiveEvent=FireEvents dataReadyEvent=FireEvents status=InheritanceStatus properties=AttrProperties
	//	allocReadMember=Boolean isDynamic=Boolean eventCriteria=EventCriteria evArchiveCriteria=EventCriteria "enumLabels:"
	//	enumLabels+=STRING* "readExcludedStates:" readExcludedStates+=STRING* "writeExcludedStates:"
	//	writeExcludedStates+=STRING*;
	public AttributeElements getAttributeAccess() {
		return (pAttribute != null) ? pAttribute : (pAttribute = new AttributeElements());
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//FireEvents:
	//	fire=Boolean libCheckCriteria=Boolean;
	public FireEventsElements getFireEventsAccess() {
		return (pFireEvents != null) ? pFireEvents : (pFireEvents = new FireEventsElements());
	}
	
	public ParserRule getFireEventsRule() {
		return getFireEventsAccess().getRule();
	}

	//EventCriteria:
	//	relChange=STRING absChange=STRING period=STRING;
	public EventCriteriaElements getEventCriteriaAccess() {
		return (pEventCriteria != null) ? pEventCriteria : (pEventCriteria = new EventCriteriaElements());
	}
	
	public ParserRule getEventCriteriaRule() {
		return getEventCriteriaAccess().getRule();
	}

	////
	////	Attribute Properties Definition
	////
	//AttrProperties:
	//	description=STRING label=STRING unit=STRING standardUnit=STRING displayUnit=STRING format=STRING maxValue=STRING
	//	minValue=STRING maxAlarm=STRING minAlarm=STRING maxWarning=STRING minWarning=STRING deltaTime=STRING
	//	deltaValue=STRING;
	public AttrPropertiesElements getAttrPropertiesAccess() {
		return (pAttrProperties != null) ? pAttrProperties : (pAttrProperties = new AttrPropertiesElements());
	}
	
	public ParserRule getAttrPropertiesRule() {
		return getAttrPropertiesAccess().getRule();
	}

	////
	////	Additional files (not Tango classes)
	////
	//AdditionalFile:
	//	name=STRING path=STRING;
	public AdditionalFileElements getAdditionalFileAccess() {
		return (pAdditionalFile != null) ? pAdditionalFile : (pAdditionalFile = new AdditionalFileElements());
	}
	
	public ParserRule getAdditionalFileRule() {
		return getAdditionalFileAccess().getRule();
	}

	////
	////	Object (Command or Attribute) where polling period has been overloaded
	////
	//OverlodedPollPeriodObject:
	//	name=STRING type= //	command or attribute
	//	STRING pollPeriod=STRING;
	public OverlodedPollPeriodObjectElements getOverlodedPollPeriodObjectAccess() {
		return (pOverlodedPollPeriodObject != null) ? pOverlodedPollPeriodObject : (pOverlodedPollPeriodObject = new OverlodedPollPeriodObjectElements());
	}
	
	public ParserRule getOverlodedPollPeriodObjectRule() {
		return getOverlodedPollPeriodObjectAccess().getRule();
	}

	////
	////	types could be one of the types
	////
	//Type:
	//	VoidType | BooleanType | ShortType | UShortType | IntType | UIntType | FloatType | DoubleType | StringType |
	//	CharArrayType | ShortArrayType | UShortArrayType | IntArrayType | UIntArrayType | FloatArrayType | DoubleArrayType |
	//	StringArrayType | LongStringArrayType | DoubleStringArrayType | StateType | ConstStringType | BooleanArrayType |
	//	LongType | ULongType | UCharType | LongArrayType | ULongArrayType | DevIntType | EncodedType | EnumType;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	////
	////	Tango type defined by IDL.
	////
	//VoidType:
	//	{VoidType} "void";
	public VoidTypeElements getVoidTypeAccess() {
		return (pVoidType != null) ? pVoidType : (pVoidType = new VoidTypeElements());
	}
	
	public ParserRule getVoidTypeRule() {
		return getVoidTypeAccess().getRule();
	}

	//BooleanType:
	//	{BooleanType} "boolean";
	public BooleanTypeElements getBooleanTypeAccess() {
		return (pBooleanType != null) ? pBooleanType : (pBooleanType = new BooleanTypeElements());
	}
	
	public ParserRule getBooleanTypeRule() {
		return getBooleanTypeAccess().getRule();
	}

	//ShortType:
	//	{ShortType} "short";
	public ShortTypeElements getShortTypeAccess() {
		return (pShortType != null) ? pShortType : (pShortType = new ShortTypeElements());
	}
	
	public ParserRule getShortTypeRule() {
		return getShortTypeAccess().getRule();
	}

	//UShortType:
	//	{UShortType} "ushort";
	public UShortTypeElements getUShortTypeAccess() {
		return (pUShortType != null) ? pUShortType : (pUShortType = new UShortTypeElements());
	}
	
	public ParserRule getUShortTypeRule() {
		return getUShortTypeAccess().getRule();
	}

	//IntType:
	//	{IntType} "int";
	public IntTypeElements getIntTypeAccess() {
		return (pIntType != null) ? pIntType : (pIntType = new IntTypeElements());
	}
	
	public ParserRule getIntTypeRule() {
		return getIntTypeAccess().getRule();
	}

	//UIntType:
	//	{UIntType} "uint";
	public UIntTypeElements getUIntTypeAccess() {
		return (pUIntType != null) ? pUIntType : (pUIntType = new UIntTypeElements());
	}
	
	public ParserRule getUIntTypeRule() {
		return getUIntTypeAccess().getRule();
	}

	//FloatType:
	//	{FloatType} "float";
	public FloatTypeElements getFloatTypeAccess() {
		return (pFloatType != null) ? pFloatType : (pFloatType = new FloatTypeElements());
	}
	
	public ParserRule getFloatTypeRule() {
		return getFloatTypeAccess().getRule();
	}

	//DoubleType:
	//	{DoubleType} "double";
	public DoubleTypeElements getDoubleTypeAccess() {
		return (pDoubleType != null) ? pDoubleType : (pDoubleType = new DoubleTypeElements());
	}
	
	public ParserRule getDoubleTypeRule() {
		return getDoubleTypeAccess().getRule();
	}

	//StringType:
	//	{StringType} "string";
	public StringTypeElements getStringTypeAccess() {
		return (pStringType != null) ? pStringType : (pStringType = new StringTypeElements());
	}
	
	public ParserRule getStringTypeRule() {
		return getStringTypeAccess().getRule();
	}

	//CharArrayType:
	//	{CharArrayType} "DevVarCharArray";
	public CharArrayTypeElements getCharArrayTypeAccess() {
		return (pCharArrayType != null) ? pCharArrayType : (pCharArrayType = new CharArrayTypeElements());
	}
	
	public ParserRule getCharArrayTypeRule() {
		return getCharArrayTypeAccess().getRule();
	}

	//ShortArrayType:
	//	{ShortArrayType} "DevVarShortArray";
	public ShortArrayTypeElements getShortArrayTypeAccess() {
		return (pShortArrayType != null) ? pShortArrayType : (pShortArrayType = new ShortArrayTypeElements());
	}
	
	public ParserRule getShortArrayTypeRule() {
		return getShortArrayTypeAccess().getRule();
	}

	//UShortArrayType:
	//	{UShortArrayType} "DevVarUShortArray";
	public UShortArrayTypeElements getUShortArrayTypeAccess() {
		return (pUShortArrayType != null) ? pUShortArrayType : (pUShortArrayType = new UShortArrayTypeElements());
	}
	
	public ParserRule getUShortArrayTypeRule() {
		return getUShortArrayTypeAccess().getRule();
	}

	//IntArrayType:
	//	{IntArrayType} "DevVarLongArray";
	public IntArrayTypeElements getIntArrayTypeAccess() {
		return (pIntArrayType != null) ? pIntArrayType : (pIntArrayType = new IntArrayTypeElements());
	}
	
	public ParserRule getIntArrayTypeRule() {
		return getIntArrayTypeAccess().getRule();
	}

	//UIntArrayType:
	//	{UIntArrayType} "DevVarULongArray";
	public UIntArrayTypeElements getUIntArrayTypeAccess() {
		return (pUIntArrayType != null) ? pUIntArrayType : (pUIntArrayType = new UIntArrayTypeElements());
	}
	
	public ParserRule getUIntArrayTypeRule() {
		return getUIntArrayTypeAccess().getRule();
	}

	//FloatArrayType:
	//	{FloatArrayType} "DevVarFloatArray";
	public FloatArrayTypeElements getFloatArrayTypeAccess() {
		return (pFloatArrayType != null) ? pFloatArrayType : (pFloatArrayType = new FloatArrayTypeElements());
	}
	
	public ParserRule getFloatArrayTypeRule() {
		return getFloatArrayTypeAccess().getRule();
	}

	//DoubleArrayType:
	//	{DoubleArrayType} "DevVarDoubleArray";
	public DoubleArrayTypeElements getDoubleArrayTypeAccess() {
		return (pDoubleArrayType != null) ? pDoubleArrayType : (pDoubleArrayType = new DoubleArrayTypeElements());
	}
	
	public ParserRule getDoubleArrayTypeRule() {
		return getDoubleArrayTypeAccess().getRule();
	}

	//StringArrayType:
	//	{StringArrayType} "DevVarStringArray";
	public StringArrayTypeElements getStringArrayTypeAccess() {
		return (pStringArrayType != null) ? pStringArrayType : (pStringArrayType = new StringArrayTypeElements());
	}
	
	public ParserRule getStringArrayTypeRule() {
		return getStringArrayTypeAccess().getRule();
	}

	//LongStringArrayType:
	//	{LongStringArrayType} "DevVarLongStringArray";
	public LongStringArrayTypeElements getLongStringArrayTypeAccess() {
		return (pLongStringArrayType != null) ? pLongStringArrayType : (pLongStringArrayType = new LongStringArrayTypeElements());
	}
	
	public ParserRule getLongStringArrayTypeRule() {
		return getLongStringArrayTypeAccess().getRule();
	}

	//DoubleStringArrayType:
	//	{DoubleStringArrayType} "DevVarDoubleStringArray";
	public DoubleStringArrayTypeElements getDoubleStringArrayTypeAccess() {
		return (pDoubleStringArrayType != null) ? pDoubleStringArrayType : (pDoubleStringArrayType = new DoubleStringArrayTypeElements());
	}
	
	public ParserRule getDoubleStringArrayTypeRule() {
		return getDoubleStringArrayTypeAccess().getRule();
	}

	//StateType:
	//	{StateType} "DevState";
	public StateTypeElements getStateTypeAccess() {
		return (pStateType != null) ? pStateType : (pStateType = new StateTypeElements());
	}
	
	public ParserRule getStateTypeRule() {
		return getStateTypeAccess().getRule();
	}

	//ConstStringType:
	//	{ConstStringType} "ConstDevString";
	public ConstStringTypeElements getConstStringTypeAccess() {
		return (pConstStringType != null) ? pConstStringType : (pConstStringType = new ConstStringTypeElements());
	}
	
	public ParserRule getConstStringTypeRule() {
		return getConstStringTypeAccess().getRule();
	}

	//BooleanArrayType:
	//	{BooleanArrayType} "DevVarBooleanArray";
	public BooleanArrayTypeElements getBooleanArrayTypeAccess() {
		return (pBooleanArrayType != null) ? pBooleanArrayType : (pBooleanArrayType = new BooleanArrayTypeElements());
	}
	
	public ParserRule getBooleanArrayTypeRule() {
		return getBooleanArrayTypeAccess().getRule();
	}

	//UCharType:
	//	{UCharType} "DevUChar";
	public UCharTypeElements getUCharTypeAccess() {
		return (pUCharType != null) ? pUCharType : (pUCharType = new UCharTypeElements());
	}
	
	public ParserRule getUCharTypeRule() {
		return getUCharTypeAccess().getRule();
	}

	//LongType:
	//	{LongType} "DevLong64";
	public LongTypeElements getLongTypeAccess() {
		return (pLongType != null) ? pLongType : (pLongType = new LongTypeElements());
	}
	
	public ParserRule getLongTypeRule() {
		return getLongTypeAccess().getRule();
	}

	//ULongType:
	//	{ULongType} "DevULong64";
	public ULongTypeElements getULongTypeAccess() {
		return (pULongType != null) ? pULongType : (pULongType = new ULongTypeElements());
	}
	
	public ParserRule getULongTypeRule() {
		return getULongTypeAccess().getRule();
	}

	//LongArrayType:
	//	{LongArrayType} "DevVarLong64Array";
	public LongArrayTypeElements getLongArrayTypeAccess() {
		return (pLongArrayType != null) ? pLongArrayType : (pLongArrayType = new LongArrayTypeElements());
	}
	
	public ParserRule getLongArrayTypeRule() {
		return getLongArrayTypeAccess().getRule();
	}

	//ULongArrayType:
	//	{ULongArrayType} "DevVarULong64Array";
	public ULongArrayTypeElements getULongArrayTypeAccess() {
		return (pULongArrayType != null) ? pULongArrayType : (pULongArrayType = new ULongArrayTypeElements());
	}
	
	public ParserRule getULongArrayTypeRule() {
		return getULongArrayTypeAccess().getRule();
	}

	//DevIntType:
	//	{DevIntType} "DevInt";
	public DevIntTypeElements getDevIntTypeAccess() {
		return (pDevIntType != null) ? pDevIntType : (pDevIntType = new DevIntTypeElements());
	}
	
	public ParserRule getDevIntTypeRule() {
		return getDevIntTypeAccess().getRule();
	}

	//EncodedType:
	//	{EncodedType} "DevEncoded";
	public EncodedTypeElements getEncodedTypeAccess() {
		return (pEncodedType != null) ? pEncodedType : (pEncodedType = new EncodedTypeElements());
	}
	
	public ParserRule getEncodedTypeRule() {
		return getEncodedTypeAccess().getRule();
	}

	//EnumType:
	//	{EnumType} "DevEnum";
	public EnumTypeElements getEnumTypeAccess() {
		return (pEnumType != null) ? pEnumType : (pEnumType = new EnumTypeElements());
	}
	
	public ParserRule getEnumTypeRule() {
		return getEnumTypeAccess().getRule();
	}

	//ShortVectorType:
	//	{ShortVectorType} "vector<short>";
	public ShortVectorTypeElements getShortVectorTypeAccess() {
		return (pShortVectorType != null) ? pShortVectorType : (pShortVectorType = new ShortVectorTypeElements());
	}
	
	public ParserRule getShortVectorTypeRule() {
		return getShortVectorTypeAccess().getRule();
	}

	//IntVectorType:
	//	{IntVectorType} "vector<int>";
	public IntVectorTypeElements getIntVectorTypeAccess() {
		return (pIntVectorType != null) ? pIntVectorType : (pIntVectorType = new IntVectorTypeElements());
	}
	
	public ParserRule getIntVectorTypeRule() {
		return getIntVectorTypeAccess().getRule();
	}

	//FloatVectorType:
	//	{FloatVectorType} "vector<float>";
	public FloatVectorTypeElements getFloatVectorTypeAccess() {
		return (pFloatVectorType != null) ? pFloatVectorType : (pFloatVectorType = new FloatVectorTypeElements());
	}
	
	public ParserRule getFloatVectorTypeRule() {
		return getFloatVectorTypeAccess().getRule();
	}

	//DoubleVectorType:
	//	{DoubleVectorType} "vector<double>";
	public DoubleVectorTypeElements getDoubleVectorTypeAccess() {
		return (pDoubleVectorType != null) ? pDoubleVectorType : (pDoubleVectorType = new DoubleVectorTypeElements());
	}
	
	public ParserRule getDoubleVectorTypeRule() {
		return getDoubleVectorTypeAccess().getRule();
	}

	//StringVectorType:
	//	{StringVectorType} "vector<string>";
	public StringVectorTypeElements getStringVectorTypeAccess() {
		return (pStringVectorType != null) ? pStringVectorType : (pStringVectorType = new StringVectorTypeElements());
	}
	
	public ParserRule getStringVectorTypeRule() {
		return getStringVectorTypeAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
