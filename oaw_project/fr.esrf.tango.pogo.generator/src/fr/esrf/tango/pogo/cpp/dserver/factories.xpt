«IMPORT pogoDsl»
«EXTENSION fr::esrf::tango::pogo::cpp::_CppConstants»
«EXTENSION fr::esrf::tango::pogo::cpp::_CppUtil»

«DEFINE cppFile FOR PogoDeviceClass»
//===================================================================
//	Factory methods
//===================================================================

«EXPAND deviceFactory»
«EXPAND attributeFactory»
«EXPAND commandFactory»
«ENDDEFINE»




//	=========================================================
//	Define the device_factory method
//
//	This factory does something only if class is not abstract
//	A special case is managed for DataBase class
//	=========================================================
«DEFINE deviceFactory FOR PogoDeviceClass»
«separator2()»
/**
 * method : 		«name»Class::device_factory
 * description : 	Create the device object(s)
 *                  and store them in the device list
 *
 * @param	*devlist_ptr	The device name list
 */
«separator2()»
void «name»Class::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{
«IF name=="DataBase"»
	device_list.push_back(new DataBase(this, DataBase::db_name.c_str(),
                                    	"TANGO database device server"));
	export_device(device_list[0],"database");
«ELSE»
«IF description.hasAbstractAttribute=="false" && description.hasAbstractCommand=="false"-»
«EXPAND fr::esrf::tango::pogo::cpp::Common::ProtectedArea(
			"Class::device_factory_before",
			"//	Add your own code")»
	//	Create devices and add it into the device list
	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
		device_list.push_back(new «name»(this, (*devlist_ptr)[i]));							 
	}

	//	Manage dynamic attributes if any
	erase_dynamic_attributes(devlist_ptr, get_class_attr()->get_attr_list());

	//	Export devices to the outside world
	for (unsigned long i=1 ; i<=devlist_ptr->length() ; i++)
	{
		//	Add dynamic attributes if any
		«name» *dev = static_cast<«name» *>(device_list[device_list.size()-i]);
		dev->add_dynamic_attributes();

		//	Check before if database used.
		if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
			export_device(dev);
		else
			export_device(dev, dev->get_name().c_str());
	}

	«EXPAND fr::esrf::tango::pogo::cpp::Common::ProtectedArea(
			"Class::device_factory_after",
			"//	Add your own code")»
	«ELSE»

	//	This class is not concrete and cannot implement devices

	«ENDIF»
«ENDIF-»
}
«ENDDEFINE»



//	=========================================================
//	Define the attribute_factory method
//	=========================================================
«DEFINE attributeFactory FOR PogoDeviceClass»
«EXPAND fr::esrf::tango::pogo::cpp::Common::methodHeader(
			name + "Class::attribute_factory",
			"Create the attribute object(s)\n" +
			"and store them in the attribute list")-»
void «name»Class::attribute_factory(vector<Tango::Attr *> &att_list)
{
«EXPAND fr::esrf::tango::pogo::cpp::Common::ProtectedArea(
			"Class::attribute_factory_before",
			"//	Add your own code")»
«IF description.hasInheritanceClass()-»
	«description.getInheritance().classname»_ns::«description.getInheritance().classname»Class::attribute_factory(att_list);
«ENDIF-»
«FOREACH attributes AS att»
	«IF att.status.concreteHere=="true"-»
	//	Attribute : «att.name»
	«att.name»Attrib	*«att.name.toLowerCase()» = new «att.name»Attrib();
	Tango::UserDefaultAttrProp	«att.name.toLowerCase()»_prop;
	«setAttributeProperty(att.name, "description",   att.properties.description)»
	«setAttributeProperty(att.name, "label",         att.properties.label)»
	«setAttributeProperty(att.name, "unit",          att.properties.unit)»
	«setAttributeProperty(att.name, "standard_unit", att.properties.standardUnit)»
	«setAttributeProperty(att.name, "display_unit",  att.properties.displayUnit)»
	«setAttributeProperty(att.name, "format",        att.properties.format)»
	«setAttributeProperty(att.name, "max_value",     att.properties.maxValue)»
	«setAttributeProperty(att.name, "min_value",     att.properties.minValue)»
	«setAttributeProperty(att.name, "max_alarm",     att.properties.maxAlarm)»
	«setAttributeProperty(att.name, "min_alarm",     att.properties.minAlarm)»
	«setAttributeProperty(att.name, "max_warning",   att.properties.maxWarning)»
	«setAttributeProperty(att.name, "min_warning",   att.properties.minWarning)»
	«setAttributeProperty(att.name, "delta_t",       att.properties.deltaTime)»
	«setAttributeProperty(att.name, "delta_val",     att.properties.deltaValue)»
	«att.name.toLowerCase()»->set_default_properties(«att.name.toLowerCase()»_prop);
	«IF att.polledPeriod.length>0 && att.polledPeriod != "0"»«att.name.toLowerCase()»->set_polling_period(«att.polledPeriod»);«ELSE»//	Not Polled«ENDIF»
	«att.name.toLowerCase()»->set_disp_level(Tango::«IF att.displayLevel == "EXPERT"»EXPERT«ELSE»OPERATOR«ENDIF»);
	«EXPAND manageMemorized(att)»
	«setAttributeFireEvent(att.name, "change",     att.changeEvent)»
	«setAttributeFireEvent(att.name, "archive",    att.archiveEvent)»
	«setAttributeFireDataReadyEvent(att.name, att.dataReadyEvent)»
	att_list.push_back(«att.name.toLowerCase()»);
	«ENDIF-»
«ENDFOREACH»

«IF description.hasAbstractAttribute=="false" && description.hasAbstractCommand=="false"-»
	//	Create a list of static attributes
	create_static_attribute_list(get_class_attr()->get_attr_list());

	«EXPAND fr::esrf::tango::pogo::cpp::Common::ProtectedArea(
			"Class::attribute_factory_after",
			"//	Add your own code")»
«ENDIF-»
}
«ENDDEFINE»

//	=========================================================
//	Define the memorized part for attribute_factory
//	=========================================================
«DEFINE manageMemorized(Attribute att) FOR PogoDeviceClass-»
«IF att.memorized == "true"-»
	«att.name.toLowerCase()»->set_memorized();
	«IF att.memorizedAtInit == "true"-»
	«att.name.toLowerCase()»->set_memorized_init(true);«ELSE-»
	«att.name.toLowerCase()»->set_memorized_init(false);«ENDIF-»
«ELSE-»
	//	Not memorized
«ENDIF-»
«ENDDEFINE»


//	=========================================================
//	Define the command_factory method
//	=========================================================
«DEFINE commandFactory FOR PogoDeviceClass»
«EXPAND fr::esrf::tango::pogo::cpp::Common::methodHeader(
		name + "Class::command_factory",
		"Create the command object(s)\n" +
		"and store them in the command list")-»
void «name»Class::command_factory()
{
«EXPAND fr::esrf::tango::pogo::cpp::Common::ProtectedArea("Class::command_factory_before")»
«IF description.inheritances.size>0 &&
	description.inheritances.get(0).classname.startsWith("Device_")==false-»
	«description.inheritances.get(0).classname»_ns::«description.inheritances.get(0).classname»Class::command_factory();
«ENDIF-»
«FOREACH commands AS cmd-»
	«IF cmd.name!="State" && cmd.name!="Status" && cmd.status.concreteHere=="true"-»
	«cmd.name»Class	*p«cmd.name»Cmd =
		new «cmd.name»Class("«cmd.name»",
			«cmd.argin.type.cppTypeEnum()», «cmd.argout.type.cppTypeEnum()»,
			"«cmd.argin.description»",
			"«cmd.argout.description»",
			«cmd.cppDisplayLevel()»);
	«cmd.cppSetPollingPeriod()»command_list.push_back(p«cmd.name»Cmd);
	«ENDIF-»
«ENDFOREACH»
«EXPAND fr::esrf::tango::pogo::cpp::Common::ProtectedArea(
				"Class::command_factory_after")»
}
«ENDDEFINE»

