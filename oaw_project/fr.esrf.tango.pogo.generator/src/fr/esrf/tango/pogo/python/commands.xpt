«IMPORT pogoDsl»
«EXTENSION fr::esrf::tango::pogo::python::pythonUtils»

// =======================================================================================
// Defines commands management
// =======================================================================================
«DEFINE pythonFile FOR PogoDeviceClass»
«IF commands.size > 0-»
«separator1()»
#
#	«devicePythonClassName()» commands methods
#
«separator1()»
«ENDIF»
«FOREACH commands AS cmd»
«IF cmd.status.concreteHere=="true"»
«EXPAND executeCommandHeader( cmd )»
«EXPAND executeCommandMethod( cmd )»
«EXPAND isAllowedCommandMethod( cmd )»
«ENDIF»
«ENDFOREACH»
«ENDDEFINE»

// =======================================================================================
// Defines the header for an execute command method
// =======================================================================================
«DEFINE executeCommandHeader( Command cmd ) FOR PogoDeviceClass»
«separator2()»
#	«cmd.name» command:
#
#	Description: «cmd.description»
#«IF cmd.argin.type.pyType() != "void"»
#	argin:	«pyType( cmd.argin.type )»	«cmd.argin.description»«ENDIF»
#	argout:	«pyType( cmd.argout.type )»	«cmd.argout.description»
«separator2()»
«ENDDEFINE»

// =======================================================================================
// Defines the execute command method
// =======================================================================================
«DEFINE executeCommandMethod( Command cmd ) FOR PogoDeviceClass»
«IF cmd.name.toLowerCase() == "state"»
«EXPAND executeStateCommandMethod( cmd )»
«ELSEIF cmd.name.toLowerCase() == "status"»
«EXPAND executeStatusCommandMethod( cmd )»
«ELSE»
	def «cmd.name»( self, argin ):
		print "In ", self.getName(), "::«cmd.name»()"
		
		return argout
«ENDIF»
«ENDDEFINE»

// =======================================================================================
// Defines the execute command method for State
// =======================================================================================
«DEFINE executeStateCommandMethod( Command cmd ) FOR PogoDeviceClass»
	def dev_«cmd.name.toLowerCase()»( self ):
		print "In ", self.getName(), "::dev_«cmd.name.toLowerCase()»()"
		argout = self.get_state()
		
		self.set_state( argout )
		return argout
«ENDDEFINE»

// =======================================================================================
// Defines the execute command method for Status
// =======================================================================================
«DEFINE executeStatusCommandMethod( Command cmd ) FOR PogoDeviceClass»
	def dev_«cmd.name.toLowerCase()»( self ):
		print "In ", self.getName(), "::dev_«cmd.name.toLowerCase()»()"
		argout = self.get_status()
		
		self.set_status( argout )
		return argout
«ENDDEFINE»

// =======================================================================================
// Defines the is_allowed command method
// =======================================================================================
«DEFINE isAllowedCommandMethod( Command cmd ) FOR PogoDeviceClass»
«IF cmd.name.toLowerCase() != "state" && cmd.name.toLowerCase() != "status"-»
«separator2()»
# «cmd.name» command State Machine
«separator2()»
	def is_«cmd.name»_allowed( self ):
		if self.get_state() in [«FOREACH cmd.excludedStates AS e SEPARATOR ','»«e»«ENDFOREACH»]
			return False
		return True
«ENDIF»
«ENDDEFINE»
