/*
* generated by Xtext
*/
grammar InternalPogoDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package fr.esrf.tango.pogo.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.esrf.tango.pogo.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import fr.esrf.tango.pogo.services.PogoDslGrammarAccess;

}

@parser::members {
 
 	private PogoDslGrammarAccess grammarAccess;
 	
    public InternalPogoDslParser(TokenStream input, IAstFactory factory, PogoDslGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("fr/esrf/tango/pogo/parser/antlr/internal/InternalPogoDsl.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "PogoSystem";	
   	} 
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRulePogoSystem
entryRulePogoSystem returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPogoSystemRule(), currentNode); }
	 iv_rulePogoSystem=rulePogoSystem 
	 { $current=$iv_rulePogoSystem.current; } 
	 EOF 
;

// Rule PogoSystem
rulePogoSystem returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPogoSystemAccess().getImportsImportParserRuleCall_0_0(), currentNode); 
	    }
	    lv_imports_0=ruleImport 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPogoSystemRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "imports", lv_imports_0, "Import", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPogoSystemAccess().getClassesPogoDeviceClassParserRuleCall_1_0(), currentNode); 
	    }
	    lv_classes_1=rulePogoDeviceClass 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPogoSystemRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "classes", lv_classes_1, "PogoDeviceClass", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*);





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getImportRule(), currentNode); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('import' 
    {
        createLeafNode(grammarAccess.getImportAccess().getImportKeyword_0(), null); 
    }
(	
	
	    lv_importURI_1=	RULE_STRING
	{
		createLeafNode(grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0(), "importURI"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImportRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "importURI", lv_importURI_1, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRulePogoDeviceClass
entryRulePogoDeviceClass returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPogoDeviceClassRule(), currentNode); }
	 iv_rulePogoDeviceClass=rulePogoDeviceClass 
	 { $current=$iv_rulePogoDeviceClass.current; } 
	 EOF 
;

// Rule PogoDeviceClass
rulePogoDeviceClass returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('deviceclass' 
    {
        createLeafNode(grammarAccess.getPogoDeviceClassAccess().getDeviceclassKeyword_0(), null); 
    }
(	
	
	    lv_name_1=	RULE_ID
	{
		createLeafNode(grammarAccess.getPogoDeviceClassAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPogoDeviceClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_isAbstract_2='abstract' 
    {
        createLeafNode(grammarAccess.getPogoDeviceClassAccess().getIsAbstractAbstractKeyword_2_0(), "isAbstract"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPogoDeviceClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isAbstract", true, "abstract", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?('extends' 
    {
        createLeafNode(grammarAccess.getPogoDeviceClassAccess().getExtendsKeyword_3_0(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getPogoDeviceClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getPogoDeviceClassAccess().getBaseClassPogoDeviceClassCrossReference_3_1_0(), "baseClass"); 
	}

		// TODO assign feature to currentNode
	
))?'{' 
    {
        createLeafNode(grammarAccess.getPogoDeviceClassAccess().getLeftCurlyBracketKeyword_4(), null); 
    }
(	
	
	    lv_institute_6=	RULE_ID
	{
		createLeafNode(grammarAccess.getPogoDeviceClassAccess().getInstituteIDTerminalRuleCall_5_0(), "institute"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPogoDeviceClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "institute", lv_institute_6, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)'description:' 
    {
        createLeafNode(grammarAccess.getPogoDeviceClassAccess().getDescriptionKeyword_6(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPogoDeviceClassAccess().getDescriptionClassDescriptionParserRuleCall_7_0(), currentNode); 
	    }
	    lv_description_8=ruleClassDescription 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPogoDeviceClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "description", lv_description_8, "ClassDescription", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'classProperties:' 
    {
        createLeafNode(grammarAccess.getPogoDeviceClassAccess().getClassPropertiesKeyword_8(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPogoDeviceClassAccess().getClassPropertiesPropertyParserRuleCall_9_0(), currentNode); 
	    }
	    lv_classProperties_10=ruleProperty 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPogoDeviceClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "classProperties", lv_classProperties_10, "Property", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'deviceProperties:' 
    {
        createLeafNode(grammarAccess.getPogoDeviceClassAccess().getDevicePropertiesKeyword_10(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPogoDeviceClassAccess().getDevicePropertiesPropertyParserRuleCall_11_0(), currentNode); 
	    }
	    lv_deviceProperties_12=ruleProperty 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPogoDeviceClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "deviceProperties", lv_deviceProperties_12, "Property", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'commands:' 
    {
        createLeafNode(grammarAccess.getPogoDeviceClassAccess().getCommandsKeyword_12(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPogoDeviceClassAccess().getCommandsCommandParserRuleCall_13_0(), currentNode); 
	    }
	    lv_commands_14=ruleCommand 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPogoDeviceClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "commands", lv_commands_14, "Command", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'attributes:' 
    {
        createLeafNode(grammarAccess.getPogoDeviceClassAccess().getAttributesKeyword_14(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPogoDeviceClassAccess().getAttributesAttributeParserRuleCall_15_0(), currentNode); 
	    }
	    lv_attributes_16=ruleAttribute 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPogoDeviceClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "attributes", lv_attributes_16, "Attribute", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*'states:' 
    {
        createLeafNode(grammarAccess.getPogoDeviceClassAccess().getStatesKeyword_16(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPogoDeviceClassAccess().getStatesStateParserRuleCall_17_0(), currentNode); 
	    }
	    lv_states_18=ruleState 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPogoDeviceClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "states", lv_states_18, "State", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPogoDeviceClassAccess().getPreferencesPreferencesParserRuleCall_18_0(), currentNode); 
	    }
	    lv_preferences_19=rulePreferences 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPogoDeviceClassRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "preferences", lv_preferences_19, "Preferences", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'}' 
    {
        createLeafNode(grammarAccess.getPogoDeviceClassAccess().getRightCurlyBracketKeyword_19(), null); 
    }
);





// Entry rule entryRuleLanguage
entryRuleLanguage returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getLanguageRule(), currentNode); } 
	 iv_ruleLanguage=ruleLanguage 
	 { $current=$iv_ruleLanguage.current.getText(); }  
	 EOF 
;

// Rule Language
ruleLanguage returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(
	kw='Cpp' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getLanguageAccess().getCppKeyword_0(), null); 
    }

    |
	kw='Java' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getLanguageAccess().getJavaKeyword_1(), null); 
    }

    |
	kw='Python' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getLanguageAccess().getPythonKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleDisplayLevel
entryRuleDisplayLevel returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getDisplayLevelRule(), currentNode); } 
	 iv_ruleDisplayLevel=ruleDisplayLevel 
	 { $current=$iv_ruleDisplayLevel.current.getText(); }  
	 EOF 
;

// Rule DisplayLevel
ruleDisplayLevel returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(
	kw='OPERATOR' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDisplayLevelAccess().getOPERATORKeyword_0(), null); 
    }

    |
	kw='EXPERT' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDisplayLevelAccess().getEXPERTKeyword_1(), null); 
    }
)
    ;





// Entry rule entryRuleAttrType
entryRuleAttrType returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAttrTypeRule(), currentNode); } 
	 iv_ruleAttrType=ruleAttrType 
	 { $current=$iv_ruleAttrType.current.getText(); }  
	 EOF 
;

// Rule AttrType
ruleAttrType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(
	kw='Scalar' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAttrTypeAccess().getScalarKeyword_0(), null); 
    }

    |
	kw='Spectrum' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAttrTypeAccess().getSpectrumKeyword_1(), null); 
    }

    |
	kw='Image' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAttrTypeAccess().getImageKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleRW_Type
entryRuleRW_Type returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getRW_TypeRule(), currentNode); } 
	 iv_ruleRW_Type=ruleRW_Type 
	 { $current=$iv_ruleRW_Type.current.getText(); }  
	 EOF 
;

// Rule RW_Type
ruleRW_Type returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(
	kw='READ' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRW_TypeAccess().getREADKeyword_0(), null); 
    }

    |
	kw='WRITE' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRW_TypeAccess().getWRITEKeyword_1(), null); 
    }

    |
	kw='READ_WRITE' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRW_TypeAccess().getREAD_WRITEKeyword_2(), null); 
    }

    |
	kw='READ_WITH_WRITE' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRW_TypeAccess().getREAD_WITH_WRITEKeyword_3(), null); 
    }
)
    ;





// Entry rule entryRuleBoolean
entryRuleBoolean returns [String current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBooleanRule(), currentNode); } 
	 iv_ruleBoolean=ruleBoolean 
	 { $current=$iv_ruleBoolean.current.getText(); }  
	 EOF 
;

// Rule Boolean
ruleBoolean returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
	    lastConsumedDatatypeToken = $current;
    }:
(
	kw='true' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getBooleanAccess().getTrueKeyword_0(), null); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getBooleanAccess().getFalseKeyword_1(), null); 
    }
)
    ;





// Entry rule entryRuleClassDescription
entryRuleClassDescription returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getClassDescriptionRule(), currentNode); }
	 iv_ruleClassDescription=ruleClassDescription 
	 { $current=$iv_ruleClassDescription.current; } 
	 EOF 
;

// Rule ClassDescription
ruleClassDescription returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_description_0=	RULE_STRING
	{
		createLeafNode(grammarAccess.getClassDescriptionAccess().getDescriptionSTRINGTerminalRuleCall_0_0(), "description"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassDescriptionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "description", lv_description_0, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_title_1=	RULE_STRING
	{
		createLeafNode(grammarAccess.getClassDescriptionAccess().getTitleSTRINGTerminalRuleCall_1_0(), "title"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassDescriptionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "title", lv_title_1, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_sourcePath_2=	RULE_STRING
	{
		createLeafNode(grammarAccess.getClassDescriptionAccess().getSourcePathSTRINGTerminalRuleCall_2_0(), "sourcePath"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassDescriptionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "sourcePath", lv_sourcePath_2, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)'inheritances:' 
    {
        createLeafNode(grammarAccess.getClassDescriptionAccess().getInheritancesKeyword_3(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getClassDescriptionAccess().getInheritancesInheritanceParserRuleCall_4_0(), currentNode); 
	    }
	    lv_inheritances_4=ruleInheritance 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassDescriptionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "inheritances", lv_inheritances_4, "Inheritance", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getClassDescriptionAccess().getLanguageLanguageParserRuleCall_5_0(), currentNode); 
	    }
	    lv_language_5=ruleLanguage 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassDescriptionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "language", lv_language_5, "Language", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    lv_filestogenerate_6=	RULE_STRING
	{
		createLeafNode(grammarAccess.getClassDescriptionAccess().getFilestogenerateSTRINGTerminalRuleCall_6_0(), "filestogenerate"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassDescriptionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "filestogenerate", lv_filestogenerate_6, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getClassDescriptionAccess().getIdentificationClassIdentificationParserRuleCall_7_0(), currentNode); 
	    }
	    lv_identification_7=ruleClassIdentification 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassDescriptionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "identification", lv_identification_7, "ClassIdentification", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getClassDescriptionAccess().getCommentsCommentsParserRuleCall_8_0(), currentNode); 
	    }
	    lv_comments_8=ruleComments 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassDescriptionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "comments", lv_comments_8, "Comments", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getClassDescriptionAccess().getHasAbstractCommandBooleanParserRuleCall_9_0(), currentNode); 
	    }
	    lv_hasAbstractCommand_9=ruleBoolean 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassDescriptionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "hasAbstractCommand", lv_hasAbstractCommand_9, "Boolean", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getClassDescriptionAccess().getHasAbstractAttributeBooleanParserRuleCall_10_0(), currentNode); 
	    }
	    lv_hasAbstractAttribute_10=ruleBoolean 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassDescriptionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "hasAbstractAttribute", lv_hasAbstractAttribute_10, "Boolean", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getClassDescriptionAccess().getHasDynamicAttributeBooleanParserRuleCall_11_0(), currentNode); 
	    }
	    lv_hasDynamicAttribute_11=ruleBoolean 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassDescriptionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "hasDynamicAttribute", lv_hasDynamicAttribute_11, "Boolean", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleInheritance
entryRuleInheritance returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getInheritanceRule(), currentNode); }
	 iv_ruleInheritance=ruleInheritance 
	 { $current=$iv_ruleInheritance.current; } 
	 EOF 
;

// Rule Inheritance
ruleInheritance returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_classname_0=	RULE_STRING
	{
		createLeafNode(grammarAccess.getInheritanceAccess().getClassnameSTRINGTerminalRuleCall_0_0(), "classname"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInheritanceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "classname", lv_classname_0, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_sourcePath_1=	RULE_STRING
	{
		createLeafNode(grammarAccess.getInheritanceAccess().getSourcePathSTRINGTerminalRuleCall_1_0(), "sourcePath"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInheritanceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "sourcePath", lv_sourcePath_1, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleClassIdentification
entryRuleClassIdentification returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getClassIdentificationRule(), currentNode); }
	 iv_ruleClassIdentification=ruleClassIdentification 
	 { $current=$iv_ruleClassIdentification.current; } 
	 EOF 
;

// Rule ClassIdentification
ruleClassIdentification returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_contact_0=	RULE_STRING
	{
		createLeafNode(grammarAccess.getClassIdentificationAccess().getContactSTRINGTerminalRuleCall_0_0(), "contact"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassIdentificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "contact", lv_contact_0, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_author_1=	RULE_STRING
	{
		createLeafNode(grammarAccess.getClassIdentificationAccess().getAuthorSTRINGTerminalRuleCall_1_0(), "author"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassIdentificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "author", lv_author_1, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_emailDomain_2=	RULE_STRING
	{
		createLeafNode(grammarAccess.getClassIdentificationAccess().getEmailDomainSTRINGTerminalRuleCall_2_0(), "emailDomain"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassIdentificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "emailDomain", lv_emailDomain_2, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_classFamily_3=	RULE_STRING
	{
		createLeafNode(grammarAccess.getClassIdentificationAccess().getClassFamilySTRINGTerminalRuleCall_3_0(), "classFamily"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassIdentificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "classFamily", lv_classFamily_3, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_siteSpecific_4=	RULE_STRING
	{
		createLeafNode(grammarAccess.getClassIdentificationAccess().getSiteSpecificSTRINGTerminalRuleCall_4_0(), "siteSpecific"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassIdentificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "siteSpecific", lv_siteSpecific_4, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_platform_5=	RULE_STRING
	{
		createLeafNode(grammarAccess.getClassIdentificationAccess().getPlatformSTRINGTerminalRuleCall_5_0(), "platform"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassIdentificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "platform", lv_platform_5, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_bus_6=	RULE_STRING
	{
		createLeafNode(grammarAccess.getClassIdentificationAccess().getBusSTRINGTerminalRuleCall_6_0(), "bus"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassIdentificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "bus", lv_bus_6, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_manufacturer_7=	RULE_STRING
	{
		createLeafNode(grammarAccess.getClassIdentificationAccess().getManufacturerSTRINGTerminalRuleCall_7_0(), "manufacturer"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassIdentificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "manufacturer", lv_manufacturer_7, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_reference_8=	RULE_STRING
	{
		createLeafNode(grammarAccess.getClassIdentificationAccess().getReferenceSTRINGTerminalRuleCall_8_0(), "reference"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassIdentificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "reference", lv_reference_8, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleComments
entryRuleComments returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getCommentsRule(), currentNode); }
	 iv_ruleComments=ruleComments 
	 { $current=$iv_ruleComments.current; } 
	 EOF 
;

// Rule Comments
ruleComments returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_htmlInheritance_0=	RULE_STRING
	{
		createLeafNode(grammarAccess.getCommentsAccess().getHtmlInheritanceSTRINGTerminalRuleCall_0_0(), "htmlInheritance"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCommentsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "htmlInheritance", lv_htmlInheritance_0, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_commandsTable_1=	RULE_STRING
	{
		createLeafNode(grammarAccess.getCommentsAccess().getCommandsTableSTRINGTerminalRuleCall_1_0(), "commandsTable"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCommentsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "commandsTable", lv_commandsTable_1, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRulePreferences
entryRulePreferences returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPreferencesRule(), currentNode); }
	 iv_rulePreferences=rulePreferences 
	 { $current=$iv_rulePreferences.current; } 
	 EOF 
;

// Rule Preferences
rulePreferences returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_docHome_0=	RULE_STRING
	{
		createLeafNode(grammarAccess.getPreferencesAccess().getDocHomeSTRINGTerminalRuleCall_0_0(), "docHome"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPreferencesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "docHome", lv_docHome_0, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_makefileHome_1=	RULE_STRING
	{
		createLeafNode(grammarAccess.getPreferencesAccess().getMakefileHomeSTRINGTerminalRuleCall_1_0(), "makefileHome"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPreferencesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "makefileHome", lv_makefileHome_1, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_installHome_2=	RULE_STRING
	{
		createLeafNode(grammarAccess.getPreferencesAccess().getInstallHomeSTRINGTerminalRuleCall_2_0(), "installHome"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPreferencesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "installHome", lv_installHome_2, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPreferencesAccess().getHtmlVersionBooleanParserRuleCall_3_0(), currentNode); 
	    }
	    lv_htmlVersion_3=ruleBoolean 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPreferencesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "htmlVersion", lv_htmlVersion_3, "Boolean", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleState
entryRuleState returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getStateRule(), currentNode); }
	 iv_ruleState=ruleState 
	 { $current=$iv_ruleState.current; } 
	 EOF 
;

// Rule State
ruleState returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_name_0=	RULE_ID
	{
		createLeafNode(grammarAccess.getStateAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_description_1=	RULE_STRING
	{
		createLeafNode(grammarAccess.getStateAccess().getDescriptionSTRINGTerminalRuleCall_1_0(), "description"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "description", lv_description_1, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getStateAccess().getStatusInheritanceStatusParserRuleCall_2_0(), currentNode); 
	    }
	    lv_status_2=ruleInheritanceStatus 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "status", lv_status_2, "InheritanceStatus", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleProperty
entryRuleProperty returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPropertyRule(), currentNode); }
	 iv_ruleProperty=ruleProperty 
	 { $current=$iv_ruleProperty.current; } 
	 EOF 
;

// Rule Property
ruleProperty returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_name_0=	RULE_ID
	{
		createLeafNode(grammarAccess.getPropertyAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPropertyAccess().getTypePropTypeParserRuleCall_1_0(), currentNode); 
	    }
	    lv_type_1=rulePropType 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_1, "PropType", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getPropertyAccess().getStatusInheritanceStatusParserRuleCall_2_0(), currentNode); 
	    }
	    lv_status_2=ruleInheritanceStatus 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "status", lv_status_2, "InheritanceStatus", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    lv_description_3=	RULE_STRING
	{
		createLeafNode(grammarAccess.getPropertyAccess().getDescriptionSTRINGTerminalRuleCall_3_0(), "description"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "description", lv_description_3, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)'defaultPropValue:' 
    {
        createLeafNode(grammarAccess.getPropertyAccess().getDefaultPropValueKeyword_4(), null); 
    }
(	
	
	    lv_DefaultPropValue_5=	RULE_STRING
	{
		createLeafNode(grammarAccess.getPropertyAccess().getDefaultPropValueSTRINGTerminalRuleCall_5_0(), "DefaultPropValue"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "DefaultPropValue", lv_DefaultPropValue_5, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)*);





// Entry rule entryRulePropType
entryRulePropType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getPropTypeRule(), currentNode); }
	 iv_rulePropType=rulePropType 
	 { $current=$iv_rulePropType.current; } 
	 EOF 
;

// Rule PropType
rulePropType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getPropTypeAccess().getSimpleTypeParserRuleCall_0(), currentNode); 
    }
    this_SimpleType_0=ruleSimpleType
    { 
        $current = $this_SimpleType_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getPropTypeAccess().getVectorTypeParserRuleCall_1(), currentNode); 
    }
    this_VectorType_1=ruleVectorType
    { 
        $current = $this_VectorType_1.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleSimpleType
entryRuleSimpleType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSimpleTypeRule(), currentNode); }
	 iv_ruleSimpleType=ruleSimpleType 
	 { $current=$iv_ruleSimpleType.current; } 
	 EOF 
;

// Rule SimpleType
ruleSimpleType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getSimpleTypeAccess().getBooleanTypeParserRuleCall_0(), currentNode); 
    }
    this_BooleanType_0=ruleBooleanType
    { 
        $current = $this_BooleanType_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getSimpleTypeAccess().getShortTypeParserRuleCall_1(), currentNode); 
    }
    this_ShortType_1=ruleShortType
    { 
        $current = $this_ShortType_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getSimpleTypeAccess().getUShortTypeParserRuleCall_2(), currentNode); 
    }
    this_UShortType_2=ruleUShortType
    { 
        $current = $this_UShortType_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getSimpleTypeAccess().getIntTypeParserRuleCall_3(), currentNode); 
    }
    this_IntType_3=ruleIntType
    { 
        $current = $this_IntType_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getSimpleTypeAccess().getUIntTypeParserRuleCall_4(), currentNode); 
    }
    this_UIntType_4=ruleUIntType
    { 
        $current = $this_UIntType_4.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getSimpleTypeAccess().getFloatTypeParserRuleCall_5(), currentNode); 
    }
    this_FloatType_5=ruleFloatType
    { 
        $current = $this_FloatType_5.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getSimpleTypeAccess().getDoubleTypeParserRuleCall_6(), currentNode); 
    }
    this_DoubleType_6=ruleDoubleType
    { 
        $current = $this_DoubleType_6.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getSimpleTypeAccess().getStringTypeParserRuleCall_7(), currentNode); 
    }
    this_StringType_7=ruleStringType
    { 
        $current = $this_StringType_7.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleVectorType
entryRuleVectorType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getVectorTypeRule(), currentNode); }
	 iv_ruleVectorType=ruleVectorType 
	 { $current=$iv_ruleVectorType.current; } 
	 EOF 
;

// Rule VectorType
ruleVectorType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getVectorTypeAccess().getShortVectorTypeParserRuleCall_0(), currentNode); 
    }
    this_ShortVectorType_0=ruleShortVectorType
    { 
        $current = $this_ShortVectorType_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getVectorTypeAccess().getIntVectorTypeParserRuleCall_1(), currentNode); 
    }
    this_IntVectorType_1=ruleIntVectorType
    { 
        $current = $this_IntVectorType_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getVectorTypeAccess().getFloatVectorTypeParserRuleCall_2(), currentNode); 
    }
    this_FloatVectorType_2=ruleFloatVectorType
    { 
        $current = $this_FloatVectorType_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getVectorTypeAccess().getDoubleVectorTypeParserRuleCall_3(), currentNode); 
    }
    this_DoubleVectorType_3=ruleDoubleVectorType
    { 
        $current = $this_DoubleVectorType_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getVectorTypeAccess().getStringVectorTypeParserRuleCall_4(), currentNode); 
    }
    this_StringVectorType_4=ruleStringVectorType
    { 
        $current = $this_StringVectorType_4.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleInheritanceStatus
entryRuleInheritanceStatus returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getInheritanceStatusRule(), currentNode); }
	 iv_ruleInheritanceStatus=ruleInheritanceStatus 
	 { $current=$iv_ruleInheritanceStatus.current; } 
	 EOF 
;

// Rule InheritanceStatus
ruleInheritanceStatus returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getInheritanceStatusAccess().getAbstractBooleanParserRuleCall_0_0(), currentNode); 
	    }
	    lv_abstract_0=ruleBoolean 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInheritanceStatusRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "abstract", lv_abstract_0, "Boolean", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getInheritanceStatusAccess().getInheritedBooleanParserRuleCall_1_0(), currentNode); 
	    }
	    lv_inherited_1=ruleBoolean 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInheritanceStatusRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "inherited", lv_inherited_1, "Boolean", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getInheritanceStatusAccess().getConcreteBooleanParserRuleCall_2_0(), currentNode); 
	    }
	    lv_concrete_2=ruleBoolean 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInheritanceStatusRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "concrete", lv_concrete_2, "Boolean", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getInheritanceStatusAccess().getConcreteHereBooleanParserRuleCall_3_0(), currentNode); 
	    }
	    lv_concreteHere_3=ruleBoolean 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInheritanceStatusRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "concreteHere", lv_concreteHere_3, "Boolean", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    lv_hasChanged_4=	RULE_STRING
	{
		createLeafNode(grammarAccess.getInheritanceStatusAccess().getHasChangedSTRINGTerminalRuleCall_4_0(), "hasChanged"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInheritanceStatusRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "hasChanged", lv_hasChanged_4, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleCommand
entryRuleCommand returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getCommandRule(), currentNode); }
	 iv_ruleCommand=ruleCommand 
	 { $current=$iv_ruleCommand.current; } 
	 EOF 
;

// Rule Command
ruleCommand returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_name_0=	RULE_ID
	{
		createLeafNode(grammarAccess.getCommandAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCommandRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCommandAccess().getArginArgumentParserRuleCall_1_0(), currentNode); 
	    }
	    lv_argin_1=ruleArgument 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCommandRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "argin", lv_argin_1, "Argument", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCommandAccess().getArgoutArgumentParserRuleCall_2_0(), currentNode); 
	    }
	    lv_argout_2=ruleArgument 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCommandRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "argout", lv_argout_2, "Argument", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    lv_description_3=	RULE_STRING
	{
		createLeafNode(grammarAccess.getCommandAccess().getDescriptionSTRINGTerminalRuleCall_3_0(), "description"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCommandRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "description", lv_description_3, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCommandAccess().getStatusInheritanceStatusParserRuleCall_4_0(), currentNode); 
	    }
	    lv_status_4=ruleInheritanceStatus 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCommandRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "status", lv_status_4, "InheritanceStatus", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    lv_execMethod_5=	RULE_STRING
	{
		createLeafNode(grammarAccess.getCommandAccess().getExecMethodSTRINGTerminalRuleCall_5_0(), "execMethod"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCommandRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "execMethod", lv_execMethod_5, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCommandAccess().getDisplayLevelDisplayLevelParserRuleCall_6_0(), currentNode); 
	    }
	    lv_displayLevel_6=ruleDisplayLevel 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCommandRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "displayLevel", lv_displayLevel_6, "DisplayLevel", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    lv_polledPeriod_7=	RULE_STRING
	{
		createLeafNode(grammarAccess.getCommandAccess().getPolledPeriodSTRINGTerminalRuleCall_7_0(), "polledPeriod"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCommandRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "polledPeriod", lv_polledPeriod_7, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)'excludedStates:' 
    {
        createLeafNode(grammarAccess.getCommandAccess().getExcludedStatesKeyword_8(), null); 
    }
(	
	
	    lv_excludedStates_9=	RULE_STRING
	{
		createLeafNode(grammarAccess.getCommandAccess().getExcludedStatesSTRINGTerminalRuleCall_9_0(), "excludedStates"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCommandRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "excludedStates", lv_excludedStates_9, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)*);





// Entry rule entryRuleArgument
entryRuleArgument returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getArgumentRule(), currentNode); }
	 iv_ruleArgument=ruleArgument 
	 { $current=$iv_ruleArgument.current; } 
	 EOF 
;

// Rule Argument
ruleArgument returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getArgumentAccess().getTypeTypeParserRuleCall_0_0(), currentNode); 
	    }
	    lv_type_0=ruleType 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArgumentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_0, "Type", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    lv_description_1=	RULE_STRING
	{
		createLeafNode(grammarAccess.getArgumentAccess().getDescriptionSTRINGTerminalRuleCall_1_0(), "description"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArgumentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "description", lv_description_1, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAttributeRule(), currentNode); }
	 iv_ruleAttribute=ruleAttribute 
	 { $current=$iv_ruleAttribute.current; } 
	 EOF 
;

// Rule Attribute
ruleAttribute returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_name_0=	RULE_ID
	{
		createLeafNode(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAttributeAccess().getAttTypeAttrTypeParserRuleCall_1_0(), currentNode); 
	    }
	    lv_attType_1=ruleAttrType 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "attType", lv_attType_1, "AttrType", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAttributeAccess().getDataTypeTypeParserRuleCall_2_0(), currentNode); 
	    }
	    lv_dataType_2=ruleType 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "dataType", lv_dataType_2, "Type", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAttributeAccess().getRwTypeRW_TypeParserRuleCall_3_0(), currentNode); 
	    }
	    lv_rwType_3=ruleRW_Type 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "rwType", lv_rwType_3, "RW_Type", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAttributeAccess().getDisplayLevelDisplayLevelParserRuleCall_4_0(), currentNode); 
	    }
	    lv_displayLevel_4=ruleDisplayLevel 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "displayLevel", lv_displayLevel_4, "DisplayLevel", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    lv_polledPeriod_5=	RULE_STRING
	{
		createLeafNode(grammarAccess.getAttributeAccess().getPolledPeriodSTRINGTerminalRuleCall_5_0(), "polledPeriod"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "polledPeriod", lv_polledPeriod_5, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_maxX_6=	RULE_STRING
	{
		createLeafNode(grammarAccess.getAttributeAccess().getMaxXSTRINGTerminalRuleCall_6_0(), "maxX"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "maxX", lv_maxX_6, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_maxY_7=	RULE_STRING
	{
		createLeafNode(grammarAccess.getAttributeAccess().getMaxYSTRINGTerminalRuleCall_7_0(), "maxY"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "maxY", lv_maxY_7, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAttributeAccess().getMemorizedBooleanParserRuleCall_8_0(), currentNode); 
	    }
	    lv_memorized_8=ruleBoolean 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "memorized", lv_memorized_8, "Boolean", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAttributeAccess().getMemorizedAtInitBooleanParserRuleCall_9_0(), currentNode); 
	    }
	    lv_memorizedAtInit_9=ruleBoolean 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "memorizedAtInit", lv_memorizedAtInit_9, "Boolean", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAttributeAccess().getChangeEventFireEventsParserRuleCall_10_0(), currentNode); 
	    }
	    lv_changeEvent_10=ruleFireEvents 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "changeEvent", lv_changeEvent_10, "FireEvents", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAttributeAccess().getArchiveEventFireEventsParserRuleCall_11_0(), currentNode); 
	    }
	    lv_archiveEvent_11=ruleFireEvents 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "archiveEvent", lv_archiveEvent_11, "FireEvents", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAttributeAccess().getStatusInheritanceStatusParserRuleCall_12_0(), currentNode); 
	    }
	    lv_status_12=ruleInheritanceStatus 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "status", lv_status_12, "InheritanceStatus", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAttributeAccess().getPropertiesAttrPropertiesParserRuleCall_13_0(), currentNode); 
	    }
	    lv_properties_13=ruleAttrProperties 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "properties", lv_properties_13, "AttrProperties", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAttributeAccess().getAllocReadMemberBooleanParserRuleCall_14_0(), currentNode); 
	    }
	    lv_allocReadMember_14=ruleBoolean 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "allocReadMember", lv_allocReadMember_14, "Boolean", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAttributeAccess().getIsDynamicBooleanParserRuleCall_15_0(), currentNode); 
	    }
	    lv_isDynamic_15=ruleBoolean 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "isDynamic", lv_isDynamic_15, "Boolean", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)'readExcludedStates:' 
    {
        createLeafNode(grammarAccess.getAttributeAccess().getReadExcludedStatesKeyword_16(), null); 
    }
(	
	
	    lv_readExcludedStates_17=	RULE_STRING
	{
		createLeafNode(grammarAccess.getAttributeAccess().getReadExcludedStatesSTRINGTerminalRuleCall_17_0(), "readExcludedStates"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "readExcludedStates", lv_readExcludedStates_17, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)*'writeExcludedStates:' 
    {
        createLeafNode(grammarAccess.getAttributeAccess().getWriteExcludedStatesKeyword_18(), null); 
    }
(	
	
	    lv_writeExcludedStates_19=	RULE_STRING
	{
		createLeafNode(grammarAccess.getAttributeAccess().getWriteExcludedStatesSTRINGTerminalRuleCall_19_0(), "writeExcludedStates"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "writeExcludedStates", lv_writeExcludedStates_19, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)*);





// Entry rule entryRuleFireEvents
entryRuleFireEvents returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFireEventsRule(), currentNode); }
	 iv_ruleFireEvents=ruleFireEvents 
	 { $current=$iv_ruleFireEvents.current; } 
	 EOF 
;

// Rule FireEvents
ruleFireEvents returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFireEventsAccess().getFireBooleanParserRuleCall_0_0(), currentNode); 
	    }
	    lv_fire_0=ruleBoolean 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFireEventsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "fire", lv_fire_0, "Boolean", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getFireEventsAccess().getLibCheckCriteriaBooleanParserRuleCall_1_0(), currentNode); 
	    }
	    lv_libCheckCriteria_1=ruleBoolean 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFireEventsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "libCheckCriteria", lv_libCheckCriteria_1, "Boolean", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
));





// Entry rule entryRuleAttrProperties
entryRuleAttrProperties returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAttrPropertiesRule(), currentNode); }
	 iv_ruleAttrProperties=ruleAttrProperties 
	 { $current=$iv_ruleAttrProperties.current; } 
	 EOF 
;

// Rule AttrProperties
ruleAttrProperties returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_description_0=	RULE_STRING
	{
		createLeafNode(grammarAccess.getAttrPropertiesAccess().getDescriptionSTRINGTerminalRuleCall_0_0(), "description"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttrPropertiesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "description", lv_description_0, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_label_1=	RULE_STRING
	{
		createLeafNode(grammarAccess.getAttrPropertiesAccess().getLabelSTRINGTerminalRuleCall_1_0(), "label"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttrPropertiesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "label", lv_label_1, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_unit_2=	RULE_STRING
	{
		createLeafNode(grammarAccess.getAttrPropertiesAccess().getUnitSTRINGTerminalRuleCall_2_0(), "unit"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttrPropertiesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "unit", lv_unit_2, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_standardUnit_3=	RULE_STRING
	{
		createLeafNode(grammarAccess.getAttrPropertiesAccess().getStandardUnitSTRINGTerminalRuleCall_3_0(), "standardUnit"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttrPropertiesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "standardUnit", lv_standardUnit_3, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_displayUnit_4=	RULE_STRING
	{
		createLeafNode(grammarAccess.getAttrPropertiesAccess().getDisplayUnitSTRINGTerminalRuleCall_4_0(), "displayUnit"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttrPropertiesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "displayUnit", lv_displayUnit_4, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_format_5=	RULE_STRING
	{
		createLeafNode(grammarAccess.getAttrPropertiesAccess().getFormatSTRINGTerminalRuleCall_5_0(), "format"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttrPropertiesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "format", lv_format_5, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_maxValue_6=	RULE_STRING
	{
		createLeafNode(grammarAccess.getAttrPropertiesAccess().getMaxValueSTRINGTerminalRuleCall_6_0(), "maxValue"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttrPropertiesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "maxValue", lv_maxValue_6, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_minValue_7=	RULE_STRING
	{
		createLeafNode(grammarAccess.getAttrPropertiesAccess().getMinValueSTRINGTerminalRuleCall_7_0(), "minValue"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttrPropertiesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "minValue", lv_minValue_7, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_maxAlarm_8=	RULE_STRING
	{
		createLeafNode(grammarAccess.getAttrPropertiesAccess().getMaxAlarmSTRINGTerminalRuleCall_8_0(), "maxAlarm"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttrPropertiesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "maxAlarm", lv_maxAlarm_8, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_minAlarm_9=	RULE_STRING
	{
		createLeafNode(grammarAccess.getAttrPropertiesAccess().getMinAlarmSTRINGTerminalRuleCall_9_0(), "minAlarm"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttrPropertiesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "minAlarm", lv_minAlarm_9, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_maxWarning_10=	RULE_STRING
	{
		createLeafNode(grammarAccess.getAttrPropertiesAccess().getMaxWarningSTRINGTerminalRuleCall_10_0(), "maxWarning"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttrPropertiesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "maxWarning", lv_maxWarning_10, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_minWarning_11=	RULE_STRING
	{
		createLeafNode(grammarAccess.getAttrPropertiesAccess().getMinWarningSTRINGTerminalRuleCall_11_0(), "minWarning"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttrPropertiesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "minWarning", lv_minWarning_11, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_deltaTime_12=	RULE_STRING
	{
		createLeafNode(grammarAccess.getAttrPropertiesAccess().getDeltaTimeSTRINGTerminalRuleCall_12_0(), "deltaTime"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttrPropertiesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "deltaTime", lv_deltaTime_12, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    lv_deltaValue_13=	RULE_STRING
	{
		createLeafNode(grammarAccess.getAttrPropertiesAccess().getDeltaValueSTRINGTerminalRuleCall_13_0(), "deltaValue"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAttrPropertiesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "deltaValue", lv_deltaValue_13, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getTypeRule(), currentNode); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getVoidTypeParserRuleCall_0(), currentNode); 
    }
    this_VoidType_0=ruleVoidType
    { 
        $current = $this_VoidType_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getBooleanTypeParserRuleCall_1(), currentNode); 
    }
    this_BooleanType_1=ruleBooleanType
    { 
        $current = $this_BooleanType_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getShortTypeParserRuleCall_2(), currentNode); 
    }
    this_ShortType_2=ruleShortType
    { 
        $current = $this_ShortType_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getUShortTypeParserRuleCall_3(), currentNode); 
    }
    this_UShortType_3=ruleUShortType
    { 
        $current = $this_UShortType_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getIntTypeParserRuleCall_4(), currentNode); 
    }
    this_IntType_4=ruleIntType
    { 
        $current = $this_IntType_4.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getUIntTypeParserRuleCall_5(), currentNode); 
    }
    this_UIntType_5=ruleUIntType
    { 
        $current = $this_UIntType_5.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getFloatTypeParserRuleCall_6(), currentNode); 
    }
    this_FloatType_6=ruleFloatType
    { 
        $current = $this_FloatType_6.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getDoubleTypeParserRuleCall_7(), currentNode); 
    }
    this_DoubleType_7=ruleDoubleType
    { 
        $current = $this_DoubleType_7.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getStringTypeParserRuleCall_8(), currentNode); 
    }
    this_StringType_8=ruleStringType
    { 
        $current = $this_StringType_8.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getCharArrayTypeParserRuleCall_9(), currentNode); 
    }
    this_CharArrayType_9=ruleCharArrayType
    { 
        $current = $this_CharArrayType_9.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getShortArrayTypeParserRuleCall_10(), currentNode); 
    }
    this_ShortArrayType_10=ruleShortArrayType
    { 
        $current = $this_ShortArrayType_10.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getUShortArrayTypeParserRuleCall_11(), currentNode); 
    }
    this_UShortArrayType_11=ruleUShortArrayType
    { 
        $current = $this_UShortArrayType_11.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getIntArrayTypeParserRuleCall_12(), currentNode); 
    }
    this_IntArrayType_12=ruleIntArrayType
    { 
        $current = $this_IntArrayType_12.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getUIntArrayTypeParserRuleCall_13(), currentNode); 
    }
    this_UIntArrayType_13=ruleUIntArrayType
    { 
        $current = $this_UIntArrayType_13.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getFloatArrayTypeParserRuleCall_14(), currentNode); 
    }
    this_FloatArrayType_14=ruleFloatArrayType
    { 
        $current = $this_FloatArrayType_14.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getDoubleArrayTypeParserRuleCall_15(), currentNode); 
    }
    this_DoubleArrayType_15=ruleDoubleArrayType
    { 
        $current = $this_DoubleArrayType_15.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getStringArrayTypeParserRuleCall_16(), currentNode); 
    }
    this_StringArrayType_16=ruleStringArrayType
    { 
        $current = $this_StringArrayType_16.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getLongStringArrayTypeParserRuleCall_17(), currentNode); 
    }
    this_LongStringArrayType_17=ruleLongStringArrayType
    { 
        $current = $this_LongStringArrayType_17.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getDoubleStringArrayTypeParserRuleCall_18(), currentNode); 
    }
    this_DoubleStringArrayType_18=ruleDoubleStringArrayType
    { 
        $current = $this_DoubleStringArrayType_18.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getStateTypeParserRuleCall_19(), currentNode); 
    }
    this_StateType_19=ruleStateType
    { 
        $current = $this_StateType_19.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getConstStringTypeParserRuleCall_20(), currentNode); 
    }
    this_ConstStringType_20=ruleConstStringType
    { 
        $current = $this_ConstStringType_20.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getBooleanArrayTypeParserRuleCall_21(), currentNode); 
    }
    this_BooleanArrayType_21=ruleBooleanArrayType
    { 
        $current = $this_BooleanArrayType_21.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getLongTypeParserRuleCall_22(), currentNode); 
    }
    this_LongType_22=ruleLongType
    { 
        $current = $this_LongType_22.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getULongTypeParserRuleCall_23(), currentNode); 
    }
    this_ULongType_23=ruleULongType
    { 
        $current = $this_ULongType_23.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getUCharTypeParserRuleCall_24(), currentNode); 
    }
    this_UCharType_24=ruleUCharType
    { 
        $current = $this_UCharType_24.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getLongArrayTypeParserRuleCall_25(), currentNode); 
    }
    this_LongArrayType_25=ruleLongArrayType
    { 
        $current = $this_LongArrayType_25.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getULongArrayTypeParserRuleCall_26(), currentNode); 
    }
    this_ULongArrayType_26=ruleULongArrayType
    { 
        $current = $this_ULongArrayType_26.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getDevIntTypeParserRuleCall_27(), currentNode); 
    }
    this_DevIntType_27=ruleDevIntType
    { 
        $current = $this_DevIntType_27.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeAccess().getEncodedTypeParserRuleCall_28(), currentNode); 
    }
    this_EncodedType_28=ruleEncodedType
    { 
        $current = $this_EncodedType_28.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleVoidType
entryRuleVoidType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getVoidTypeRule(), currentNode); }
	 iv_ruleVoidType=ruleVoidType 
	 { $current=$iv_ruleVoidType.current; } 
	 EOF 
;

// Rule VoidType
ruleVoidType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getVoidTypeAccess().getVoidTypeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getVoidTypeAccess().getVoidTypeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'void' 
    {
        createLeafNode(grammarAccess.getVoidTypeAccess().getVoidKeyword_1(), null); 
    }
);





// Entry rule entryRuleBooleanType
entryRuleBooleanType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBooleanTypeRule(), currentNode); }
	 iv_ruleBooleanType=ruleBooleanType 
	 { $current=$iv_ruleBooleanType.current; } 
	 EOF 
;

// Rule BooleanType
ruleBooleanType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getBooleanTypeAccess().getBooleanTypeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getBooleanTypeAccess().getBooleanTypeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'boolean' 
    {
        createLeafNode(grammarAccess.getBooleanTypeAccess().getBooleanKeyword_1(), null); 
    }
);





// Entry rule entryRuleShortType
entryRuleShortType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getShortTypeRule(), currentNode); }
	 iv_ruleShortType=ruleShortType 
	 { $current=$iv_ruleShortType.current; } 
	 EOF 
;

// Rule ShortType
ruleShortType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getShortTypeAccess().getShortTypeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getShortTypeAccess().getShortTypeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'short' 
    {
        createLeafNode(grammarAccess.getShortTypeAccess().getShortKeyword_1(), null); 
    }
);





// Entry rule entryRuleUShortType
entryRuleUShortType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getUShortTypeRule(), currentNode); }
	 iv_ruleUShortType=ruleUShortType 
	 { $current=$iv_ruleUShortType.current; } 
	 EOF 
;

// Rule UShortType
ruleUShortType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getUShortTypeAccess().getUShortTypeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getUShortTypeAccess().getUShortTypeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'ushort' 
    {
        createLeafNode(grammarAccess.getUShortTypeAccess().getUshortKeyword_1(), null); 
    }
);





// Entry rule entryRuleIntType
entryRuleIntType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getIntTypeRule(), currentNode); }
	 iv_ruleIntType=ruleIntType 
	 { $current=$iv_ruleIntType.current; } 
	 EOF 
;

// Rule IntType
ruleIntType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getIntTypeAccess().getIntTypeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getIntTypeAccess().getIntTypeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'int' 
    {
        createLeafNode(grammarAccess.getIntTypeAccess().getIntKeyword_1(), null); 
    }
);





// Entry rule entryRuleUIntType
entryRuleUIntType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getUIntTypeRule(), currentNode); }
	 iv_ruleUIntType=ruleUIntType 
	 { $current=$iv_ruleUIntType.current; } 
	 EOF 
;

// Rule UIntType
ruleUIntType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getUIntTypeAccess().getUIntTypeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getUIntTypeAccess().getUIntTypeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'uint' 
    {
        createLeafNode(grammarAccess.getUIntTypeAccess().getUintKeyword_1(), null); 
    }
);





// Entry rule entryRuleFloatType
entryRuleFloatType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFloatTypeRule(), currentNode); }
	 iv_ruleFloatType=ruleFloatType 
	 { $current=$iv_ruleFloatType.current; } 
	 EOF 
;

// Rule FloatType
ruleFloatType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getFloatTypeAccess().getFloatTypeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getFloatTypeAccess().getFloatTypeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'float' 
    {
        createLeafNode(grammarAccess.getFloatTypeAccess().getFloatKeyword_1(), null); 
    }
);





// Entry rule entryRuleDoubleType
entryRuleDoubleType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getDoubleTypeRule(), currentNode); }
	 iv_ruleDoubleType=ruleDoubleType 
	 { $current=$iv_ruleDoubleType.current; } 
	 EOF 
;

// Rule DoubleType
ruleDoubleType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getDoubleTypeAccess().getDoubleTypeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getDoubleTypeAccess().getDoubleTypeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'double' 
    {
        createLeafNode(grammarAccess.getDoubleTypeAccess().getDoubleKeyword_1(), null); 
    }
);





// Entry rule entryRuleStringType
entryRuleStringType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getStringTypeRule(), currentNode); }
	 iv_ruleStringType=ruleStringType 
	 { $current=$iv_ruleStringType.current; } 
	 EOF 
;

// Rule StringType
ruleStringType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getStringTypeAccess().getStringTypeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getStringTypeAccess().getStringTypeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'string' 
    {
        createLeafNode(grammarAccess.getStringTypeAccess().getStringKeyword_1(), null); 
    }
);





// Entry rule entryRuleCharArrayType
entryRuleCharArrayType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getCharArrayTypeRule(), currentNode); }
	 iv_ruleCharArrayType=ruleCharArrayType 
	 { $current=$iv_ruleCharArrayType.current; } 
	 EOF 
;

// Rule CharArrayType
ruleCharArrayType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getCharArrayTypeAccess().getCharArrayTypeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getCharArrayTypeAccess().getCharArrayTypeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'DevVarCharArray' 
    {
        createLeafNode(grammarAccess.getCharArrayTypeAccess().getDevVarCharArrayKeyword_1(), null); 
    }
);





// Entry rule entryRuleShortArrayType
entryRuleShortArrayType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getShortArrayTypeRule(), currentNode); }
	 iv_ruleShortArrayType=ruleShortArrayType 
	 { $current=$iv_ruleShortArrayType.current; } 
	 EOF 
;

// Rule ShortArrayType
ruleShortArrayType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getShortArrayTypeAccess().getShortArrayTypeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getShortArrayTypeAccess().getShortArrayTypeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'DevVarShortArray' 
    {
        createLeafNode(grammarAccess.getShortArrayTypeAccess().getDevVarShortArrayKeyword_1(), null); 
    }
);





// Entry rule entryRuleUShortArrayType
entryRuleUShortArrayType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getUShortArrayTypeRule(), currentNode); }
	 iv_ruleUShortArrayType=ruleUShortArrayType 
	 { $current=$iv_ruleUShortArrayType.current; } 
	 EOF 
;

// Rule UShortArrayType
ruleUShortArrayType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getUShortArrayTypeAccess().getUShortArrayTypeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getUShortArrayTypeAccess().getUShortArrayTypeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'DevVarUShortArray' 
    {
        createLeafNode(grammarAccess.getUShortArrayTypeAccess().getDevVarUShortArrayKeyword_1(), null); 
    }
);





// Entry rule entryRuleIntArrayType
entryRuleIntArrayType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getIntArrayTypeRule(), currentNode); }
	 iv_ruleIntArrayType=ruleIntArrayType 
	 { $current=$iv_ruleIntArrayType.current; } 
	 EOF 
;

// Rule IntArrayType
ruleIntArrayType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getIntArrayTypeAccess().getIntArrayTypeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getIntArrayTypeAccess().getIntArrayTypeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'DevVarLongArray' 
    {
        createLeafNode(grammarAccess.getIntArrayTypeAccess().getDevVarLongArrayKeyword_1(), null); 
    }
);





// Entry rule entryRuleUIntArrayType
entryRuleUIntArrayType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getUIntArrayTypeRule(), currentNode); }
	 iv_ruleUIntArrayType=ruleUIntArrayType 
	 { $current=$iv_ruleUIntArrayType.current; } 
	 EOF 
;

// Rule UIntArrayType
ruleUIntArrayType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getUIntArrayTypeAccess().getUIntArrayTypeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getUIntArrayTypeAccess().getUIntArrayTypeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'DevVarULongArray' 
    {
        createLeafNode(grammarAccess.getUIntArrayTypeAccess().getDevVarULongArrayKeyword_1(), null); 
    }
);





// Entry rule entryRuleFloatArrayType
entryRuleFloatArrayType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFloatArrayTypeRule(), currentNode); }
	 iv_ruleFloatArrayType=ruleFloatArrayType 
	 { $current=$iv_ruleFloatArrayType.current; } 
	 EOF 
;

// Rule FloatArrayType
ruleFloatArrayType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getFloatArrayTypeAccess().getFloatArrayTypeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getFloatArrayTypeAccess().getFloatArrayTypeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'DevVarFloatArray' 
    {
        createLeafNode(grammarAccess.getFloatArrayTypeAccess().getDevVarFloatArrayKeyword_1(), null); 
    }
);





// Entry rule entryRuleDoubleArrayType
entryRuleDoubleArrayType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getDoubleArrayTypeRule(), currentNode); }
	 iv_ruleDoubleArrayType=ruleDoubleArrayType 
	 { $current=$iv_ruleDoubleArrayType.current; } 
	 EOF 
;

// Rule DoubleArrayType
ruleDoubleArrayType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getDoubleArrayTypeAccess().getDoubleArrayTypeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getDoubleArrayTypeAccess().getDoubleArrayTypeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'DevVarDoubleArray' 
    {
        createLeafNode(grammarAccess.getDoubleArrayTypeAccess().getDevVarDoubleArrayKeyword_1(), null); 
    }
);





// Entry rule entryRuleStringArrayType
entryRuleStringArrayType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getStringArrayTypeRule(), currentNode); }
	 iv_ruleStringArrayType=ruleStringArrayType 
	 { $current=$iv_ruleStringArrayType.current; } 
	 EOF 
;

// Rule StringArrayType
ruleStringArrayType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getStringArrayTypeAccess().getStringArrayTypeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getStringArrayTypeAccess().getStringArrayTypeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'DevVarStringArray' 
    {
        createLeafNode(grammarAccess.getStringArrayTypeAccess().getDevVarStringArrayKeyword_1(), null); 
    }
);





// Entry rule entryRuleLongStringArrayType
entryRuleLongStringArrayType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getLongStringArrayTypeRule(), currentNode); }
	 iv_ruleLongStringArrayType=ruleLongStringArrayType 
	 { $current=$iv_ruleLongStringArrayType.current; } 
	 EOF 
;

// Rule LongStringArrayType
ruleLongStringArrayType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getLongStringArrayTypeAccess().getLongStringArrayTypeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getLongStringArrayTypeAccess().getLongStringArrayTypeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'DevVarLongStringArray' 
    {
        createLeafNode(grammarAccess.getLongStringArrayTypeAccess().getDevVarLongStringArrayKeyword_1(), null); 
    }
);





// Entry rule entryRuleDoubleStringArrayType
entryRuleDoubleStringArrayType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getDoubleStringArrayTypeRule(), currentNode); }
	 iv_ruleDoubleStringArrayType=ruleDoubleStringArrayType 
	 { $current=$iv_ruleDoubleStringArrayType.current; } 
	 EOF 
;

// Rule DoubleStringArrayType
ruleDoubleStringArrayType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getDoubleStringArrayTypeAccess().getDoubleStringArrayTypeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getDoubleStringArrayTypeAccess().getDoubleStringArrayTypeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'DevVarDoubleStringArray' 
    {
        createLeafNode(grammarAccess.getDoubleStringArrayTypeAccess().getDevVarDoubleStringArrayKeyword_1(), null); 
    }
);





// Entry rule entryRuleStateType
entryRuleStateType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getStateTypeRule(), currentNode); }
	 iv_ruleStateType=ruleStateType 
	 { $current=$iv_ruleStateType.current; } 
	 EOF 
;

// Rule StateType
ruleStateType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getStateTypeAccess().getStateTypeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getStateTypeAccess().getStateTypeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'DevState' 
    {
        createLeafNode(grammarAccess.getStateTypeAccess().getDevStateKeyword_1(), null); 
    }
);





// Entry rule entryRuleConstStringType
entryRuleConstStringType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getConstStringTypeRule(), currentNode); }
	 iv_ruleConstStringType=ruleConstStringType 
	 { $current=$iv_ruleConstStringType.current; } 
	 EOF 
;

// Rule ConstStringType
ruleConstStringType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getConstStringTypeAccess().getConstStringTypeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getConstStringTypeAccess().getConstStringTypeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'ConstDevString' 
    {
        createLeafNode(grammarAccess.getConstStringTypeAccess().getConstDevStringKeyword_1(), null); 
    }
);





// Entry rule entryRuleBooleanArrayType
entryRuleBooleanArrayType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getBooleanArrayTypeRule(), currentNode); }
	 iv_ruleBooleanArrayType=ruleBooleanArrayType 
	 { $current=$iv_ruleBooleanArrayType.current; } 
	 EOF 
;

// Rule BooleanArrayType
ruleBooleanArrayType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getBooleanArrayTypeAccess().getBooleanArrayTypeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getBooleanArrayTypeAccess().getBooleanArrayTypeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'DevVarBooleanArray' 
    {
        createLeafNode(grammarAccess.getBooleanArrayTypeAccess().getDevVarBooleanArrayKeyword_1(), null); 
    }
);





// Entry rule entryRuleUCharType
entryRuleUCharType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getUCharTypeRule(), currentNode); }
	 iv_ruleUCharType=ruleUCharType 
	 { $current=$iv_ruleUCharType.current; } 
	 EOF 
;

// Rule UCharType
ruleUCharType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getUCharTypeAccess().getUCharTypeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getUCharTypeAccess().getUCharTypeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'DevUChar' 
    {
        createLeafNode(grammarAccess.getUCharTypeAccess().getDevUCharKeyword_1(), null); 
    }
);





// Entry rule entryRuleLongType
entryRuleLongType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getLongTypeRule(), currentNode); }
	 iv_ruleLongType=ruleLongType 
	 { $current=$iv_ruleLongType.current; } 
	 EOF 
;

// Rule LongType
ruleLongType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getLongTypeAccess().getLongTypeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getLongTypeAccess().getLongTypeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'DevLong64' 
    {
        createLeafNode(grammarAccess.getLongTypeAccess().getDevLong64Keyword_1(), null); 
    }
);





// Entry rule entryRuleULongType
entryRuleULongType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getULongTypeRule(), currentNode); }
	 iv_ruleULongType=ruleULongType 
	 { $current=$iv_ruleULongType.current; } 
	 EOF 
;

// Rule ULongType
ruleULongType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getULongTypeAccess().getULongTypeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getULongTypeAccess().getULongTypeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'DevULong64' 
    {
        createLeafNode(grammarAccess.getULongTypeAccess().getDevULong64Keyword_1(), null); 
    }
);





// Entry rule entryRuleLongArrayType
entryRuleLongArrayType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getLongArrayTypeRule(), currentNode); }
	 iv_ruleLongArrayType=ruleLongArrayType 
	 { $current=$iv_ruleLongArrayType.current; } 
	 EOF 
;

// Rule LongArrayType
ruleLongArrayType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getLongArrayTypeAccess().getLongArrayTypeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getLongArrayTypeAccess().getLongArrayTypeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'DevVarLong64Array' 
    {
        createLeafNode(grammarAccess.getLongArrayTypeAccess().getDevVarLong64ArrayKeyword_1(), null); 
    }
);





// Entry rule entryRuleULongArrayType
entryRuleULongArrayType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getULongArrayTypeRule(), currentNode); }
	 iv_ruleULongArrayType=ruleULongArrayType 
	 { $current=$iv_ruleULongArrayType.current; } 
	 EOF 
;

// Rule ULongArrayType
ruleULongArrayType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getULongArrayTypeAccess().getULongArrayTypeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getULongArrayTypeAccess().getULongArrayTypeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'DevVarULong64Array' 
    {
        createLeafNode(grammarAccess.getULongArrayTypeAccess().getDevVarULong64ArrayKeyword_1(), null); 
    }
);





// Entry rule entryRuleDevIntType
entryRuleDevIntType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getDevIntTypeRule(), currentNode); }
	 iv_ruleDevIntType=ruleDevIntType 
	 { $current=$iv_ruleDevIntType.current; } 
	 EOF 
;

// Rule DevIntType
ruleDevIntType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getDevIntTypeAccess().getDevIntTypeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getDevIntTypeAccess().getDevIntTypeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'DevInt' 
    {
        createLeafNode(grammarAccess.getDevIntTypeAccess().getDevIntKeyword_1(), null); 
    }
);





// Entry rule entryRuleEncodedType
entryRuleEncodedType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getEncodedTypeRule(), currentNode); }
	 iv_ruleEncodedType=ruleEncodedType 
	 { $current=$iv_ruleEncodedType.current; } 
	 EOF 
;

// Rule EncodedType
ruleEncodedType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getEncodedTypeAccess().getEncodedTypeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getEncodedTypeAccess().getEncodedTypeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'DevEncoded' 
    {
        createLeafNode(grammarAccess.getEncodedTypeAccess().getDevEncodedKeyword_1(), null); 
    }
);





// Entry rule entryRuleShortVectorType
entryRuleShortVectorType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getShortVectorTypeRule(), currentNode); }
	 iv_ruleShortVectorType=ruleShortVectorType 
	 { $current=$iv_ruleShortVectorType.current; } 
	 EOF 
;

// Rule ShortVectorType
ruleShortVectorType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getShortVectorTypeAccess().getShortVectorTypeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getShortVectorTypeAccess().getShortVectorTypeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'vector<short>' 
    {
        createLeafNode(grammarAccess.getShortVectorTypeAccess().getVectorShortKeyword_1(), null); 
    }
);





// Entry rule entryRuleIntVectorType
entryRuleIntVectorType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getIntVectorTypeRule(), currentNode); }
	 iv_ruleIntVectorType=ruleIntVectorType 
	 { $current=$iv_ruleIntVectorType.current; } 
	 EOF 
;

// Rule IntVectorType
ruleIntVectorType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getIntVectorTypeAccess().getIntVectorTypeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getIntVectorTypeAccess().getIntVectorTypeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'vector<int>' 
    {
        createLeafNode(grammarAccess.getIntVectorTypeAccess().getVectorIntKeyword_1(), null); 
    }
);





// Entry rule entryRuleFloatVectorType
entryRuleFloatVectorType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getFloatVectorTypeRule(), currentNode); }
	 iv_ruleFloatVectorType=ruleFloatVectorType 
	 { $current=$iv_ruleFloatVectorType.current; } 
	 EOF 
;

// Rule FloatVectorType
ruleFloatVectorType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getFloatVectorTypeAccess().getFloatVectorTypeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getFloatVectorTypeAccess().getFloatVectorTypeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'vector<float>' 
    {
        createLeafNode(grammarAccess.getFloatVectorTypeAccess().getVectorFloatKeyword_1(), null); 
    }
);





// Entry rule entryRuleDoubleVectorType
entryRuleDoubleVectorType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getDoubleVectorTypeRule(), currentNode); }
	 iv_ruleDoubleVectorType=ruleDoubleVectorType 
	 { $current=$iv_ruleDoubleVectorType.current; } 
	 EOF 
;

// Rule DoubleVectorType
ruleDoubleVectorType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getDoubleVectorTypeAccess().getDoubleVectorTypeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getDoubleVectorTypeAccess().getDoubleVectorTypeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'vector<double>' 
    {
        createLeafNode(grammarAccess.getDoubleVectorTypeAccess().getVectorDoubleKeyword_1(), null); 
    }
);





// Entry rule entryRuleStringVectorType
entryRuleStringVectorType returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getStringVectorTypeRule(), currentNode); }
	 iv_ruleStringVectorType=ruleStringVectorType 
	 { $current=$iv_ruleStringVectorType.current; } 
	 EOF 
;

// Rule StringVectorType
ruleStringVectorType returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getStringVectorTypeAccess().getStringVectorTypeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getStringVectorTypeAccess().getStringVectorTypeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)'vector<string>' 
    {
        createLeafNode(grammarAccess.getStringVectorTypeAccess().getVectorStringKeyword_1(), null); 
    }
);





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


