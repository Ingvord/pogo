/*
* generated by Xtext
*/
package fr.esrf.tango.pogo.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import fr.esrf.tango.pogo.services.PogoDslGrammarAccess;

import com.google.inject.Inject;

public class PogoDslParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private PogoDslGrammarAccess grammarAccess;
		
	public PogoDslGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PogoSystem_Group(this, this, 0, inst);
			case 1: return new Import_Group(this, this, 1, inst);
			case 2: return new PogoMultiClasses_Group(this, this, 2, inst);
			case 3: return new OneClassSimpleDef_Group(this, this, 3, inst);
			case 4: return new PogoDeviceClass_Group(this, this, 4, inst);
			case 5: return new ClassDescription_Group(this, this, 5, inst);
			case 6: return new Inheritance_Group(this, this, 6, inst);
			case 7: return new ClassIdentification_Group(this, this, 7, inst);
			case 8: return new Comments_CommandsTableAssignment(this, this, 8, inst);
			case 9: return new Preferences_Group(this, this, 9, inst);
			case 10: return new State_Group(this, this, 10, inst);
			case 11: return new Property_Group(this, this, 11, inst);
			case 12: return new PropType_Alternatives(this, this, 12, inst);
			case 13: return new SimpleType_Alternatives(this, this, 13, inst);
			case 14: return new VectorType_Alternatives(this, this, 14, inst);
			case 15: return new InheritanceStatus_Group(this, this, 15, inst);
			case 16: return new Command_Group(this, this, 16, inst);
			case 17: return new Argument_Group(this, this, 17, inst);
			case 18: return new Attribute_Group(this, this, 18, inst);
			case 19: return new FireEvents_Group(this, this, 19, inst);
			case 20: return new AttrProperties_Group(this, this, 20, inst);
			case 21: return new AdditionalFile_Group(this, this, 21, inst);
			case 22: return new Type_Alternatives(this, this, 22, inst);
			case 23: return new VoidType_Group(this, this, 23, inst);
			case 24: return new BooleanType_Group(this, this, 24, inst);
			case 25: return new ShortType_Group(this, this, 25, inst);
			case 26: return new UShortType_Group(this, this, 26, inst);
			case 27: return new IntType_Group(this, this, 27, inst);
			case 28: return new UIntType_Group(this, this, 28, inst);
			case 29: return new FloatType_Group(this, this, 29, inst);
			case 30: return new DoubleType_Group(this, this, 30, inst);
			case 31: return new StringType_Group(this, this, 31, inst);
			case 32: return new CharArrayType_Group(this, this, 32, inst);
			case 33: return new ShortArrayType_Group(this, this, 33, inst);
			case 34: return new UShortArrayType_Group(this, this, 34, inst);
			case 35: return new IntArrayType_Group(this, this, 35, inst);
			case 36: return new UIntArrayType_Group(this, this, 36, inst);
			case 37: return new FloatArrayType_Group(this, this, 37, inst);
			case 38: return new DoubleArrayType_Group(this, this, 38, inst);
			case 39: return new StringArrayType_Group(this, this, 39, inst);
			case 40: return new LongStringArrayType_Group(this, this, 40, inst);
			case 41: return new DoubleStringArrayType_Group(this, this, 41, inst);
			case 42: return new StateType_Group(this, this, 42, inst);
			case 43: return new ConstStringType_Group(this, this, 43, inst);
			case 44: return new BooleanArrayType_Group(this, this, 44, inst);
			case 45: return new UCharType_Group(this, this, 45, inst);
			case 46: return new LongType_Group(this, this, 46, inst);
			case 47: return new ULongType_Group(this, this, 47, inst);
			case 48: return new LongArrayType_Group(this, this, 48, inst);
			case 49: return new ULongArrayType_Group(this, this, 49, inst);
			case 50: return new DevIntType_Group(this, this, 50, inst);
			case 51: return new EncodedType_Group(this, this, 51, inst);
			case 52: return new ShortVectorType_Group(this, this, 52, inst);
			case 53: return new IntVectorType_Group(this, this, 53, inst);
			case 54: return new FloatVectorType_Group(this, this, 54, inst);
			case 55: return new DoubleVectorType_Group(this, this, 55, inst);
			case 56: return new StringVectorType_Group(this, this, 56, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule PogoSystem ****************
 *
 * PogoSystem:
 *   imports+=Import* classes+=PogoDeviceClass* multiClasses+=PogoMultiClasses*;
 *
 **/

// imports+=Import* classes+=PogoDeviceClass* multiClasses+=PogoMultiClasses*
protected class PogoSystem_Group extends GroupToken {
	
	public PogoSystem_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPogoSystemAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PogoSystem_MultiClassesAssignment_2(parent, this, 0, inst);
			case 1: return new PogoSystem_ClassesAssignment_1(parent, this, 1, inst);
			case 2: return new PogoSystem_ImportsAssignment_0(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPogoSystemRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// imports+=Import*
protected class PogoSystem_ImportsAssignment_0 extends AssignmentToken  {
	
	public PogoSystem_ImportsAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPogoSystemAccess().getImportsAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("imports",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("imports");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getImportRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPogoSystemAccess().getImportsImportParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PogoSystem_ImportsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 1, consumed);
		}	
	}	
}

// classes+=PogoDeviceClass*
protected class PogoSystem_ClassesAssignment_1 extends AssignmentToken  {
	
	public PogoSystem_ClassesAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPogoSystemAccess().getClassesAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PogoDeviceClass_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("classes",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("classes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPogoDeviceClassRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPogoSystemAccess().getClassesPogoDeviceClassParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PogoSystem_ClassesAssignment_1(parent, next, actIndex, consumed);
			case 1: return new PogoSystem_ImportsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 2, consumed);
		}	
	}	
}

// multiClasses+=PogoMultiClasses*
protected class PogoSystem_MultiClassesAssignment_2 extends AssignmentToken  {
	
	public PogoSystem_MultiClassesAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPogoSystemAccess().getMultiClassesAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PogoMultiClasses_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("multiClasses",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("multiClasses");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPogoMultiClassesRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPogoSystemAccess().getMultiClassesPogoMultiClassesParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PogoSystem_MultiClassesAssignment_2(parent, next, actIndex, consumed);
			case 1: return new PogoSystem_ClassesAssignment_1(parent, next, actIndex, consumed);
			case 2: return new PogoSystem_ImportsAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 3, consumed);
		}	
	}	
}


/************ end Rule PogoSystem ****************/


/************ begin Rule Import ****************
 *
 * Import:
 *   "import" importURI=STRING; 
 * 
 * 
 * 	  
 * //==============================================
 * //	Multi Classes definition
 * //==============================================
 *
 **/

// "import" importURI=STRING
protected class Import_Group extends GroupToken {
	
	public Import_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getImportAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_ImportURIAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getImportRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "import"
protected class Import_ImportKeyword_0 extends KeywordToken  {
	
	public Import_ImportKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getImportAccess().getImportKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// importURI=STRING
protected class Import_ImportURIAssignment_1 extends AssignmentToken  {
	
	public Import_ImportURIAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getImportAccess().getImportURIAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Import_ImportKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("importURI",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("importURI");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Import ****************/


/************ begin Rule PogoMultiClasses ****************
 *
 * PogoMultiClasses:
 *   "multiclasses" name=ID "{" sourcePath=STRING description=STRING title=STRING
 *   "classes:" classes+=OneClassSimpleDef filestogenerate=STRING preferences=
 *   Preferences "}"; 
 * //==============================================
 * //	Multi Classes definition
 * //==============================================
 * 
 * 	  
 * 	
 * 		     
 * 		    
 * 		          
 * 		
 * 	    	
 * 	
 * 		    			 //	File(s) to generate (code, makefile,....)
 * 		         		 //	Preferences (for programer, for site or at run time)
 * 	 
 * 
 * 
 * //
 * //	One class simple definition
 * //
 *
 **/

// "multiclasses" name=ID "{" sourcePath=STRING description=STRING title=STRING
// "classes:" classes+=OneClassSimpleDef filestogenerate=STRING preferences=
// Preferences "}" 
// 	  
// 	
// 		     
// 		    
// 		          
// 		
// 	    	
// 	
// 		    			 //	File(s) to generate (code, makefile,....)
// 		         		 //	Preferences (for programer, for site or at run time)
protected class PogoMultiClasses_Group extends GroupToken {
	
	public PogoMultiClasses_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPogoMultiClassesAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PogoMultiClasses_RightCurlyBracketKeyword_10(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPogoMultiClassesRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "multiclasses"
protected class PogoMultiClasses_MulticlassesKeyword_0 extends KeywordToken  {
	
	public PogoMultiClasses_MulticlassesKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPogoMultiClassesAccess().getMulticlassesKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=ID
protected class PogoMultiClasses_NameAssignment_1 extends AssignmentToken  {
	
	public PogoMultiClasses_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPogoMultiClassesAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PogoMultiClasses_MulticlassesKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getPogoMultiClassesAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class PogoMultiClasses_LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public PogoMultiClasses_LeftCurlyBracketKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPogoMultiClassesAccess().getLeftCurlyBracketKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PogoMultiClasses_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// sourcePath=STRING
protected class PogoMultiClasses_SourcePathAssignment_3 extends AssignmentToken  {
	
	public PogoMultiClasses_SourcePathAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPogoMultiClassesAccess().getSourcePathAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PogoMultiClasses_LeftCurlyBracketKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("sourcePath",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("sourcePath");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getPogoMultiClassesAccess().getSourcePathSTRINGTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// description=STRING
protected class PogoMultiClasses_DescriptionAssignment_4 extends AssignmentToken  {
	
	public PogoMultiClasses_DescriptionAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPogoMultiClassesAccess().getDescriptionAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PogoMultiClasses_SourcePathAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getPogoMultiClassesAccess().getDescriptionSTRINGTerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// title=STRING
protected class PogoMultiClasses_TitleAssignment_5 extends AssignmentToken  {
	
	public PogoMultiClasses_TitleAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPogoMultiClassesAccess().getTitleAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PogoMultiClasses_DescriptionAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("title",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("title");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getPogoMultiClassesAccess().getTitleSTRINGTerminalRuleCall_5_0();
			return obj;
		}
		return null;
	}

}

// "classes:"
protected class PogoMultiClasses_ClassesKeyword_6 extends KeywordToken  {
	
	public PogoMultiClasses_ClassesKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPogoMultiClassesAccess().getClassesKeyword_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PogoMultiClasses_TitleAssignment_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// classes+=OneClassSimpleDef
protected class PogoMultiClasses_ClassesAssignment_7 extends AssignmentToken  {
	
	public PogoMultiClasses_ClassesAssignment_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPogoMultiClassesAccess().getClassesAssignment_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OneClassSimpleDef_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("classes",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("classes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOneClassSimpleDefRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPogoMultiClassesAccess().getClassesOneClassSimpleDefParserRuleCall_7_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PogoMultiClasses_ClassesKeyword_6(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// filestogenerate=STRING 
// 	
// 		    			 //	File(s) to generate (code, makefile,....)
protected class PogoMultiClasses_FilestogenerateAssignment_8 extends AssignmentToken  {
	
	public PogoMultiClasses_FilestogenerateAssignment_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPogoMultiClassesAccess().getFilestogenerateAssignment_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PogoMultiClasses_ClassesAssignment_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("filestogenerate",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("filestogenerate");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getPogoMultiClassesAccess().getFilestogenerateSTRINGTerminalRuleCall_8_0();
			return obj;
		}
		return null;
	}

}

// preferences=Preferences 			 //	File(s) to generate (code, makefile,....)
// 		         		 //	Preferences (for programer, for site or at run time)
protected class PogoMultiClasses_PreferencesAssignment_9 extends AssignmentToken  {
	
	public PogoMultiClasses_PreferencesAssignment_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPogoMultiClassesAccess().getPreferencesAssignment_9();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Preferences_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("preferences",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("preferences");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPreferencesRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPogoMultiClassesAccess().getPreferencesPreferencesParserRuleCall_9_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PogoMultiClasses_FilestogenerateAssignment_8(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}" 		 //	Preferences (for programer, for site or at run time)
protected class PogoMultiClasses_RightCurlyBracketKeyword_10 extends KeywordToken  {
	
	public PogoMultiClasses_RightCurlyBracketKeyword_10(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPogoMultiClassesAccess().getRightCurlyBracketKeyword_10();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PogoMultiClasses_PreferencesAssignment_9(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule PogoMultiClasses ****************/


/************ begin Rule OneClassSimpleDef ****************
 *
 * OneClassSimpleDef:
 *   classname=STRING sourcePath=STRING pogo6=Boolean "inheritances:" inheritances+=
 *   Inheritance "parentClasses:" parentClasses+=STRING "additionalFiles:"
 *   additionalFiles+=AdditionalFile*; 
 * 
 * //
 * //	One class simple definition
 * //
 * 
 * 	     
 * 	    
 * 	         
 * 	
 * 	   				 //	inheritance class definitions
 * 	 
 * 			 //	Used only by graphical display
 * 	 
 * 			 //	Programmer's additional files to be added in Makefile (utils, threads,...)
 * 
 * 
 * //==============================================
 * //	Class definition
 * //==============================================
 *
 **/

// classname=STRING sourcePath=STRING pogo6=Boolean "inheritances:" inheritances+=
// Inheritance "parentClasses:" parentClasses+=STRING "additionalFiles:"
// additionalFiles+=AdditionalFile* 
// 	     
// 	    
// 	         
// 	
// 	   				 //	inheritance class definitions
// 	 
// 			 //	Used only by graphical display
// 	 
// 			 //	Programmer's additional files to be added in Makefile (utils, threads,...)
protected class OneClassSimpleDef_Group extends GroupToken {
	
	public OneClassSimpleDef_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getOneClassSimpleDefAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OneClassSimpleDef_AdditionalFilesAssignment_8(parent, this, 0, inst);
			case 1: return new OneClassSimpleDef_AdditionalFilesKeyword_7(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getOneClassSimpleDefRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// classname=STRING
protected class OneClassSimpleDef_ClassnameAssignment_0 extends AssignmentToken  {
	
	public OneClassSimpleDef_ClassnameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOneClassSimpleDefAccess().getClassnameAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("classname",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("classname");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getOneClassSimpleDefAccess().getClassnameSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// sourcePath=STRING
protected class OneClassSimpleDef_SourcePathAssignment_1 extends AssignmentToken  {
	
	public OneClassSimpleDef_SourcePathAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOneClassSimpleDefAccess().getSourcePathAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OneClassSimpleDef_ClassnameAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("sourcePath",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("sourcePath");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getOneClassSimpleDefAccess().getSourcePathSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// pogo6=Boolean
protected class OneClassSimpleDef_Pogo6Assignment_2 extends AssignmentToken  {
	
	public OneClassSimpleDef_Pogo6Assignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOneClassSimpleDefAccess().getPogo6Assignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OneClassSimpleDef_SourcePathAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("pogo6",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("pogo6");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getOneClassSimpleDefAccess().getPogo6BooleanParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "inheritances:"
protected class OneClassSimpleDef_InheritancesKeyword_3 extends KeywordToken  {
	
	public OneClassSimpleDef_InheritancesKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getOneClassSimpleDefAccess().getInheritancesKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OneClassSimpleDef_Pogo6Assignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// inheritances+=Inheritance
protected class OneClassSimpleDef_InheritancesAssignment_4 extends AssignmentToken  {
	
	public OneClassSimpleDef_InheritancesAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOneClassSimpleDefAccess().getInheritancesAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Inheritance_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("inheritances",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("inheritances");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInheritanceRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getOneClassSimpleDefAccess().getInheritancesInheritanceParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OneClassSimpleDef_InheritancesKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "parentClasses:" 			 //	inheritance class definitions
protected class OneClassSimpleDef_ParentClassesKeyword_5 extends KeywordToken  {
	
	public OneClassSimpleDef_ParentClassesKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getOneClassSimpleDefAccess().getParentClassesKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OneClassSimpleDef_InheritancesAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// parentClasses+=STRING
protected class OneClassSimpleDef_ParentClassesAssignment_6 extends AssignmentToken  {
	
	public OneClassSimpleDef_ParentClassesAssignment_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOneClassSimpleDefAccess().getParentClassesAssignment_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OneClassSimpleDef_ParentClassesKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parentClasses",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parentClasses");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getOneClassSimpleDefAccess().getParentClassesSTRINGTerminalRuleCall_6_0();
			return obj;
		}
		return null;
	}

}

// "additionalFiles:" 	 //	Used only by graphical display
protected class OneClassSimpleDef_AdditionalFilesKeyword_7 extends KeywordToken  {
	
	public OneClassSimpleDef_AdditionalFilesKeyword_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getOneClassSimpleDefAccess().getAdditionalFilesKeyword_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OneClassSimpleDef_ParentClassesAssignment_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// additionalFiles+=AdditionalFile*
protected class OneClassSimpleDef_AdditionalFilesAssignment_8 extends AssignmentToken  {
	
	public OneClassSimpleDef_AdditionalFilesAssignment_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOneClassSimpleDefAccess().getAdditionalFilesAssignment_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdditionalFile_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("additionalFiles",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("additionalFiles");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAdditionalFileRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getOneClassSimpleDefAccess().getAdditionalFilesAdditionalFileParserRuleCall_8_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new OneClassSimpleDef_AdditionalFilesAssignment_8(parent, next, actIndex, consumed);
			case 1: return new OneClassSimpleDef_AdditionalFilesKeyword_7(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule OneClassSimpleDef ****************/


/************ begin Rule PogoDeviceClass ****************
 *
 * PogoDeviceClass:
 *   "deviceclass" name=ID isAbstract?="abstract"? ("extends" baseClass=[PogoDeviceClass]
 *   )? "{" institute=ID "description:" description=ClassDescription "classProperties:"
 *   classProperties+=Property* "deviceProperties:" deviceProperties+=Property*
 *   "commands:" commands+=Command* "attributes:" attributes+=Attribute* "states:" states
 *   +=State* preferences=Preferences "additionalFiles:" additionalFiles+=AdditionalFile
 *   * "}"; 
 * 
 * //==============================================
 * //	Class definition
 * //==============================================
 * 
 * 	        
 * 	
 * 		    							 //	For future specific features 
 * 
 * 									 //	Class information
 * 			 
 * 
 * 								 //	Class property list
 * 			 
 * 
 * 								 //	Device Property list
 * 			 
 * 
 * 										 //	Device command list
 * 			 
 * 
 * 									 //	Device attribute list
 * 			 
 * 
 * 										 //	Device state list
 * 			 
 * 		
 * 		    				 //	Preferences (for programer, for site or at run time)
 * 
 * 		
 * 				 //	Programmer's additional files to be added in Makefile (utils, threads,...)
 * 	 
 * 
 * //
 * //	Miscellaneous definitions
 * //
 *
 **/

// "deviceclass" name=ID isAbstract?="abstract"? ("extends" baseClass=[PogoDeviceClass]
// )? "{" institute=ID "description:" description=ClassDescription "classProperties:"
// classProperties+=Property* "deviceProperties:" deviceProperties+=Property*
// "commands:" commands+=Command* "attributes:" attributes+=Attribute* "states:" states
// +=State* preferences=Preferences "additionalFiles:" additionalFiles+=AdditionalFile
// * "}" 
// 	        
// 	
// 		    							 //	For future specific features 
// 
// 									 //	Class information
// 			 
// 
// 								 //	Class property list
// 			 
// 
// 								 //	Device Property list
// 			 
// 
// 										 //	Device command list
// 			 
// 
// 									 //	Device attribute list
// 			 
// 
// 										 //	Device state list
// 			 
// 		
// 		    				 //	Preferences (for programer, for site or at run time)
// 
// 		
// 				 //	Programmer's additional files to be added in Makefile (utils, threads,...)
protected class PogoDeviceClass_Group extends GroupToken {
	
	public PogoDeviceClass_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPogoDeviceClassAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PogoDeviceClass_RightCurlyBracketKeyword_21(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPogoDeviceClassRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "deviceclass"
protected class PogoDeviceClass_DeviceclassKeyword_0 extends KeywordToken  {
	
	public PogoDeviceClass_DeviceclassKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPogoDeviceClassAccess().getDeviceclassKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=ID
protected class PogoDeviceClass_NameAssignment_1 extends AssignmentToken  {
	
	public PogoDeviceClass_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPogoDeviceClassAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PogoDeviceClass_DeviceclassKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getPogoDeviceClassAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// isAbstract?="abstract"?
protected class PogoDeviceClass_IsAbstractAssignment_2 extends AssignmentToken  {
	
	public PogoDeviceClass_IsAbstractAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPogoDeviceClassAccess().getIsAbstractAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PogoDeviceClass_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isAbstract",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isAbstract");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getPogoDeviceClassAccess().getIsAbstractAbstractKeyword_2_0();
			return obj;
		}
		return null;
	}

}

// ("extends" baseClass=[PogoDeviceClass])?
protected class PogoDeviceClass_Group_3 extends GroupToken {
	
	public PogoDeviceClass_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPogoDeviceClassAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PogoDeviceClass_BaseClassAssignment_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "extends"
protected class PogoDeviceClass_ExtendsKeyword_3_0 extends KeywordToken  {
	
	public PogoDeviceClass_ExtendsKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPogoDeviceClassAccess().getExtendsKeyword_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PogoDeviceClass_IsAbstractAssignment_2(parent, this, 0, inst);
			case 1: return new PogoDeviceClass_NameAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// baseClass=[PogoDeviceClass]
protected class PogoDeviceClass_BaseClassAssignment_3_1 extends AssignmentToken  {
	
	public PogoDeviceClass_BaseClassAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPogoDeviceClassAccess().getBaseClassAssignment_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PogoDeviceClass_ExtendsKeyword_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("baseClass",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("baseClass");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPogoDeviceClassAccess().getBaseClassPogoDeviceClassCrossReference_3_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getPogoDeviceClassAccess().getBaseClassPogoDeviceClassCrossReference_3_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// "{"
protected class PogoDeviceClass_LeftCurlyBracketKeyword_4 extends KeywordToken  {
	
	public PogoDeviceClass_LeftCurlyBracketKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPogoDeviceClassAccess().getLeftCurlyBracketKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PogoDeviceClass_Group_3(parent, this, 0, inst);
			case 1: return new PogoDeviceClass_IsAbstractAssignment_2(parent, this, 1, inst);
			case 2: return new PogoDeviceClass_NameAssignment_1(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// institute=ID 
// 		    							 //	For future specific features
protected class PogoDeviceClass_InstituteAssignment_5 extends AssignmentToken  {
	
	public PogoDeviceClass_InstituteAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPogoDeviceClassAccess().getInstituteAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PogoDeviceClass_LeftCurlyBracketKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("institute",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("institute");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getPogoDeviceClassAccess().getInstituteIDTerminalRuleCall_5_0();
			return obj;
		}
		return null;
	}

}

// "description:" 							 //	For future specific features 
// 
// 									 //	Class information
protected class PogoDeviceClass_DescriptionKeyword_6 extends KeywordToken  {
	
	public PogoDeviceClass_DescriptionKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPogoDeviceClassAccess().getDescriptionKeyword_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PogoDeviceClass_InstituteAssignment_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// description=ClassDescription
protected class PogoDeviceClass_DescriptionAssignment_7 extends AssignmentToken  {
	
	public PogoDeviceClass_DescriptionAssignment_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPogoDeviceClassAccess().getDescriptionAssignment_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassDescription_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getClassDescriptionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPogoDeviceClassAccess().getDescriptionClassDescriptionParserRuleCall_7_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PogoDeviceClass_DescriptionKeyword_6(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "classProperties:" 
// 
// 								 //	Class property list
protected class PogoDeviceClass_ClassPropertiesKeyword_8 extends KeywordToken  {
	
	public PogoDeviceClass_ClassPropertiesKeyword_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPogoDeviceClassAccess().getClassPropertiesKeyword_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PogoDeviceClass_DescriptionAssignment_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// classProperties+=Property*
protected class PogoDeviceClass_ClassPropertiesAssignment_9 extends AssignmentToken  {
	
	public PogoDeviceClass_ClassPropertiesAssignment_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPogoDeviceClassAccess().getClassPropertiesAssignment_9();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Property_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("classProperties",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("classProperties");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertyRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPogoDeviceClassAccess().getClassPropertiesPropertyParserRuleCall_9_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PogoDeviceClass_ClassPropertiesAssignment_9(parent, next, actIndex, consumed);
			case 1: return new PogoDeviceClass_ClassPropertiesKeyword_8(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "deviceProperties:" 
// 
// 								 //	Device Property list
protected class PogoDeviceClass_DevicePropertiesKeyword_10 extends KeywordToken  {
	
	public PogoDeviceClass_DevicePropertiesKeyword_10(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPogoDeviceClassAccess().getDevicePropertiesKeyword_10();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PogoDeviceClass_ClassPropertiesAssignment_9(parent, this, 0, inst);
			case 1: return new PogoDeviceClass_ClassPropertiesKeyword_8(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// deviceProperties+=Property*
protected class PogoDeviceClass_DevicePropertiesAssignment_11 extends AssignmentToken  {
	
	public PogoDeviceClass_DevicePropertiesAssignment_11(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPogoDeviceClassAccess().getDevicePropertiesAssignment_11();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Property_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("deviceProperties",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("deviceProperties");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertyRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPogoDeviceClassAccess().getDevicePropertiesPropertyParserRuleCall_11_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PogoDeviceClass_DevicePropertiesAssignment_11(parent, next, actIndex, consumed);
			case 1: return new PogoDeviceClass_DevicePropertiesKeyword_10(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "commands:" 
// 
// 										 //	Device command list
protected class PogoDeviceClass_CommandsKeyword_12 extends KeywordToken  {
	
	public PogoDeviceClass_CommandsKeyword_12(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPogoDeviceClassAccess().getCommandsKeyword_12();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PogoDeviceClass_DevicePropertiesAssignment_11(parent, this, 0, inst);
			case 1: return new PogoDeviceClass_DevicePropertiesKeyword_10(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// commands+=Command*
protected class PogoDeviceClass_CommandsAssignment_13 extends AssignmentToken  {
	
	public PogoDeviceClass_CommandsAssignment_13(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPogoDeviceClassAccess().getCommandsAssignment_13();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Command_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("commands",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("commands");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCommandRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPogoDeviceClassAccess().getCommandsCommandParserRuleCall_13_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PogoDeviceClass_CommandsAssignment_13(parent, next, actIndex, consumed);
			case 1: return new PogoDeviceClass_CommandsKeyword_12(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "attributes:" 
// 
// 									 //	Device attribute list
protected class PogoDeviceClass_AttributesKeyword_14 extends KeywordToken  {
	
	public PogoDeviceClass_AttributesKeyword_14(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPogoDeviceClassAccess().getAttributesKeyword_14();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PogoDeviceClass_CommandsAssignment_13(parent, this, 0, inst);
			case 1: return new PogoDeviceClass_CommandsKeyword_12(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// attributes+=Attribute*
protected class PogoDeviceClass_AttributesAssignment_15 extends AssignmentToken  {
	
	public PogoDeviceClass_AttributesAssignment_15(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPogoDeviceClassAccess().getAttributesAssignment_15();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Attribute_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("attributes",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("attributes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAttributeRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPogoDeviceClassAccess().getAttributesAttributeParserRuleCall_15_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PogoDeviceClass_AttributesAssignment_15(parent, next, actIndex, consumed);
			case 1: return new PogoDeviceClass_AttributesKeyword_14(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "states:" 
// 
// 										 //	Device state list
protected class PogoDeviceClass_StatesKeyword_16 extends KeywordToken  {
	
	public PogoDeviceClass_StatesKeyword_16(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPogoDeviceClassAccess().getStatesKeyword_16();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PogoDeviceClass_AttributesAssignment_15(parent, this, 0, inst);
			case 1: return new PogoDeviceClass_AttributesKeyword_14(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// states+=State*
protected class PogoDeviceClass_StatesAssignment_17 extends AssignmentToken  {
	
	public PogoDeviceClass_StatesAssignment_17(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPogoDeviceClassAccess().getStatesAssignment_17();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("states",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("states");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStateRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPogoDeviceClassAccess().getStatesStateParserRuleCall_17_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PogoDeviceClass_StatesAssignment_17(parent, next, actIndex, consumed);
			case 1: return new PogoDeviceClass_StatesKeyword_16(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// preferences=Preferences 
// 		
// 		    				 //	Preferences (for programer, for site or at run time)
protected class PogoDeviceClass_PreferencesAssignment_18 extends AssignmentToken  {
	
	public PogoDeviceClass_PreferencesAssignment_18(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPogoDeviceClassAccess().getPreferencesAssignment_18();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Preferences_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("preferences",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("preferences");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPreferencesRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPogoDeviceClassAccess().getPreferencesPreferencesParserRuleCall_18_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PogoDeviceClass_StatesAssignment_17(parent, next, actIndex, consumed);
			case 1: return new PogoDeviceClass_StatesKeyword_16(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "additionalFiles:" 				 //	Preferences (for programer, for site or at run time)
protected class PogoDeviceClass_AdditionalFilesKeyword_19 extends KeywordToken  {
	
	public PogoDeviceClass_AdditionalFilesKeyword_19(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPogoDeviceClassAccess().getAdditionalFilesKeyword_19();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PogoDeviceClass_PreferencesAssignment_18(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// additionalFiles+=AdditionalFile*
protected class PogoDeviceClass_AdditionalFilesAssignment_20 extends AssignmentToken  {
	
	public PogoDeviceClass_AdditionalFilesAssignment_20(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPogoDeviceClassAccess().getAdditionalFilesAssignment_20();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdditionalFile_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("additionalFiles",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("additionalFiles");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAdditionalFileRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPogoDeviceClassAccess().getAdditionalFilesAdditionalFileParserRuleCall_20_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PogoDeviceClass_AdditionalFilesAssignment_20(parent, next, actIndex, consumed);
			case 1: return new PogoDeviceClass_AdditionalFilesKeyword_19(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}" 	 //	Programmer's additional files to be added in Makefile (utils, threads,...)
protected class PogoDeviceClass_RightCurlyBracketKeyword_21 extends KeywordToken  {
	
	public PogoDeviceClass_RightCurlyBracketKeyword_21(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPogoDeviceClassAccess().getRightCurlyBracketKeyword_21();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PogoDeviceClass_AdditionalFilesAssignment_20(parent, this, 0, inst);
			case 1: return new PogoDeviceClass_AdditionalFilesKeyword_19(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule PogoDeviceClass ****************/







/************ begin Rule ClassDescription ****************
 *
 * ClassDescription:
 *   description=STRING title=STRING sourcePath=STRING "inheritances:" inheritances+=
 *   Inheritance language=Language filestogenerate=STRING identification=
 *   ClassIdentification comments=Comments hasMandatoryProperty=Boolean
 *   hasAbstractCommand=Boolean hasAbstractAttribute=Boolean hasDynamicAttribute=
 *   Boolean descriptionHtmlExists=Boolean; 
 * 
 * 
 * //
 * //	Class information
 * //
 * 
 * 	       	 //	Class description
 * 	              	 //	Short description
 * 	         	 //	Files location
 * 	 
 * 	    	 //	inheritance class definitions
 * 	           		 //	Language to generate
 * 	   			 //	File(s) to generate (code, makefile,....)
 * 	     
 * 	          
 * 	     
 * 	       
 * 	     
 * 	      
 * 	    	 //	File from pogo-6
 * 
 * 	
 * //
 * //	Inheritance Definition
 * //
 *
 **/

// description=STRING title=STRING sourcePath=STRING "inheritances:" inheritances+=
// Inheritance language=Language filestogenerate=STRING identification=
// ClassIdentification comments=Comments hasMandatoryProperty=Boolean
// hasAbstractCommand=Boolean hasAbstractAttribute=Boolean hasDynamicAttribute=
// Boolean descriptionHtmlExists=Boolean 
// 	       	 //	Class description
// 	              	 //	Short description
// 	         	 //	Files location
// 	 
// 	    	 //	inheritance class definitions
// 	           		 //	Language to generate
// 	   			 //	File(s) to generate (code, makefile,....)
// 	     
// 	          
// 	     
// 	       
// 	     
// 	      
// 	    	 //	File from pogo-6
protected class ClassDescription_Group extends GroupToken {
	
	public ClassDescription_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getClassDescriptionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassDescription_DescriptionHtmlExistsAssignment_13(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getClassDescriptionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING 
// 	       	 //	Class description
protected class ClassDescription_DescriptionAssignment_0 extends AssignmentToken  {
	
	public ClassDescription_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClassDescriptionAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getClassDescriptionAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// title=STRING 	 //	Class description
// 	              	 //	Short description
protected class ClassDescription_TitleAssignment_1 extends AssignmentToken  {
	
	public ClassDescription_TitleAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClassDescriptionAccess().getTitleAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassDescription_DescriptionAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("title",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("title");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getClassDescriptionAccess().getTitleSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// sourcePath=STRING 	 //	Short description
// 	         	 //	Files location
protected class ClassDescription_SourcePathAssignment_2 extends AssignmentToken  {
	
	public ClassDescription_SourcePathAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClassDescriptionAccess().getSourcePathAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassDescription_TitleAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("sourcePath",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("sourcePath");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getClassDescriptionAccess().getSourcePathSTRINGTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "inheritances:" 	 //	Files location
protected class ClassDescription_InheritancesKeyword_3 extends KeywordToken  {
	
	public ClassDescription_InheritancesKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getClassDescriptionAccess().getInheritancesKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassDescription_SourcePathAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// inheritances+=Inheritance
protected class ClassDescription_InheritancesAssignment_4 extends AssignmentToken  {
	
	public ClassDescription_InheritancesAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClassDescriptionAccess().getInheritancesAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Inheritance_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("inheritances",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("inheritances");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInheritanceRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getClassDescriptionAccess().getInheritancesInheritanceParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ClassDescription_InheritancesKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// language=Language 	 //	inheritance class definitions
// 	           		 //	Language to generate
protected class ClassDescription_LanguageAssignment_5 extends AssignmentToken  {
	
	public ClassDescription_LanguageAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClassDescriptionAccess().getLanguageAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassDescription_InheritancesAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("language",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("language");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getClassDescriptionAccess().getLanguageLanguageParserRuleCall_5_0();
			return obj;
		}
		return null;
	}

}

// filestogenerate=STRING 		 //	Language to generate
// 	   			 //	File(s) to generate (code, makefile,....)
protected class ClassDescription_FilestogenerateAssignment_6 extends AssignmentToken  {
	
	public ClassDescription_FilestogenerateAssignment_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClassDescriptionAccess().getFilestogenerateAssignment_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassDescription_LanguageAssignment_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("filestogenerate",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("filestogenerate");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getClassDescriptionAccess().getFilestogenerateSTRINGTerminalRuleCall_6_0();
			return obj;
		}
		return null;
	}

}

// identification=ClassIdentification 			 //	File(s) to generate (code, makefile,....)
protected class ClassDescription_IdentificationAssignment_7 extends AssignmentToken  {
	
	public ClassDescription_IdentificationAssignment_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClassDescriptionAccess().getIdentificationAssignment_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassIdentification_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("identification",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("identification");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getClassIdentificationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getClassDescriptionAccess().getIdentificationClassIdentificationParserRuleCall_7_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ClassDescription_FilestogenerateAssignment_6(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// comments=Comments
protected class ClassDescription_CommentsAssignment_8 extends AssignmentToken  {
	
	public ClassDescription_CommentsAssignment_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClassDescriptionAccess().getCommentsAssignment_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Comments_CommandsTableAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("comments",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("comments");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCommentsRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getClassDescriptionAccess().getCommentsCommentsParserRuleCall_8_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ClassDescription_IdentificationAssignment_7(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// hasMandatoryProperty=Boolean
protected class ClassDescription_HasMandatoryPropertyAssignment_9 extends AssignmentToken  {
	
	public ClassDescription_HasMandatoryPropertyAssignment_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClassDescriptionAccess().getHasMandatoryPropertyAssignment_9();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassDescription_CommentsAssignment_8(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("hasMandatoryProperty",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("hasMandatoryProperty");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getClassDescriptionAccess().getHasMandatoryPropertyBooleanParserRuleCall_9_0();
			return obj;
		}
		return null;
	}

}

// hasAbstractCommand=Boolean
protected class ClassDescription_HasAbstractCommandAssignment_10 extends AssignmentToken  {
	
	public ClassDescription_HasAbstractCommandAssignment_10(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClassDescriptionAccess().getHasAbstractCommandAssignment_10();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassDescription_HasMandatoryPropertyAssignment_9(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("hasAbstractCommand",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("hasAbstractCommand");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getClassDescriptionAccess().getHasAbstractCommandBooleanParserRuleCall_10_0();
			return obj;
		}
		return null;
	}

}

// hasAbstractAttribute=Boolean
protected class ClassDescription_HasAbstractAttributeAssignment_11 extends AssignmentToken  {
	
	public ClassDescription_HasAbstractAttributeAssignment_11(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClassDescriptionAccess().getHasAbstractAttributeAssignment_11();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassDescription_HasAbstractCommandAssignment_10(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("hasAbstractAttribute",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("hasAbstractAttribute");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getClassDescriptionAccess().getHasAbstractAttributeBooleanParserRuleCall_11_0();
			return obj;
		}
		return null;
	}

}

// hasDynamicAttribute=Boolean
protected class ClassDescription_HasDynamicAttributeAssignment_12 extends AssignmentToken  {
	
	public ClassDescription_HasDynamicAttributeAssignment_12(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClassDescriptionAccess().getHasDynamicAttributeAssignment_12();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassDescription_HasAbstractAttributeAssignment_11(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("hasDynamicAttribute",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("hasDynamicAttribute");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getClassDescriptionAccess().getHasDynamicAttributeBooleanParserRuleCall_12_0();
			return obj;
		}
		return null;
	}

}

// descriptionHtmlExists=Boolean 
// 	    	 //	File from pogo-6
protected class ClassDescription_DescriptionHtmlExistsAssignment_13 extends AssignmentToken  {
	
	public ClassDescription_DescriptionHtmlExistsAssignment_13(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClassDescriptionAccess().getDescriptionHtmlExistsAssignment_13();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassDescription_HasDynamicAttributeAssignment_12(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("descriptionHtmlExists",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("descriptionHtmlExists");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getClassDescriptionAccess().getDescriptionHtmlExistsBooleanParserRuleCall_13_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule ClassDescription ****************/


/************ begin Rule Inheritance ****************
 *
 * Inheritance:
 *   classname=STRING sourcePath=STRING; 
 * 	
 * //
 * //	Inheritance Definition
 * //
 * 
 * 	     
 * 	    
 * 
 * 
 * //
 * //	Class identification
 * //
 *
 **/

// classname=STRING sourcePath=STRING
protected class Inheritance_Group extends GroupToken {
	
	public Inheritance_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getInheritanceAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Inheritance_SourcePathAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getInheritanceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// classname=STRING
protected class Inheritance_ClassnameAssignment_0 extends AssignmentToken  {
	
	public Inheritance_ClassnameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInheritanceAccess().getClassnameAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("classname",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("classname");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getInheritanceAccess().getClassnameSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// sourcePath=STRING
protected class Inheritance_SourcePathAssignment_1 extends AssignmentToken  {
	
	public Inheritance_SourcePathAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInheritanceAccess().getSourcePathAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Inheritance_ClassnameAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("sourcePath",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("sourcePath");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getInheritanceAccess().getSourcePathSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Inheritance ****************/


/************ begin Rule ClassIdentification ****************
 *
 * ClassIdentification:
 *   contact=STRING author=STRING emailDomain=STRING classFamily=STRING siteSpecific=
 *   STRING platform=STRING bus=STRING manufacturer=STRING reference=STRING; 
 * 
 * 
 * //
 * //	Class identification
 * //
 * 
 * 	         	 //	email address of the person in charge
 * 	           	 //	get from contact
 * 	      	 //	get from contact
 * 
 * 	     	 //	class family to be sorted in html doc
 * 	     	 //	If specific for an institute, name of this institute
 * 	         	 //	OS where it can run
 * 	              	 //	Hardware bus to control.
 * 	     	 //	mannufacturer if any
 * 	        	 //	product reference if any 
 * 
 * //
 * //	Comments Definition (code generated by java Pogo and not by xtext/xpand)
 * //
 *
 **/

// contact=STRING author=STRING emailDomain=STRING classFamily=STRING siteSpecific=
// STRING platform=STRING bus=STRING manufacturer=STRING reference=STRING 
// 	         	 //	email address of the person in charge
// 	           	 //	get from contact
// 	      	 //	get from contact
// 
// 	     	 //	class family to be sorted in html doc
// 	     	 //	If specific for an institute, name of this institute
// 	         	 //	OS where it can run
// 	              	 //	Hardware bus to control.
// 	     	 //	mannufacturer if any
protected class ClassIdentification_Group extends GroupToken {
	
	public ClassIdentification_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getClassIdentificationAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassIdentification_ReferenceAssignment_8(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getClassIdentificationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// contact=STRING 
// 	         	 //	email address of the person in charge
protected class ClassIdentification_ContactAssignment_0 extends AssignmentToken  {
	
	public ClassIdentification_ContactAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClassIdentificationAccess().getContactAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("contact",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("contact");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getClassIdentificationAccess().getContactSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// author=STRING 	 //	email address of the person in charge
// 	           	 //	get from contact
protected class ClassIdentification_AuthorAssignment_1 extends AssignmentToken  {
	
	public ClassIdentification_AuthorAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClassIdentificationAccess().getAuthorAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassIdentification_ContactAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("author",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("author");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getClassIdentificationAccess().getAuthorSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// emailDomain=STRING 	 //	get from contact
// 	      	 //	get from contact
protected class ClassIdentification_EmailDomainAssignment_2 extends AssignmentToken  {
	
	public ClassIdentification_EmailDomainAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClassIdentificationAccess().getEmailDomainAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassIdentification_AuthorAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("emailDomain",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("emailDomain");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getClassIdentificationAccess().getEmailDomainSTRINGTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// classFamily=STRING 	 //	get from contact
// 
// 	     	 //	class family to be sorted in html doc
protected class ClassIdentification_ClassFamilyAssignment_3 extends AssignmentToken  {
	
	public ClassIdentification_ClassFamilyAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClassIdentificationAccess().getClassFamilyAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassIdentification_EmailDomainAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("classFamily",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("classFamily");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getClassIdentificationAccess().getClassFamilySTRINGTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// siteSpecific=STRING 	 //	class family to be sorted in html doc
// 	     	 //	If specific for an institute, name of this institute
protected class ClassIdentification_SiteSpecificAssignment_4 extends AssignmentToken  {
	
	public ClassIdentification_SiteSpecificAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClassIdentificationAccess().getSiteSpecificAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassIdentification_ClassFamilyAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("siteSpecific",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("siteSpecific");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getClassIdentificationAccess().getSiteSpecificSTRINGTerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// platform=STRING 	 //	If specific for an institute, name of this institute
// 	         	 //	OS where it can run
protected class ClassIdentification_PlatformAssignment_5 extends AssignmentToken  {
	
	public ClassIdentification_PlatformAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClassIdentificationAccess().getPlatformAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassIdentification_SiteSpecificAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("platform",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("platform");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getClassIdentificationAccess().getPlatformSTRINGTerminalRuleCall_5_0();
			return obj;
		}
		return null;
	}

}

// bus=STRING 	 //	OS where it can run
// 	              	 //	Hardware bus to control.
protected class ClassIdentification_BusAssignment_6 extends AssignmentToken  {
	
	public ClassIdentification_BusAssignment_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClassIdentificationAccess().getBusAssignment_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassIdentification_PlatformAssignment_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("bus",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("bus");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getClassIdentificationAccess().getBusSTRINGTerminalRuleCall_6_0();
			return obj;
		}
		return null;
	}

}

// manufacturer=STRING 	 //	Hardware bus to control.
// 	     	 //	mannufacturer if any
protected class ClassIdentification_ManufacturerAssignment_7 extends AssignmentToken  {
	
	public ClassIdentification_ManufacturerAssignment_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClassIdentificationAccess().getManufacturerAssignment_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassIdentification_BusAssignment_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("manufacturer",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("manufacturer");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getClassIdentificationAccess().getManufacturerSTRINGTerminalRuleCall_7_0();
			return obj;
		}
		return null;
	}

}

// reference=STRING 	 //	mannufacturer if any
protected class ClassIdentification_ReferenceAssignment_8 extends AssignmentToken  {
	
	public ClassIdentification_ReferenceAssignment_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClassIdentificationAccess().getReferenceAssignment_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ClassIdentification_ManufacturerAssignment_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("reference",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("reference");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getClassIdentificationAccess().getReferenceSTRINGTerminalRuleCall_8_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule ClassIdentification ****************/


/************ begin Rule Comments ****************
 *
 * Comments:
 *   commandsTable=STRING; 	 //	product reference if any 
 * 
 * //
 * //	Comments Definition (code generated by java Pogo and not by xtext/xpand)
 * //
 * 
 * 	      
 * 
 * //
 * //	Preferences (for programer or for site)
 * //
 *
 **/

// commandsTable=STRING
protected class Comments_CommandsTableAssignment extends AssignmentToken  {
	
	public Comments_CommandsTableAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCommentsAccess().getCommandsTableAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCommentsRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("commandsTable",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("commandsTable");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getCommentsAccess().getCommandsTableSTRINGTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule Comments ****************/


/************ begin Rule Preferences ****************
 *
 * Preferences:
 *   docHome=STRING makefileHome=STRING installHome=STRING htmlVersion=Boolean; 
 * 
 * //
 * //	Preferences (for programer or for site)
 * //
 * 
 * 	           
 * 	      
 * 	       
 * 	       	 //	Used by web automat to manage tag version
 * 
 * //
 * //	State Definition
 * //
 *
 **/

// docHome=STRING makefileHome=STRING installHome=STRING htmlVersion=Boolean
protected class Preferences_Group extends GroupToken {
	
	public Preferences_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPreferencesAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Preferences_HtmlVersionAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPreferencesRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// docHome=STRING
protected class Preferences_DocHomeAssignment_0 extends AssignmentToken  {
	
	public Preferences_DocHomeAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPreferencesAccess().getDocHomeAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("docHome",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("docHome");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getPreferencesAccess().getDocHomeSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// makefileHome=STRING
protected class Preferences_MakefileHomeAssignment_1 extends AssignmentToken  {
	
	public Preferences_MakefileHomeAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPreferencesAccess().getMakefileHomeAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Preferences_DocHomeAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("makefileHome",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("makefileHome");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getPreferencesAccess().getMakefileHomeSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// installHome=STRING
protected class Preferences_InstallHomeAssignment_2 extends AssignmentToken  {
	
	public Preferences_InstallHomeAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPreferencesAccess().getInstallHomeAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Preferences_MakefileHomeAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("installHome",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("installHome");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getPreferencesAccess().getInstallHomeSTRINGTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// htmlVersion=Boolean
protected class Preferences_HtmlVersionAssignment_3 extends AssignmentToken  {
	
	public Preferences_HtmlVersionAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPreferencesAccess().getHtmlVersionAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Preferences_InstallHomeAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("htmlVersion",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("htmlVersion");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getPreferencesAccess().getHtmlVersionBooleanParserRuleCall_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Preferences ****************/


/************ begin Rule State ****************
 *
 * State:
 *   name=ID description=STRING status=InheritanceStatus; 	 //	Used by web automat to manage tag version
 * 
 * //
 * //	State Definition
 * //
 * 
 * 	           
 * 	    
 * 	         
 * 
 * //
 * //	Property Definition
 * //
 *
 **/

// name=ID description=STRING status=InheritanceStatus
protected class State_Group extends GroupToken {
	
	public State_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_StatusAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getStateRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=ID
protected class State_NameAssignment_0 extends AssignmentToken  {
	
	public State_NameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getNameAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getStateAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// description=STRING
protected class State_DescriptionAssignment_1 extends AssignmentToken  {
	
	public State_DescriptionAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getDescriptionAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_NameAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getStateAccess().getDescriptionSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// status=InheritanceStatus
protected class State_StatusAssignment_2 extends AssignmentToken  {
	
	public State_StatusAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getStatusAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InheritanceStatus_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("status",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("status");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInheritanceStatusRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getStateAccess().getStatusInheritanceStatusParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new State_DescriptionAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule State ****************/


/************ begin Rule Property ****************
 *
 * Property:
 *   name=ID type=PropType status=InheritanceStatus mandatory=Boolean description=STRING
 *   "defaultPropValue:" DefaultPropValue+=STRING*; 
 * 
 * //
 * //	Property Definition
 * //
 * 
 * 	           
 * 	           
 * 	         
 * 	      
 * 	    
 * 	
 * 		
 * 
 * //	types could be one of the types
 *
 **/

// name=ID type=PropType status=InheritanceStatus mandatory=Boolean description=STRING
// "defaultPropValue:" DefaultPropValue+=STRING*
protected class Property_Group extends GroupToken {
	
	public Property_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPropertyAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Property_DefaultPropValueAssignment_6(parent, this, 0, inst);
			case 1: return new Property_DefaultPropValueKeyword_5(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPropertyRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=ID
protected class Property_NameAssignment_0 extends AssignmentToken  {
	
	public Property_NameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertyAccess().getNameAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getPropertyAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// type=PropType
protected class Property_TypeAssignment_1 extends AssignmentToken  {
	
	public Property_TypeAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertyAccess().getTypeAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropType_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropTypeRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPropertyAccess().getTypePropTypeParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Property_NameAssignment_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// status=InheritanceStatus
protected class Property_StatusAssignment_2 extends AssignmentToken  {
	
	public Property_StatusAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertyAccess().getStatusAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InheritanceStatus_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("status",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("status");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInheritanceStatusRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getPropertyAccess().getStatusInheritanceStatusParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Property_TypeAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// mandatory=Boolean
protected class Property_MandatoryAssignment_3 extends AssignmentToken  {
	
	public Property_MandatoryAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertyAccess().getMandatoryAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Property_StatusAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("mandatory",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("mandatory");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getPropertyAccess().getMandatoryBooleanParserRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// description=STRING
protected class Property_DescriptionAssignment_4 extends AssignmentToken  {
	
	public Property_DescriptionAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertyAccess().getDescriptionAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Property_MandatoryAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getPropertyAccess().getDescriptionSTRINGTerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// "defaultPropValue:"
protected class Property_DefaultPropValueKeyword_5 extends KeywordToken  {
	
	public Property_DefaultPropValueKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPropertyAccess().getDefaultPropValueKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Property_DescriptionAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// DefaultPropValue+=STRING*
protected class Property_DefaultPropValueAssignment_6 extends AssignmentToken  {
	
	public Property_DefaultPropValueAssignment_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertyAccess().getDefaultPropValueAssignment_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Property_DefaultPropValueAssignment_6(parent, this, 0, inst);
			case 1: return new Property_DefaultPropValueKeyword_5(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("DefaultPropValue",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("DefaultPropValue");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getPropertyAccess().getDefaultPropValueSTRINGTerminalRuleCall_6_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Property ****************/


/************ begin Rule PropType ****************
 *
 * PropType:
 *   SimpleType|VectorType; 
 * 
 * //	types could be one of the types
 *
 **/

// SimpleType|VectorType 
// 
// //	types could be one of the types
protected class PropType_Alternatives extends AlternativesToken {

	public PropType_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getPropTypeAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new PropType_SimpleTypeParserRuleCall_0(parent, this, 0, inst);
			case 1: return new PropType_VectorTypeParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPropTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// SimpleType
protected class PropType_SimpleTypeParserRuleCall_0 extends RuleCallToken {
	
	public PropType_SimpleTypeParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPropTypeAccess().getSimpleTypeParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleType_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(SimpleType_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getSimpleTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// VectorType
protected class PropType_VectorTypeParserRuleCall_1 extends RuleCallToken {
	
	public PropType_VectorTypeParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPropTypeAccess().getVectorTypeParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VectorType_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(VectorType_Alternatives.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getVectorTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule PropType ****************/


/************ begin Rule SimpleType ****************
 *
 * SimpleType:
 *   BooleanType|ShortType|UShortType|IntType|UIntType|FloatType|DoubleType|
 *   StringType;
 *
 **/

// BooleanType|ShortType|UShortType|IntType|UIntType|FloatType|DoubleType|
// StringType
protected class SimpleType_Alternatives extends AlternativesToken {

	public SimpleType_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getSimpleTypeAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleType_BooleanTypeParserRuleCall_0(parent, this, 0, inst);
			case 1: return new SimpleType_ShortTypeParserRuleCall_1(parent, this, 1, inst);
			case 2: return new SimpleType_UShortTypeParserRuleCall_2(parent, this, 2, inst);
			case 3: return new SimpleType_IntTypeParserRuleCall_3(parent, this, 3, inst);
			case 4: return new SimpleType_UIntTypeParserRuleCall_4(parent, this, 4, inst);
			case 5: return new SimpleType_FloatTypeParserRuleCall_5(parent, this, 5, inst);
			case 6: return new SimpleType_DoubleTypeParserRuleCall_6(parent, this, 6, inst);
			case 7: return new SimpleType_StringTypeParserRuleCall_7(parent, this, 7, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSimpleTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// BooleanType
protected class SimpleType_BooleanTypeParserRuleCall_0 extends RuleCallToken {
	
	public SimpleType_BooleanTypeParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getSimpleTypeAccess().getBooleanTypeParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BooleanType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(BooleanType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getBooleanTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ShortType
protected class SimpleType_ShortTypeParserRuleCall_1 extends RuleCallToken {
	
	public SimpleType_ShortTypeParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getSimpleTypeAccess().getShortTypeParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ShortType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ShortType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getShortTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// UShortType
protected class SimpleType_UShortTypeParserRuleCall_2 extends RuleCallToken {
	
	public SimpleType_UShortTypeParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getSimpleTypeAccess().getUShortTypeParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UShortType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(UShortType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getUShortTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// IntType
protected class SimpleType_IntTypeParserRuleCall_3 extends RuleCallToken {
	
	public SimpleType_IntTypeParserRuleCall_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getSimpleTypeAccess().getIntTypeParserRuleCall_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(IntType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getIntTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// UIntType
protected class SimpleType_UIntTypeParserRuleCall_4 extends RuleCallToken {
	
	public SimpleType_UIntTypeParserRuleCall_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getSimpleTypeAccess().getUIntTypeParserRuleCall_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UIntType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(UIntType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getUIntTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// FloatType
protected class SimpleType_FloatTypeParserRuleCall_5 extends RuleCallToken {
	
	public SimpleType_FloatTypeParserRuleCall_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getSimpleTypeAccess().getFloatTypeParserRuleCall_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FloatType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(FloatType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getFloatTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// DoubleType
protected class SimpleType_DoubleTypeParserRuleCall_6 extends RuleCallToken {
	
	public SimpleType_DoubleTypeParserRuleCall_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getSimpleTypeAccess().getDoubleTypeParserRuleCall_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DoubleType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(DoubleType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDoubleTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// StringType
protected class SimpleType_StringTypeParserRuleCall_7 extends RuleCallToken {
	
	public SimpleType_StringTypeParserRuleCall_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getSimpleTypeAccess().getStringTypeParserRuleCall_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(StringType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getStringTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule SimpleType ****************/


/************ begin Rule VectorType ****************
 *
 * VectorType:
 *   ShortVectorType|IntVectorType|FloatVectorType|DoubleVectorType|StringVectorType;
 *
 **/

// ShortVectorType|IntVectorType|FloatVectorType|DoubleVectorType|StringVectorType
protected class VectorType_Alternatives extends AlternativesToken {

	public VectorType_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getVectorTypeAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VectorType_ShortVectorTypeParserRuleCall_0(parent, this, 0, inst);
			case 1: return new VectorType_IntVectorTypeParserRuleCall_1(parent, this, 1, inst);
			case 2: return new VectorType_FloatVectorTypeParserRuleCall_2(parent, this, 2, inst);
			case 3: return new VectorType_DoubleVectorTypeParserRuleCall_3(parent, this, 3, inst);
			case 4: return new VectorType_StringVectorTypeParserRuleCall_4(parent, this, 4, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getVectorTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// ShortVectorType
protected class VectorType_ShortVectorTypeParserRuleCall_0 extends RuleCallToken {
	
	public VectorType_ShortVectorTypeParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getVectorTypeAccess().getShortVectorTypeParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ShortVectorType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ShortVectorType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getShortVectorTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// IntVectorType
protected class VectorType_IntVectorTypeParserRuleCall_1 extends RuleCallToken {
	
	public VectorType_IntVectorTypeParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getVectorTypeAccess().getIntVectorTypeParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntVectorType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(IntVectorType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getIntVectorTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// FloatVectorType
protected class VectorType_FloatVectorTypeParserRuleCall_2 extends RuleCallToken {
	
	public VectorType_FloatVectorTypeParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getVectorTypeAccess().getFloatVectorTypeParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FloatVectorType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(FloatVectorType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getFloatVectorTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// DoubleVectorType
protected class VectorType_DoubleVectorTypeParserRuleCall_3 extends RuleCallToken {
	
	public VectorType_DoubleVectorTypeParserRuleCall_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getVectorTypeAccess().getDoubleVectorTypeParserRuleCall_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DoubleVectorType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(DoubleVectorType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDoubleVectorTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// StringVectorType
protected class VectorType_StringVectorTypeParserRuleCall_4 extends RuleCallToken {
	
	public VectorType_StringVectorTypeParserRuleCall_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getVectorTypeAccess().getStringVectorTypeParserRuleCall_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringVectorType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(StringVectorType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getStringVectorTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule VectorType ****************/


/************ begin Rule InheritanceStatus ****************
 *
 * InheritanceStatus:
 *   abstract=Boolean inherited=Boolean concrete=Boolean concreteHere=Boolean hasChanged=
 *   STRING; 
 * 
 * 
 * 
 * 	        	 //	is abstract or inherited from abstract
 * 	        	 //	is hinerited
 * 	         	 //	is concrete or overloaded
 * 	     	 //	is concrete or overloaded in this class
 * 	       	 //	What has changed (dataType, attType, RWtype)
 * 
 * 
 * //
 * //	Command Definition
 * //
 *
 **/

// abstract=Boolean inherited=Boolean concrete=Boolean concreteHere=Boolean hasChanged=
// STRING 
// 	        	 //	is abstract or inherited from abstract
// 	        	 //	is hinerited
// 	         	 //	is concrete or overloaded
// 	     	 //	is concrete or overloaded in this class
protected class InheritanceStatus_Group extends GroupToken {
	
	public InheritanceStatus_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getInheritanceStatusAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InheritanceStatus_HasChangedAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getInheritanceStatusRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// abstract=Boolean 
// 	        	 //	is abstract or inherited from abstract
protected class InheritanceStatus_AbstractAssignment_0 extends AssignmentToken  {
	
	public InheritanceStatus_AbstractAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInheritanceStatusAccess().getAbstractAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("abstract",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("abstract");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getInheritanceStatusAccess().getAbstractBooleanParserRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// inherited=Boolean 	 //	is abstract or inherited from abstract
// 	        	 //	is hinerited
protected class InheritanceStatus_InheritedAssignment_1 extends AssignmentToken  {
	
	public InheritanceStatus_InheritedAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInheritanceStatusAccess().getInheritedAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InheritanceStatus_AbstractAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("inherited",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("inherited");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getInheritanceStatusAccess().getInheritedBooleanParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// concrete=Boolean 	 //	is hinerited
// 	         	 //	is concrete or overloaded
protected class InheritanceStatus_ConcreteAssignment_2 extends AssignmentToken  {
	
	public InheritanceStatus_ConcreteAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInheritanceStatusAccess().getConcreteAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InheritanceStatus_InheritedAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("concrete",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("concrete");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getInheritanceStatusAccess().getConcreteBooleanParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// concreteHere=Boolean 	 //	is concrete or overloaded
// 	     	 //	is concrete or overloaded in this class
protected class InheritanceStatus_ConcreteHereAssignment_3 extends AssignmentToken  {
	
	public InheritanceStatus_ConcreteHereAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInheritanceStatusAccess().getConcreteHereAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InheritanceStatus_ConcreteAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("concreteHere",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("concreteHere");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getInheritanceStatusAccess().getConcreteHereBooleanParserRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// hasChanged=STRING 	 //	is concrete or overloaded in this class
protected class InheritanceStatus_HasChangedAssignment_4 extends AssignmentToken  {
	
	public InheritanceStatus_HasChangedAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInheritanceStatusAccess().getHasChangedAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InheritanceStatus_ConcreteHereAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("hasChanged",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("hasChanged");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getInheritanceStatusAccess().getHasChangedSTRINGTerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule InheritanceStatus ****************/


/************ begin Rule Command ****************
 *
 * Command:
 *   name=ID argin=Argument argout=Argument description=STRING status=InheritanceStatus
 *   execMethod=STRING displayLevel=DisplayLevel polledPeriod=STRING "excludedStates:"
 *   excludedStates+=STRING*; 	 //	What has changed (dataType, attType, RWtype)
 * 
 * 
 * //
 * //	Command Definition
 * //
 *
 **/

// name=ID argin=Argument argout=Argument description=STRING status=InheritanceStatus
// execMethod=STRING displayLevel=DisplayLevel polledPeriod=STRING "excludedStates:"
// excludedStates+=STRING*
protected class Command_Group extends GroupToken {
	
	public Command_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCommandAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Command_ExcludedStatesAssignment_9(parent, this, 0, inst);
			case 1: return new Command_ExcludedStatesKeyword_8(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCommandRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=ID
protected class Command_NameAssignment_0 extends AssignmentToken  {
	
	public Command_NameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCommandAccess().getNameAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getCommandAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// argin=Argument
protected class Command_ArginAssignment_1 extends AssignmentToken  {
	
	public Command_ArginAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCommandAccess().getArginAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Argument_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("argin",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("argin");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getArgumentRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCommandAccess().getArginArgumentParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Command_NameAssignment_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// argout=Argument
protected class Command_ArgoutAssignment_2 extends AssignmentToken  {
	
	public Command_ArgoutAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCommandAccess().getArgoutAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Argument_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("argout",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("argout");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getArgumentRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCommandAccess().getArgoutArgumentParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Command_ArginAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// description=STRING
protected class Command_DescriptionAssignment_3 extends AssignmentToken  {
	
	public Command_DescriptionAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCommandAccess().getDescriptionAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Command_ArgoutAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getCommandAccess().getDescriptionSTRINGTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// status=InheritanceStatus
protected class Command_StatusAssignment_4 extends AssignmentToken  {
	
	public Command_StatusAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCommandAccess().getStatusAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InheritanceStatus_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("status",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("status");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInheritanceStatusRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCommandAccess().getStatusInheritanceStatusParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Command_DescriptionAssignment_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// execMethod=STRING
protected class Command_ExecMethodAssignment_5 extends AssignmentToken  {
	
	public Command_ExecMethodAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCommandAccess().getExecMethodAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Command_StatusAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("execMethod",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("execMethod");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getCommandAccess().getExecMethodSTRINGTerminalRuleCall_5_0();
			return obj;
		}
		return null;
	}

}

// displayLevel=DisplayLevel
protected class Command_DisplayLevelAssignment_6 extends AssignmentToken  {
	
	public Command_DisplayLevelAssignment_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCommandAccess().getDisplayLevelAssignment_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Command_ExecMethodAssignment_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("displayLevel",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("displayLevel");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getCommandAccess().getDisplayLevelDisplayLevelParserRuleCall_6_0();
			return obj;
		}
		return null;
	}

}

// polledPeriod=STRING
protected class Command_PolledPeriodAssignment_7 extends AssignmentToken  {
	
	public Command_PolledPeriodAssignment_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCommandAccess().getPolledPeriodAssignment_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Command_DisplayLevelAssignment_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("polledPeriod",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("polledPeriod");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getCommandAccess().getPolledPeriodSTRINGTerminalRuleCall_7_0();
			return obj;
		}
		return null;
	}

}

// "excludedStates:"
protected class Command_ExcludedStatesKeyword_8 extends KeywordToken  {
	
	public Command_ExcludedStatesKeyword_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCommandAccess().getExcludedStatesKeyword_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Command_PolledPeriodAssignment_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// excludedStates+=STRING*
protected class Command_ExcludedStatesAssignment_9 extends AssignmentToken  {
	
	public Command_ExcludedStatesAssignment_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCommandAccess().getExcludedStatesAssignment_9();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Command_ExcludedStatesAssignment_9(parent, this, 0, inst);
			case 1: return new Command_ExcludedStatesKeyword_8(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("excludedStates",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("excludedStates");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getCommandAccess().getExcludedStatesSTRINGTerminalRuleCall_9_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Command ****************/


/************ begin Rule Argument ****************
 *
 * Argument:
 *   type=Type description=STRING; 
 * 
 * 
 * 	   
 * 
 * //
 * //	Attribute Definition
 * //
 *
 **/

// type=Type description=STRING
protected class Argument_Group extends GroupToken {
	
	public Argument_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getArgumentAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Argument_DescriptionAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getArgumentRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// type=Type
protected class Argument_TypeAssignment_0 extends AssignmentToken  {
	
	public Argument_TypeAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getArgumentAccess().getTypeAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Type_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getArgumentAccess().getTypeTypeParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// description=STRING
protected class Argument_DescriptionAssignment_1 extends AssignmentToken  {
	
	public Argument_DescriptionAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getArgumentAccess().getDescriptionAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Argument_TypeAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getArgumentAccess().getDescriptionSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Argument ****************/


/************ begin Rule Attribute ****************
 *
 * Attribute:
 *   name=ID attType=AttrType dataType=Type rwType=RW_Type displayLevel=DisplayLevel
 *   polledPeriod=STRING maxX=STRING maxY=STRING associatedAttr=STRING memorized=Boolean
 *   memorizedAtInit=Boolean changeEvent=FireEvents archiveEvent=FireEvents
 *   dataReadyEvent=FireEvents status=InheritanceStatus properties=AttrProperties
 *   allocReadMember=Boolean isDynamic=Boolean "readExcludedStates:" readExcludedStates
 *   +=STRING* "writeExcludedStates:" writeExcludedStates+=STRING*;  
 * 
 * //
 * //	Attribute Definition
 * //
 *
 **/

// name=ID attType=AttrType dataType=Type rwType=RW_Type displayLevel=DisplayLevel
// polledPeriod=STRING maxX=STRING maxY=STRING associatedAttr=STRING memorized=Boolean
// memorizedAtInit=Boolean changeEvent=FireEvents archiveEvent=FireEvents
// dataReadyEvent=FireEvents status=InheritanceStatus properties=AttrProperties
// allocReadMember=Boolean isDynamic=Boolean "readExcludedStates:" readExcludedStates
// +=STRING* "writeExcludedStates:" writeExcludedStates+=STRING*
protected class Attribute_Group extends GroupToken {
	
	public Attribute_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAttributeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Attribute_WriteExcludedStatesAssignment_21(parent, this, 0, inst);
			case 1: return new Attribute_WriteExcludedStatesKeyword_20(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAttributeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=ID
protected class Attribute_NameAssignment_0 extends AssignmentToken  {
	
	public Attribute_NameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeAccess().getNameAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// attType=AttrType
protected class Attribute_AttTypeAssignment_1 extends AssignmentToken  {
	
	public Attribute_AttTypeAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeAccess().getAttTypeAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Attribute_NameAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("attType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("attType");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getAttributeAccess().getAttTypeAttrTypeParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// dataType=Type
protected class Attribute_DataTypeAssignment_2 extends AssignmentToken  {
	
	public Attribute_DataTypeAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeAccess().getDataTypeAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Type_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("dataType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("dataType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAttributeAccess().getDataTypeTypeParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Attribute_AttTypeAssignment_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// rwType=RW_Type
protected class Attribute_RwTypeAssignment_3 extends AssignmentToken  {
	
	public Attribute_RwTypeAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeAccess().getRwTypeAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Attribute_DataTypeAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("rwType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("rwType");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getAttributeAccess().getRwTypeRW_TypeParserRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// displayLevel=DisplayLevel
protected class Attribute_DisplayLevelAssignment_4 extends AssignmentToken  {
	
	public Attribute_DisplayLevelAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeAccess().getDisplayLevelAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Attribute_RwTypeAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("displayLevel",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("displayLevel");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getAttributeAccess().getDisplayLevelDisplayLevelParserRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// polledPeriod=STRING
protected class Attribute_PolledPeriodAssignment_5 extends AssignmentToken  {
	
	public Attribute_PolledPeriodAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeAccess().getPolledPeriodAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Attribute_DisplayLevelAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("polledPeriod",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("polledPeriod");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAttributeAccess().getPolledPeriodSTRINGTerminalRuleCall_5_0();
			return obj;
		}
		return null;
	}

}

// maxX=STRING
protected class Attribute_MaxXAssignment_6 extends AssignmentToken  {
	
	public Attribute_MaxXAssignment_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeAccess().getMaxXAssignment_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Attribute_PolledPeriodAssignment_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("maxX",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("maxX");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAttributeAccess().getMaxXSTRINGTerminalRuleCall_6_0();
			return obj;
		}
		return null;
	}

}

// maxY=STRING
protected class Attribute_MaxYAssignment_7 extends AssignmentToken  {
	
	public Attribute_MaxYAssignment_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeAccess().getMaxYAssignment_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Attribute_MaxXAssignment_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("maxY",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("maxY");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAttributeAccess().getMaxYSTRINGTerminalRuleCall_7_0();
			return obj;
		}
		return null;
	}

}

// associatedAttr=STRING
protected class Attribute_AssociatedAttrAssignment_8 extends AssignmentToken  {
	
	public Attribute_AssociatedAttrAssignment_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeAccess().getAssociatedAttrAssignment_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Attribute_MaxYAssignment_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("associatedAttr",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("associatedAttr");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAttributeAccess().getAssociatedAttrSTRINGTerminalRuleCall_8_0();
			return obj;
		}
		return null;
	}

}

// memorized=Boolean
protected class Attribute_MemorizedAssignment_9 extends AssignmentToken  {
	
	public Attribute_MemorizedAssignment_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeAccess().getMemorizedAssignment_9();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Attribute_AssociatedAttrAssignment_8(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("memorized",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("memorized");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getAttributeAccess().getMemorizedBooleanParserRuleCall_9_0();
			return obj;
		}
		return null;
	}

}

// memorizedAtInit=Boolean
protected class Attribute_MemorizedAtInitAssignment_10 extends AssignmentToken  {
	
	public Attribute_MemorizedAtInitAssignment_10(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeAccess().getMemorizedAtInitAssignment_10();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Attribute_MemorizedAssignment_9(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("memorizedAtInit",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("memorizedAtInit");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getAttributeAccess().getMemorizedAtInitBooleanParserRuleCall_10_0();
			return obj;
		}
		return null;
	}

}

// changeEvent=FireEvents
protected class Attribute_ChangeEventAssignment_11 extends AssignmentToken  {
	
	public Attribute_ChangeEventAssignment_11(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeAccess().getChangeEventAssignment_11();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FireEvents_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("changeEvent",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("changeEvent");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFireEventsRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAttributeAccess().getChangeEventFireEventsParserRuleCall_11_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Attribute_MemorizedAtInitAssignment_10(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// archiveEvent=FireEvents
protected class Attribute_ArchiveEventAssignment_12 extends AssignmentToken  {
	
	public Attribute_ArchiveEventAssignment_12(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeAccess().getArchiveEventAssignment_12();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FireEvents_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("archiveEvent",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("archiveEvent");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFireEventsRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAttributeAccess().getArchiveEventFireEventsParserRuleCall_12_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Attribute_ChangeEventAssignment_11(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// dataReadyEvent=FireEvents
protected class Attribute_DataReadyEventAssignment_13 extends AssignmentToken  {
	
	public Attribute_DataReadyEventAssignment_13(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeAccess().getDataReadyEventAssignment_13();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FireEvents_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("dataReadyEvent",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("dataReadyEvent");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFireEventsRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAttributeAccess().getDataReadyEventFireEventsParserRuleCall_13_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Attribute_ArchiveEventAssignment_12(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// status=InheritanceStatus
protected class Attribute_StatusAssignment_14 extends AssignmentToken  {
	
	public Attribute_StatusAssignment_14(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeAccess().getStatusAssignment_14();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InheritanceStatus_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("status",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("status");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInheritanceStatusRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAttributeAccess().getStatusInheritanceStatusParserRuleCall_14_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Attribute_DataReadyEventAssignment_13(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// properties=AttrProperties
protected class Attribute_PropertiesAssignment_15 extends AssignmentToken  {
	
	public Attribute_PropertiesAssignment_15(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeAccess().getPropertiesAssignment_15();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttrProperties_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("properties",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("properties");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAttrPropertiesRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAttributeAccess().getPropertiesAttrPropertiesParserRuleCall_15_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Attribute_StatusAssignment_14(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// allocReadMember=Boolean
protected class Attribute_AllocReadMemberAssignment_16 extends AssignmentToken  {
	
	public Attribute_AllocReadMemberAssignment_16(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeAccess().getAllocReadMemberAssignment_16();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Attribute_PropertiesAssignment_15(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("allocReadMember",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("allocReadMember");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getAttributeAccess().getAllocReadMemberBooleanParserRuleCall_16_0();
			return obj;
		}
		return null;
	}

}

// isDynamic=Boolean
protected class Attribute_IsDynamicAssignment_17 extends AssignmentToken  {
	
	public Attribute_IsDynamicAssignment_17(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeAccess().getIsDynamicAssignment_17();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Attribute_AllocReadMemberAssignment_16(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("isDynamic",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("isDynamic");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getAttributeAccess().getIsDynamicBooleanParserRuleCall_17_0();
			return obj;
		}
		return null;
	}

}

// "readExcludedStates:"
protected class Attribute_ReadExcludedStatesKeyword_18 extends KeywordToken  {
	
	public Attribute_ReadExcludedStatesKeyword_18(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAttributeAccess().getReadExcludedStatesKeyword_18();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Attribute_IsDynamicAssignment_17(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// readExcludedStates+=STRING*
protected class Attribute_ReadExcludedStatesAssignment_19 extends AssignmentToken  {
	
	public Attribute_ReadExcludedStatesAssignment_19(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeAccess().getReadExcludedStatesAssignment_19();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Attribute_ReadExcludedStatesAssignment_19(parent, this, 0, inst);
			case 1: return new Attribute_ReadExcludedStatesKeyword_18(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("readExcludedStates",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("readExcludedStates");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAttributeAccess().getReadExcludedStatesSTRINGTerminalRuleCall_19_0();
			return obj;
		}
		return null;
	}

}

// "writeExcludedStates:"
protected class Attribute_WriteExcludedStatesKeyword_20 extends KeywordToken  {
	
	public Attribute_WriteExcludedStatesKeyword_20(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAttributeAccess().getWriteExcludedStatesKeyword_20();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Attribute_ReadExcludedStatesAssignment_19(parent, this, 0, inst);
			case 1: return new Attribute_ReadExcludedStatesKeyword_18(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// writeExcludedStates+=STRING*
protected class Attribute_WriteExcludedStatesAssignment_21 extends AssignmentToken  {
	
	public Attribute_WriteExcludedStatesAssignment_21(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeAccess().getWriteExcludedStatesAssignment_21();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Attribute_WriteExcludedStatesAssignment_21(parent, this, 0, inst);
			case 1: return new Attribute_WriteExcludedStatesKeyword_20(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("writeExcludedStates",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("writeExcludedStates");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAttributeAccess().getWriteExcludedStatesSTRINGTerminalRuleCall_21_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Attribute ****************/


/************ begin Rule FireEvents ****************
 *
 * FireEvents:
 *   fire=Boolean libCheckCriteria=Boolean; 
 * 
 * 
 * 	                
 * 	    
 * 
 * //
 * //	Attribute Properties Definition
 * //
 *
 **/

// fire=Boolean libCheckCriteria=Boolean
protected class FireEvents_Group extends GroupToken {
	
	public FireEvents_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFireEventsAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FireEvents_LibCheckCriteriaAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFireEventsRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// fire=Boolean
protected class FireEvents_FireAssignment_0 extends AssignmentToken  {
	
	public FireEvents_FireAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFireEventsAccess().getFireAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("fire",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("fire");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getFireEventsAccess().getFireBooleanParserRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// libCheckCriteria=Boolean
protected class FireEvents_LibCheckCriteriaAssignment_1 extends AssignmentToken  {
	
	public FireEvents_LibCheckCriteriaAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getFireEventsAccess().getLibCheckCriteriaAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FireEvents_FireAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("libCheckCriteria",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("libCheckCriteria");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getFireEventsAccess().getLibCheckCriteriaBooleanParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule FireEvents ****************/


/************ begin Rule AttrProperties ****************
 *
 * AttrProperties:
 *   description=STRING label=STRING unit=STRING standardUnit=STRING displayUnit=STRING
 *   format=STRING maxValue=STRING minValue=STRING maxAlarm=STRING minAlarm=STRING
 *   maxWarning=STRING minWarning=STRING deltaTime=STRING deltaValue=STRING; 
 * 
 * //
 * //	Attribute Properties Definition
 * //
 * 
 * 	      
 * 	            
 * 	             
 * 	     
 * 	      
 * 	           
 * 	         
 * 	         
 * 	         
 * 	         
 * 	       
 * 	       
 * 	        
 * 	       
 * 
 * //
 * //	Additional files (not Tango classes)
 * //
 *
 **/

// description=STRING label=STRING unit=STRING standardUnit=STRING displayUnit=STRING
// format=STRING maxValue=STRING minValue=STRING maxAlarm=STRING minAlarm=STRING
// maxWarning=STRING minWarning=STRING deltaTime=STRING deltaValue=STRING
protected class AttrProperties_Group extends GroupToken {
	
	public AttrProperties_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAttrPropertiesAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttrProperties_DeltaValueAssignment_13(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAttrPropertiesRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING
protected class AttrProperties_DescriptionAssignment_0 extends AssignmentToken  {
	
	public AttrProperties_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttrPropertiesAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAttrPropertiesAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// label=STRING
protected class AttrProperties_LabelAssignment_1 extends AssignmentToken  {
	
	public AttrProperties_LabelAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttrPropertiesAccess().getLabelAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttrProperties_DescriptionAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("label",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("label");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAttrPropertiesAccess().getLabelSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// unit=STRING
protected class AttrProperties_UnitAssignment_2 extends AssignmentToken  {
	
	public AttrProperties_UnitAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttrPropertiesAccess().getUnitAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttrProperties_LabelAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("unit",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("unit");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAttrPropertiesAccess().getUnitSTRINGTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// standardUnit=STRING
protected class AttrProperties_StandardUnitAssignment_3 extends AssignmentToken  {
	
	public AttrProperties_StandardUnitAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttrPropertiesAccess().getStandardUnitAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttrProperties_UnitAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("standardUnit",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("standardUnit");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAttrPropertiesAccess().getStandardUnitSTRINGTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// displayUnit=STRING
protected class AttrProperties_DisplayUnitAssignment_4 extends AssignmentToken  {
	
	public AttrProperties_DisplayUnitAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttrPropertiesAccess().getDisplayUnitAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttrProperties_StandardUnitAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("displayUnit",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("displayUnit");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAttrPropertiesAccess().getDisplayUnitSTRINGTerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// format=STRING
protected class AttrProperties_FormatAssignment_5 extends AssignmentToken  {
	
	public AttrProperties_FormatAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttrPropertiesAccess().getFormatAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttrProperties_DisplayUnitAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("format",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("format");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAttrPropertiesAccess().getFormatSTRINGTerminalRuleCall_5_0();
			return obj;
		}
		return null;
	}

}

// maxValue=STRING
protected class AttrProperties_MaxValueAssignment_6 extends AssignmentToken  {
	
	public AttrProperties_MaxValueAssignment_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttrPropertiesAccess().getMaxValueAssignment_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttrProperties_FormatAssignment_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("maxValue",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("maxValue");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAttrPropertiesAccess().getMaxValueSTRINGTerminalRuleCall_6_0();
			return obj;
		}
		return null;
	}

}

// minValue=STRING
protected class AttrProperties_MinValueAssignment_7 extends AssignmentToken  {
	
	public AttrProperties_MinValueAssignment_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttrPropertiesAccess().getMinValueAssignment_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttrProperties_MaxValueAssignment_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("minValue",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("minValue");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAttrPropertiesAccess().getMinValueSTRINGTerminalRuleCall_7_0();
			return obj;
		}
		return null;
	}

}

// maxAlarm=STRING
protected class AttrProperties_MaxAlarmAssignment_8 extends AssignmentToken  {
	
	public AttrProperties_MaxAlarmAssignment_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttrPropertiesAccess().getMaxAlarmAssignment_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttrProperties_MinValueAssignment_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("maxAlarm",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("maxAlarm");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAttrPropertiesAccess().getMaxAlarmSTRINGTerminalRuleCall_8_0();
			return obj;
		}
		return null;
	}

}

// minAlarm=STRING
protected class AttrProperties_MinAlarmAssignment_9 extends AssignmentToken  {
	
	public AttrProperties_MinAlarmAssignment_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttrPropertiesAccess().getMinAlarmAssignment_9();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttrProperties_MaxAlarmAssignment_8(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("minAlarm",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("minAlarm");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAttrPropertiesAccess().getMinAlarmSTRINGTerminalRuleCall_9_0();
			return obj;
		}
		return null;
	}

}

// maxWarning=STRING
protected class AttrProperties_MaxWarningAssignment_10 extends AssignmentToken  {
	
	public AttrProperties_MaxWarningAssignment_10(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttrPropertiesAccess().getMaxWarningAssignment_10();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttrProperties_MinAlarmAssignment_9(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("maxWarning",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("maxWarning");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAttrPropertiesAccess().getMaxWarningSTRINGTerminalRuleCall_10_0();
			return obj;
		}
		return null;
	}

}

// minWarning=STRING
protected class AttrProperties_MinWarningAssignment_11 extends AssignmentToken  {
	
	public AttrProperties_MinWarningAssignment_11(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttrPropertiesAccess().getMinWarningAssignment_11();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttrProperties_MaxWarningAssignment_10(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("minWarning",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("minWarning");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAttrPropertiesAccess().getMinWarningSTRINGTerminalRuleCall_11_0();
			return obj;
		}
		return null;
	}

}

// deltaTime=STRING
protected class AttrProperties_DeltaTimeAssignment_12 extends AssignmentToken  {
	
	public AttrProperties_DeltaTimeAssignment_12(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttrPropertiesAccess().getDeltaTimeAssignment_12();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttrProperties_MinWarningAssignment_11(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("deltaTime",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("deltaTime");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAttrPropertiesAccess().getDeltaTimeSTRINGTerminalRuleCall_12_0();
			return obj;
		}
		return null;
	}

}

// deltaValue=STRING
protected class AttrProperties_DeltaValueAssignment_13 extends AssignmentToken  {
	
	public AttrProperties_DeltaValueAssignment_13(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttrPropertiesAccess().getDeltaValueAssignment_13();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AttrProperties_DeltaTimeAssignment_12(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("deltaValue",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("deltaValue");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAttrPropertiesAccess().getDeltaValueSTRINGTerminalRuleCall_13_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule AttrProperties ****************/


/************ begin Rule AdditionalFile ****************
 *
 * AdditionalFile:
 *   name=STRING path=STRING; 
 * 
 * //
 * //	Additional files (not Tango classes)
 * //
 * 
 * 	      
 * 	      
 * 
 * 
 * //
 * //	types could be one of the types
 * //
 *
 **/

// name=STRING path=STRING
protected class AdditionalFile_Group extends GroupToken {
	
	public AdditionalFile_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAdditionalFileAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdditionalFile_PathAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAdditionalFileRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=STRING
protected class AdditionalFile_NameAssignment_0 extends AssignmentToken  {
	
	public AdditionalFile_NameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAdditionalFileAccess().getNameAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAdditionalFileAccess().getNameSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// path=STRING
protected class AdditionalFile_PathAssignment_1 extends AssignmentToken  {
	
	public AdditionalFile_PathAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAdditionalFileAccess().getPathAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AdditionalFile_NameAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("path",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("path");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAdditionalFileAccess().getPathSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule AdditionalFile ****************/


/************ begin Rule Type ****************
 *
 * Type:
 *   VoidType|BooleanType|ShortType|UShortType|IntType|UIntType|FloatType|DoubleType|
 *   StringType|CharArrayType|ShortArrayType|UShortArrayType|IntArrayType|
 *   UIntArrayType|FloatArrayType|DoubleArrayType|StringArrayType|LongStringArrayType
 *   |DoubleStringArrayType|StateType|ConstStringType|BooleanArrayType|LongType|
 *   ULongType|UCharType|LongArrayType|ULongArrayType|DevIntType|EncodedType; 
 * 
 * 
 * //
 * //	types could be one of the types
 * //
 * 
 * 	        
 * 	        
 * 	            
 * 	        
 * 	  
 * 	
 * 	           
 * 	              
 * 	      
 * 	  
 * 	
 * 	             
 * 	                            
 * 	       
 * 	        
 * 	
 * //
 * //	Tango type defined by IDL.
 * //
 *
 **/

// VoidType|BooleanType|ShortType|UShortType|IntType|UIntType|FloatType|DoubleType|
// StringType|CharArrayType|ShortArrayType|UShortArrayType|IntArrayType|
// UIntArrayType|FloatArrayType|DoubleArrayType|StringArrayType|LongStringArrayType
// |DoubleStringArrayType|StateType|ConstStringType|BooleanArrayType|LongType|
// ULongType|UCharType|LongArrayType|ULongArrayType|DevIntType|EncodedType 
// 
// 
// //
// //	types could be one of the types
// //
// 
// 	        
// 	        
// 	            
// 	        
// 	  
// 	
// 	           
// 	              
// 	      
// 	  
// 	
// 	             
// 	                            
// 	       
// 	        
// 	
// //
// //	Tango type defined by IDL.
// //
protected class Type_Alternatives extends AlternativesToken {

	public Type_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getTypeAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Type_VoidTypeParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Type_BooleanTypeParserRuleCall_1(parent, this, 1, inst);
			case 2: return new Type_ShortTypeParserRuleCall_2(parent, this, 2, inst);
			case 3: return new Type_UShortTypeParserRuleCall_3(parent, this, 3, inst);
			case 4: return new Type_IntTypeParserRuleCall_4(parent, this, 4, inst);
			case 5: return new Type_UIntTypeParserRuleCall_5(parent, this, 5, inst);
			case 6: return new Type_FloatTypeParserRuleCall_6(parent, this, 6, inst);
			case 7: return new Type_DoubleTypeParserRuleCall_7(parent, this, 7, inst);
			case 8: return new Type_StringTypeParserRuleCall_8(parent, this, 8, inst);
			case 9: return new Type_CharArrayTypeParserRuleCall_9(parent, this, 9, inst);
			case 10: return new Type_ShortArrayTypeParserRuleCall_10(parent, this, 10, inst);
			case 11: return new Type_UShortArrayTypeParserRuleCall_11(parent, this, 11, inst);
			case 12: return new Type_IntArrayTypeParserRuleCall_12(parent, this, 12, inst);
			case 13: return new Type_UIntArrayTypeParserRuleCall_13(parent, this, 13, inst);
			case 14: return new Type_FloatArrayTypeParserRuleCall_14(parent, this, 14, inst);
			case 15: return new Type_DoubleArrayTypeParserRuleCall_15(parent, this, 15, inst);
			case 16: return new Type_StringArrayTypeParserRuleCall_16(parent, this, 16, inst);
			case 17: return new Type_LongStringArrayTypeParserRuleCall_17(parent, this, 17, inst);
			case 18: return new Type_DoubleStringArrayTypeParserRuleCall_18(parent, this, 18, inst);
			case 19: return new Type_StateTypeParserRuleCall_19(parent, this, 19, inst);
			case 20: return new Type_ConstStringTypeParserRuleCall_20(parent, this, 20, inst);
			case 21: return new Type_BooleanArrayTypeParserRuleCall_21(parent, this, 21, inst);
			case 22: return new Type_LongTypeParserRuleCall_22(parent, this, 22, inst);
			case 23: return new Type_ULongTypeParserRuleCall_23(parent, this, 23, inst);
			case 24: return new Type_UCharTypeParserRuleCall_24(parent, this, 24, inst);
			case 25: return new Type_LongArrayTypeParserRuleCall_25(parent, this, 25, inst);
			case 26: return new Type_ULongArrayTypeParserRuleCall_26(parent, this, 26, inst);
			case 27: return new Type_DevIntTypeParserRuleCall_27(parent, this, 27, inst);
			case 28: return new Type_EncodedTypeParserRuleCall_28(parent, this, 28, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// VoidType
protected class Type_VoidTypeParserRuleCall_0 extends RuleCallToken {
	
	public Type_VoidTypeParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeAccess().getVoidTypeParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VoidType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(VoidType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getVoidTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// BooleanType
protected class Type_BooleanTypeParserRuleCall_1 extends RuleCallToken {
	
	public Type_BooleanTypeParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeAccess().getBooleanTypeParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BooleanType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(BooleanType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getBooleanTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ShortType
protected class Type_ShortTypeParserRuleCall_2 extends RuleCallToken {
	
	public Type_ShortTypeParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeAccess().getShortTypeParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ShortType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ShortType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getShortTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// UShortType
protected class Type_UShortTypeParserRuleCall_3 extends RuleCallToken {
	
	public Type_UShortTypeParserRuleCall_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeAccess().getUShortTypeParserRuleCall_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UShortType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(UShortType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getUShortTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// IntType
protected class Type_IntTypeParserRuleCall_4 extends RuleCallToken {
	
	public Type_IntTypeParserRuleCall_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeAccess().getIntTypeParserRuleCall_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(IntType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getIntTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// UIntType
protected class Type_UIntTypeParserRuleCall_5 extends RuleCallToken {
	
	public Type_UIntTypeParserRuleCall_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeAccess().getUIntTypeParserRuleCall_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UIntType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(UIntType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getUIntTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// FloatType
protected class Type_FloatTypeParserRuleCall_6 extends RuleCallToken {
	
	public Type_FloatTypeParserRuleCall_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeAccess().getFloatTypeParserRuleCall_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FloatType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(FloatType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getFloatTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// DoubleType
protected class Type_DoubleTypeParserRuleCall_7 extends RuleCallToken {
	
	public Type_DoubleTypeParserRuleCall_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeAccess().getDoubleTypeParserRuleCall_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DoubleType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(DoubleType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDoubleTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// StringType
protected class Type_StringTypeParserRuleCall_8 extends RuleCallToken {
	
	public Type_StringTypeParserRuleCall_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeAccess().getStringTypeParserRuleCall_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(StringType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getStringTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// CharArrayType
protected class Type_CharArrayTypeParserRuleCall_9 extends RuleCallToken {
	
	public Type_CharArrayTypeParserRuleCall_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeAccess().getCharArrayTypeParserRuleCall_9();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CharArrayType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(CharArrayType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getCharArrayTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ShortArrayType
protected class Type_ShortArrayTypeParserRuleCall_10 extends RuleCallToken {
	
	public Type_ShortArrayTypeParserRuleCall_10(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeAccess().getShortArrayTypeParserRuleCall_10();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ShortArrayType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ShortArrayType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getShortArrayTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// UShortArrayType
protected class Type_UShortArrayTypeParserRuleCall_11 extends RuleCallToken {
	
	public Type_UShortArrayTypeParserRuleCall_11(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeAccess().getUShortArrayTypeParserRuleCall_11();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UShortArrayType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(UShortArrayType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getUShortArrayTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// IntArrayType
protected class Type_IntArrayTypeParserRuleCall_12 extends RuleCallToken {
	
	public Type_IntArrayTypeParserRuleCall_12(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeAccess().getIntArrayTypeParserRuleCall_12();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntArrayType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(IntArrayType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getIntArrayTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// UIntArrayType
protected class Type_UIntArrayTypeParserRuleCall_13 extends RuleCallToken {
	
	public Type_UIntArrayTypeParserRuleCall_13(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeAccess().getUIntArrayTypeParserRuleCall_13();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UIntArrayType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(UIntArrayType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getUIntArrayTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// FloatArrayType
protected class Type_FloatArrayTypeParserRuleCall_14 extends RuleCallToken {
	
	public Type_FloatArrayTypeParserRuleCall_14(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeAccess().getFloatArrayTypeParserRuleCall_14();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FloatArrayType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(FloatArrayType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getFloatArrayTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// DoubleArrayType
protected class Type_DoubleArrayTypeParserRuleCall_15 extends RuleCallToken {
	
	public Type_DoubleArrayTypeParserRuleCall_15(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeAccess().getDoubleArrayTypeParserRuleCall_15();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DoubleArrayType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(DoubleArrayType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDoubleArrayTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// StringArrayType
protected class Type_StringArrayTypeParserRuleCall_16 extends RuleCallToken {
	
	public Type_StringArrayTypeParserRuleCall_16(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeAccess().getStringArrayTypeParserRuleCall_16();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringArrayType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(StringArrayType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getStringArrayTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// LongStringArrayType
protected class Type_LongStringArrayTypeParserRuleCall_17 extends RuleCallToken {
	
	public Type_LongStringArrayTypeParserRuleCall_17(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeAccess().getLongStringArrayTypeParserRuleCall_17();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LongStringArrayType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(LongStringArrayType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getLongStringArrayTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// DoubleStringArrayType
protected class Type_DoubleStringArrayTypeParserRuleCall_18 extends RuleCallToken {
	
	public Type_DoubleStringArrayTypeParserRuleCall_18(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeAccess().getDoubleStringArrayTypeParserRuleCall_18();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DoubleStringArrayType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(DoubleStringArrayType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDoubleStringArrayTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// StateType
protected class Type_StateTypeParserRuleCall_19 extends RuleCallToken {
	
	public Type_StateTypeParserRuleCall_19(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeAccess().getStateTypeParserRuleCall_19();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StateType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(StateType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getStateTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ConstStringType
protected class Type_ConstStringTypeParserRuleCall_20 extends RuleCallToken {
	
	public Type_ConstStringTypeParserRuleCall_20(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeAccess().getConstStringTypeParserRuleCall_20();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConstStringType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ConstStringType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getConstStringTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// BooleanArrayType
protected class Type_BooleanArrayTypeParserRuleCall_21 extends RuleCallToken {
	
	public Type_BooleanArrayTypeParserRuleCall_21(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeAccess().getBooleanArrayTypeParserRuleCall_21();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BooleanArrayType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(BooleanArrayType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getBooleanArrayTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// LongType
protected class Type_LongTypeParserRuleCall_22 extends RuleCallToken {
	
	public Type_LongTypeParserRuleCall_22(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeAccess().getLongTypeParserRuleCall_22();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LongType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(LongType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getLongTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ULongType
protected class Type_ULongTypeParserRuleCall_23 extends RuleCallToken {
	
	public Type_ULongTypeParserRuleCall_23(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeAccess().getULongTypeParserRuleCall_23();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ULongType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ULongType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getULongTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// UCharType
protected class Type_UCharTypeParserRuleCall_24 extends RuleCallToken {
	
	public Type_UCharTypeParserRuleCall_24(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeAccess().getUCharTypeParserRuleCall_24();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UCharType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(UCharType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getUCharTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// LongArrayType
protected class Type_LongArrayTypeParserRuleCall_25 extends RuleCallToken {
	
	public Type_LongArrayTypeParserRuleCall_25(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeAccess().getLongArrayTypeParserRuleCall_25();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LongArrayType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(LongArrayType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getLongArrayTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// ULongArrayType
protected class Type_ULongArrayTypeParserRuleCall_26 extends RuleCallToken {
	
	public Type_ULongArrayTypeParserRuleCall_26(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeAccess().getULongArrayTypeParserRuleCall_26();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ULongArrayType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(ULongArrayType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getULongArrayTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// DevIntType
protected class Type_DevIntTypeParserRuleCall_27 extends RuleCallToken {
	
	public Type_DevIntTypeParserRuleCall_27(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeAccess().getDevIntTypeParserRuleCall_27();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DevIntType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(DevIntType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDevIntTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// EncodedType
protected class Type_EncodedTypeParserRuleCall_28 extends RuleCallToken {
	
	public Type_EncodedTypeParserRuleCall_28(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeAccess().getEncodedTypeParserRuleCall_28();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EncodedType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(EncodedType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getEncodedTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Type ****************/


/************ begin Rule VoidType ****************
 *
 * VoidType:
 *   {VoidType} "void"; 
 * 	
 * //
 * //	Tango type defined by IDL.
 * //
 *
 **/

// {VoidType} "void"
protected class VoidType_Group extends GroupToken {
	
	public VoidType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getVoidTypeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VoidType_VoidKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getVoidTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {VoidType}
protected class VoidType_VoidTypeAction_0 extends ActionToken  {

	public VoidType_VoidTypeAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getVoidTypeAccess().getVoidTypeAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getVoidTypeAccess().getVoidTypeAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "void"
protected class VoidType_VoidKeyword_1 extends KeywordToken  {
	
	public VoidType_VoidKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getVoidTypeAccess().getVoidKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new VoidType_VoidTypeAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule VoidType ****************/


/************ begin Rule BooleanType ****************
 *
 * BooleanType:
 *   {BooleanType} "boolean";
 *
 **/

// {BooleanType} "boolean"
protected class BooleanType_Group extends GroupToken {
	
	public BooleanType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBooleanTypeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BooleanType_BooleanKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBooleanTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {BooleanType}
protected class BooleanType_BooleanTypeAction_0 extends ActionToken  {

	public BooleanType_BooleanTypeAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getBooleanTypeAccess().getBooleanTypeAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getBooleanTypeAccess().getBooleanTypeAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "boolean"
protected class BooleanType_BooleanKeyword_1 extends KeywordToken  {
	
	public BooleanType_BooleanKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBooleanTypeAccess().getBooleanKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BooleanType_BooleanTypeAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule BooleanType ****************/


/************ begin Rule ShortType ****************
 *
 * ShortType:
 *   {ShortType} "short";
 *
 **/

// {ShortType} "short"
protected class ShortType_Group extends GroupToken {
	
	public ShortType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getShortTypeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ShortType_ShortKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getShortTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {ShortType}
protected class ShortType_ShortTypeAction_0 extends ActionToken  {

	public ShortType_ShortTypeAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getShortTypeAccess().getShortTypeAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getShortTypeAccess().getShortTypeAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "short"
protected class ShortType_ShortKeyword_1 extends KeywordToken  {
	
	public ShortType_ShortKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getShortTypeAccess().getShortKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ShortType_ShortTypeAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ShortType ****************/


/************ begin Rule UShortType ****************
 *
 * UShortType:
 *   {UShortType} "ushort";
 *
 **/

// {UShortType} "ushort"
protected class UShortType_Group extends GroupToken {
	
	public UShortType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUShortTypeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UShortType_UshortKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUShortTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {UShortType}
protected class UShortType_UShortTypeAction_0 extends ActionToken  {

	public UShortType_UShortTypeAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getUShortTypeAccess().getUShortTypeAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getUShortTypeAccess().getUShortTypeAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "ushort"
protected class UShortType_UshortKeyword_1 extends KeywordToken  {
	
	public UShortType_UshortKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUShortTypeAccess().getUshortKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UShortType_UShortTypeAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule UShortType ****************/


/************ begin Rule IntType ****************
 *
 * IntType:
 *   {IntType} "int";
 *
 **/

// {IntType} "int"
protected class IntType_Group extends GroupToken {
	
	public IntType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getIntTypeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntType_IntKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getIntTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {IntType}
protected class IntType_IntTypeAction_0 extends ActionToken  {

	public IntType_IntTypeAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getIntTypeAccess().getIntTypeAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getIntTypeAccess().getIntTypeAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "int"
protected class IntType_IntKeyword_1 extends KeywordToken  {
	
	public IntType_IntKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getIntTypeAccess().getIntKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntType_IntTypeAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule IntType ****************/


/************ begin Rule UIntType ****************
 *
 * UIntType:
 *   {UIntType} "uint";
 *
 **/

// {UIntType} "uint"
protected class UIntType_Group extends GroupToken {
	
	public UIntType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUIntTypeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UIntType_UintKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUIntTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {UIntType}
protected class UIntType_UIntTypeAction_0 extends ActionToken  {

	public UIntType_UIntTypeAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getUIntTypeAccess().getUIntTypeAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getUIntTypeAccess().getUIntTypeAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "uint"
protected class UIntType_UintKeyword_1 extends KeywordToken  {
	
	public UIntType_UintKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUIntTypeAccess().getUintKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UIntType_UIntTypeAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule UIntType ****************/


/************ begin Rule FloatType ****************
 *
 * FloatType:
 *   {FloatType} "float";
 *
 **/

// {FloatType} "float"
protected class FloatType_Group extends GroupToken {
	
	public FloatType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFloatTypeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FloatType_FloatKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFloatTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {FloatType}
protected class FloatType_FloatTypeAction_0 extends ActionToken  {

	public FloatType_FloatTypeAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getFloatTypeAccess().getFloatTypeAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getFloatTypeAccess().getFloatTypeAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "float"
protected class FloatType_FloatKeyword_1 extends KeywordToken  {
	
	public FloatType_FloatKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFloatTypeAccess().getFloatKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FloatType_FloatTypeAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule FloatType ****************/


/************ begin Rule DoubleType ****************
 *
 * DoubleType:
 *   {DoubleType} "double";
 *
 **/

// {DoubleType} "double"
protected class DoubleType_Group extends GroupToken {
	
	public DoubleType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getDoubleTypeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DoubleType_DoubleKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDoubleTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {DoubleType}
protected class DoubleType_DoubleTypeAction_0 extends ActionToken  {

	public DoubleType_DoubleTypeAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getDoubleTypeAccess().getDoubleTypeAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getDoubleTypeAccess().getDoubleTypeAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "double"
protected class DoubleType_DoubleKeyword_1 extends KeywordToken  {
	
	public DoubleType_DoubleKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDoubleTypeAccess().getDoubleKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DoubleType_DoubleTypeAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule DoubleType ****************/


/************ begin Rule StringType ****************
 *
 * StringType:
 *   {StringType} "string";
 *
 **/

// {StringType} "string"
protected class StringType_Group extends GroupToken {
	
	public StringType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStringTypeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringType_StringKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getStringTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {StringType}
protected class StringType_StringTypeAction_0 extends ActionToken  {

	public StringType_StringTypeAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getStringTypeAccess().getStringTypeAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getStringTypeAccess().getStringTypeAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "string"
protected class StringType_StringKeyword_1 extends KeywordToken  {
	
	public StringType_StringKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStringTypeAccess().getStringKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringType_StringTypeAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule StringType ****************/


/************ begin Rule CharArrayType ****************
 *
 * CharArrayType:
 *   {CharArrayType} "DevVarCharArray";
 *
 **/

// {CharArrayType} "DevVarCharArray"
protected class CharArrayType_Group extends GroupToken {
	
	public CharArrayType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCharArrayTypeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CharArrayType_DevVarCharArrayKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCharArrayTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {CharArrayType}
protected class CharArrayType_CharArrayTypeAction_0 extends ActionToken  {

	public CharArrayType_CharArrayTypeAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getCharArrayTypeAccess().getCharArrayTypeAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getCharArrayTypeAccess().getCharArrayTypeAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "DevVarCharArray"
protected class CharArrayType_DevVarCharArrayKeyword_1 extends KeywordToken  {
	
	public CharArrayType_DevVarCharArrayKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCharArrayTypeAccess().getDevVarCharArrayKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CharArrayType_CharArrayTypeAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule CharArrayType ****************/


/************ begin Rule ShortArrayType ****************
 *
 * ShortArrayType:
 *   {ShortArrayType} "DevVarShortArray";
 *
 **/

// {ShortArrayType} "DevVarShortArray"
protected class ShortArrayType_Group extends GroupToken {
	
	public ShortArrayType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getShortArrayTypeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ShortArrayType_DevVarShortArrayKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getShortArrayTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {ShortArrayType}
protected class ShortArrayType_ShortArrayTypeAction_0 extends ActionToken  {

	public ShortArrayType_ShortArrayTypeAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getShortArrayTypeAccess().getShortArrayTypeAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getShortArrayTypeAccess().getShortArrayTypeAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "DevVarShortArray"
protected class ShortArrayType_DevVarShortArrayKeyword_1 extends KeywordToken  {
	
	public ShortArrayType_DevVarShortArrayKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getShortArrayTypeAccess().getDevVarShortArrayKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ShortArrayType_ShortArrayTypeAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ShortArrayType ****************/


/************ begin Rule UShortArrayType ****************
 *
 * UShortArrayType:
 *   {UShortArrayType} "DevVarUShortArray";
 *
 **/

// {UShortArrayType} "DevVarUShortArray"
protected class UShortArrayType_Group extends GroupToken {
	
	public UShortArrayType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUShortArrayTypeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UShortArrayType_DevVarUShortArrayKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUShortArrayTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {UShortArrayType}
protected class UShortArrayType_UShortArrayTypeAction_0 extends ActionToken  {

	public UShortArrayType_UShortArrayTypeAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getUShortArrayTypeAccess().getUShortArrayTypeAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getUShortArrayTypeAccess().getUShortArrayTypeAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "DevVarUShortArray"
protected class UShortArrayType_DevVarUShortArrayKeyword_1 extends KeywordToken  {
	
	public UShortArrayType_DevVarUShortArrayKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUShortArrayTypeAccess().getDevVarUShortArrayKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UShortArrayType_UShortArrayTypeAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule UShortArrayType ****************/


/************ begin Rule IntArrayType ****************
 *
 * IntArrayType:
 *   {IntArrayType} "DevVarLongArray";
 *
 **/

// {IntArrayType} "DevVarLongArray"
protected class IntArrayType_Group extends GroupToken {
	
	public IntArrayType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getIntArrayTypeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntArrayType_DevVarLongArrayKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getIntArrayTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {IntArrayType}
protected class IntArrayType_IntArrayTypeAction_0 extends ActionToken  {

	public IntArrayType_IntArrayTypeAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getIntArrayTypeAccess().getIntArrayTypeAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getIntArrayTypeAccess().getIntArrayTypeAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "DevVarLongArray"
protected class IntArrayType_DevVarLongArrayKeyword_1 extends KeywordToken  {
	
	public IntArrayType_DevVarLongArrayKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getIntArrayTypeAccess().getDevVarLongArrayKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntArrayType_IntArrayTypeAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule IntArrayType ****************/


/************ begin Rule UIntArrayType ****************
 *
 * UIntArrayType:
 *   {UIntArrayType} "DevVarULongArray";
 *
 **/

// {UIntArrayType} "DevVarULongArray"
protected class UIntArrayType_Group extends GroupToken {
	
	public UIntArrayType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUIntArrayTypeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UIntArrayType_DevVarULongArrayKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUIntArrayTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {UIntArrayType}
protected class UIntArrayType_UIntArrayTypeAction_0 extends ActionToken  {

	public UIntArrayType_UIntArrayTypeAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getUIntArrayTypeAccess().getUIntArrayTypeAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getUIntArrayTypeAccess().getUIntArrayTypeAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "DevVarULongArray"
protected class UIntArrayType_DevVarULongArrayKeyword_1 extends KeywordToken  {
	
	public UIntArrayType_DevVarULongArrayKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUIntArrayTypeAccess().getDevVarULongArrayKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UIntArrayType_UIntArrayTypeAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule UIntArrayType ****************/


/************ begin Rule FloatArrayType ****************
 *
 * FloatArrayType:
 *   {FloatArrayType} "DevVarFloatArray";
 *
 **/

// {FloatArrayType} "DevVarFloatArray"
protected class FloatArrayType_Group extends GroupToken {
	
	public FloatArrayType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFloatArrayTypeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FloatArrayType_DevVarFloatArrayKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFloatArrayTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {FloatArrayType}
protected class FloatArrayType_FloatArrayTypeAction_0 extends ActionToken  {

	public FloatArrayType_FloatArrayTypeAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getFloatArrayTypeAccess().getFloatArrayTypeAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getFloatArrayTypeAccess().getFloatArrayTypeAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "DevVarFloatArray"
protected class FloatArrayType_DevVarFloatArrayKeyword_1 extends KeywordToken  {
	
	public FloatArrayType_DevVarFloatArrayKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFloatArrayTypeAccess().getDevVarFloatArrayKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FloatArrayType_FloatArrayTypeAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule FloatArrayType ****************/


/************ begin Rule DoubleArrayType ****************
 *
 * DoubleArrayType:
 *   {DoubleArrayType} "DevVarDoubleArray";
 *
 **/

// {DoubleArrayType} "DevVarDoubleArray"
protected class DoubleArrayType_Group extends GroupToken {
	
	public DoubleArrayType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getDoubleArrayTypeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DoubleArrayType_DevVarDoubleArrayKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDoubleArrayTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {DoubleArrayType}
protected class DoubleArrayType_DoubleArrayTypeAction_0 extends ActionToken  {

	public DoubleArrayType_DoubleArrayTypeAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getDoubleArrayTypeAccess().getDoubleArrayTypeAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getDoubleArrayTypeAccess().getDoubleArrayTypeAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "DevVarDoubleArray"
protected class DoubleArrayType_DevVarDoubleArrayKeyword_1 extends KeywordToken  {
	
	public DoubleArrayType_DevVarDoubleArrayKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDoubleArrayTypeAccess().getDevVarDoubleArrayKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DoubleArrayType_DoubleArrayTypeAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule DoubleArrayType ****************/


/************ begin Rule StringArrayType ****************
 *
 * StringArrayType:
 *   {StringArrayType} "DevVarStringArray";
 *
 **/

// {StringArrayType} "DevVarStringArray"
protected class StringArrayType_Group extends GroupToken {
	
	public StringArrayType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStringArrayTypeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringArrayType_DevVarStringArrayKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getStringArrayTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {StringArrayType}
protected class StringArrayType_StringArrayTypeAction_0 extends ActionToken  {

	public StringArrayType_StringArrayTypeAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getStringArrayTypeAccess().getStringArrayTypeAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getStringArrayTypeAccess().getStringArrayTypeAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "DevVarStringArray"
protected class StringArrayType_DevVarStringArrayKeyword_1 extends KeywordToken  {
	
	public StringArrayType_DevVarStringArrayKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStringArrayTypeAccess().getDevVarStringArrayKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringArrayType_StringArrayTypeAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule StringArrayType ****************/


/************ begin Rule LongStringArrayType ****************
 *
 * LongStringArrayType:
 *   {LongStringArrayType} "DevVarLongStringArray";
 *
 **/

// {LongStringArrayType} "DevVarLongStringArray"
protected class LongStringArrayType_Group extends GroupToken {
	
	public LongStringArrayType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLongStringArrayTypeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LongStringArrayType_DevVarLongStringArrayKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLongStringArrayTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {LongStringArrayType}
protected class LongStringArrayType_LongStringArrayTypeAction_0 extends ActionToken  {

	public LongStringArrayType_LongStringArrayTypeAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getLongStringArrayTypeAccess().getLongStringArrayTypeAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getLongStringArrayTypeAccess().getLongStringArrayTypeAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "DevVarLongStringArray"
protected class LongStringArrayType_DevVarLongStringArrayKeyword_1 extends KeywordToken  {
	
	public LongStringArrayType_DevVarLongStringArrayKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLongStringArrayTypeAccess().getDevVarLongStringArrayKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LongStringArrayType_LongStringArrayTypeAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule LongStringArrayType ****************/


/************ begin Rule DoubleStringArrayType ****************
 *
 * DoubleStringArrayType:
 *   {DoubleStringArrayType} "DevVarDoubleStringArray";
 *
 **/

// {DoubleStringArrayType} "DevVarDoubleStringArray"
protected class DoubleStringArrayType_Group extends GroupToken {
	
	public DoubleStringArrayType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getDoubleStringArrayTypeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DoubleStringArrayType_DevVarDoubleStringArrayKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDoubleStringArrayTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {DoubleStringArrayType}
protected class DoubleStringArrayType_DoubleStringArrayTypeAction_0 extends ActionToken  {

	public DoubleStringArrayType_DoubleStringArrayTypeAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getDoubleStringArrayTypeAccess().getDoubleStringArrayTypeAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getDoubleStringArrayTypeAccess().getDoubleStringArrayTypeAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "DevVarDoubleStringArray"
protected class DoubleStringArrayType_DevVarDoubleStringArrayKeyword_1 extends KeywordToken  {
	
	public DoubleStringArrayType_DevVarDoubleStringArrayKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDoubleStringArrayTypeAccess().getDevVarDoubleStringArrayKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DoubleStringArrayType_DoubleStringArrayTypeAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule DoubleStringArrayType ****************/


/************ begin Rule StateType ****************
 *
 * StateType:
 *   {StateType} "DevState";
 *
 **/

// {StateType} "DevState"
protected class StateType_Group extends GroupToken {
	
	public StateType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateTypeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StateType_DevStateKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getStateTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {StateType}
protected class StateType_StateTypeAction_0 extends ActionToken  {

	public StateType_StateTypeAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getStateTypeAccess().getStateTypeAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getStateTypeAccess().getStateTypeAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "DevState"
protected class StateType_DevStateKeyword_1 extends KeywordToken  {
	
	public StateType_DevStateKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateTypeAccess().getDevStateKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StateType_StateTypeAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule StateType ****************/


/************ begin Rule ConstStringType ****************
 *
 * ConstStringType:
 *   {ConstStringType} "ConstDevString";
 *
 **/

// {ConstStringType} "ConstDevString"
protected class ConstStringType_Group extends GroupToken {
	
	public ConstStringType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getConstStringTypeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConstStringType_ConstDevStringKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getConstStringTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {ConstStringType}
protected class ConstStringType_ConstStringTypeAction_0 extends ActionToken  {

	public ConstStringType_ConstStringTypeAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getConstStringTypeAccess().getConstStringTypeAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getConstStringTypeAccess().getConstStringTypeAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "ConstDevString"
protected class ConstStringType_ConstDevStringKeyword_1 extends KeywordToken  {
	
	public ConstStringType_ConstDevStringKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getConstStringTypeAccess().getConstDevStringKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ConstStringType_ConstStringTypeAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ConstStringType ****************/


/************ begin Rule BooleanArrayType ****************
 *
 * BooleanArrayType:
 *   {BooleanArrayType} "DevVarBooleanArray";
 *
 **/

// {BooleanArrayType} "DevVarBooleanArray"
protected class BooleanArrayType_Group extends GroupToken {
	
	public BooleanArrayType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBooleanArrayTypeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BooleanArrayType_DevVarBooleanArrayKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBooleanArrayTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {BooleanArrayType}
protected class BooleanArrayType_BooleanArrayTypeAction_0 extends ActionToken  {

	public BooleanArrayType_BooleanArrayTypeAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getBooleanArrayTypeAccess().getBooleanArrayTypeAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getBooleanArrayTypeAccess().getBooleanArrayTypeAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "DevVarBooleanArray"
protected class BooleanArrayType_DevVarBooleanArrayKeyword_1 extends KeywordToken  {
	
	public BooleanArrayType_DevVarBooleanArrayKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBooleanArrayTypeAccess().getDevVarBooleanArrayKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BooleanArrayType_BooleanArrayTypeAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule BooleanArrayType ****************/


/************ begin Rule UCharType ****************
 *
 * UCharType:
 *   {UCharType} "DevUChar";
 *
 **/

// {UCharType} "DevUChar"
protected class UCharType_Group extends GroupToken {
	
	public UCharType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUCharTypeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UCharType_DevUCharKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUCharTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {UCharType}
protected class UCharType_UCharTypeAction_0 extends ActionToken  {

	public UCharType_UCharTypeAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getUCharTypeAccess().getUCharTypeAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getUCharTypeAccess().getUCharTypeAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "DevUChar"
protected class UCharType_DevUCharKeyword_1 extends KeywordToken  {
	
	public UCharType_DevUCharKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUCharTypeAccess().getDevUCharKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UCharType_UCharTypeAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule UCharType ****************/


/************ begin Rule LongType ****************
 *
 * LongType:
 *   {LongType} "DevLong64";
 *
 **/

// {LongType} "DevLong64"
protected class LongType_Group extends GroupToken {
	
	public LongType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLongTypeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LongType_DevLong64Keyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLongTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {LongType}
protected class LongType_LongTypeAction_0 extends ActionToken  {

	public LongType_LongTypeAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getLongTypeAccess().getLongTypeAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getLongTypeAccess().getLongTypeAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "DevLong64"
protected class LongType_DevLong64Keyword_1 extends KeywordToken  {
	
	public LongType_DevLong64Keyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLongTypeAccess().getDevLong64Keyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LongType_LongTypeAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule LongType ****************/


/************ begin Rule ULongType ****************
 *
 * ULongType:
 *   {ULongType} "DevULong64";
 *
 **/

// {ULongType} "DevULong64"
protected class ULongType_Group extends GroupToken {
	
	public ULongType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getULongTypeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ULongType_DevULong64Keyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getULongTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {ULongType}
protected class ULongType_ULongTypeAction_0 extends ActionToken  {

	public ULongType_ULongTypeAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getULongTypeAccess().getULongTypeAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getULongTypeAccess().getULongTypeAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "DevULong64"
protected class ULongType_DevULong64Keyword_1 extends KeywordToken  {
	
	public ULongType_DevULong64Keyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getULongTypeAccess().getDevULong64Keyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ULongType_ULongTypeAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ULongType ****************/


/************ begin Rule LongArrayType ****************
 *
 * LongArrayType:
 *   {LongArrayType} "DevVarLong64Array";
 *
 **/

// {LongArrayType} "DevVarLong64Array"
protected class LongArrayType_Group extends GroupToken {
	
	public LongArrayType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getLongArrayTypeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LongArrayType_DevVarLong64ArrayKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getLongArrayTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {LongArrayType}
protected class LongArrayType_LongArrayTypeAction_0 extends ActionToken  {

	public LongArrayType_LongArrayTypeAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getLongArrayTypeAccess().getLongArrayTypeAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getLongArrayTypeAccess().getLongArrayTypeAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "DevVarLong64Array"
protected class LongArrayType_DevVarLong64ArrayKeyword_1 extends KeywordToken  {
	
	public LongArrayType_DevVarLong64ArrayKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getLongArrayTypeAccess().getDevVarLong64ArrayKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new LongArrayType_LongArrayTypeAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule LongArrayType ****************/


/************ begin Rule ULongArrayType ****************
 *
 * ULongArrayType:
 *   {ULongArrayType} "DevVarULong64Array";
 *
 **/

// {ULongArrayType} "DevVarULong64Array"
protected class ULongArrayType_Group extends GroupToken {
	
	public ULongArrayType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getULongArrayTypeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ULongArrayType_DevVarULong64ArrayKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getULongArrayTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {ULongArrayType}
protected class ULongArrayType_ULongArrayTypeAction_0 extends ActionToken  {

	public ULongArrayType_ULongArrayTypeAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getULongArrayTypeAccess().getULongArrayTypeAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getULongArrayTypeAccess().getULongArrayTypeAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "DevVarULong64Array"
protected class ULongArrayType_DevVarULong64ArrayKeyword_1 extends KeywordToken  {
	
	public ULongArrayType_DevVarULong64ArrayKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getULongArrayTypeAccess().getDevVarULong64ArrayKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ULongArrayType_ULongArrayTypeAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ULongArrayType ****************/


/************ begin Rule DevIntType ****************
 *
 * DevIntType:
 *   {DevIntType} "DevInt";
 *
 **/

// {DevIntType} "DevInt"
protected class DevIntType_Group extends GroupToken {
	
	public DevIntType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getDevIntTypeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DevIntType_DevIntKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDevIntTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {DevIntType}
protected class DevIntType_DevIntTypeAction_0 extends ActionToken  {

	public DevIntType_DevIntTypeAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getDevIntTypeAccess().getDevIntTypeAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getDevIntTypeAccess().getDevIntTypeAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "DevInt"
protected class DevIntType_DevIntKeyword_1 extends KeywordToken  {
	
	public DevIntType_DevIntKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDevIntTypeAccess().getDevIntKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DevIntType_DevIntTypeAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule DevIntType ****************/


/************ begin Rule EncodedType ****************
 *
 * EncodedType:
 *   {EncodedType} "DevEncoded";
 *
 **/

// {EncodedType} "DevEncoded"
protected class EncodedType_Group extends GroupToken {
	
	public EncodedType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getEncodedTypeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EncodedType_DevEncodedKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getEncodedTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {EncodedType}
protected class EncodedType_EncodedTypeAction_0 extends ActionToken  {

	public EncodedType_EncodedTypeAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getEncodedTypeAccess().getEncodedTypeAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getEncodedTypeAccess().getEncodedTypeAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "DevEncoded"
protected class EncodedType_DevEncodedKeyword_1 extends KeywordToken  {
	
	public EncodedType_DevEncodedKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getEncodedTypeAccess().getDevEncodedKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EncodedType_EncodedTypeAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule EncodedType ****************/


/************ begin Rule ShortVectorType ****************
 *
 * ShortVectorType:
 *   {ShortVectorType} "vector<short>";
 *
 **/

// {ShortVectorType} "vector<short>"
protected class ShortVectorType_Group extends GroupToken {
	
	public ShortVectorType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getShortVectorTypeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ShortVectorType_VectorShortKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getShortVectorTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {ShortVectorType}
protected class ShortVectorType_ShortVectorTypeAction_0 extends ActionToken  {

	public ShortVectorType_ShortVectorTypeAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getShortVectorTypeAccess().getShortVectorTypeAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getShortVectorTypeAccess().getShortVectorTypeAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "vector<short>"
protected class ShortVectorType_VectorShortKeyword_1 extends KeywordToken  {
	
	public ShortVectorType_VectorShortKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getShortVectorTypeAccess().getVectorShortKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ShortVectorType_ShortVectorTypeAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ShortVectorType ****************/


/************ begin Rule IntVectorType ****************
 *
 * IntVectorType:
 *   {IntVectorType} "vector<int>";
 *
 **/

// {IntVectorType} "vector<int>"
protected class IntVectorType_Group extends GroupToken {
	
	public IntVectorType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getIntVectorTypeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntVectorType_VectorIntKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getIntVectorTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {IntVectorType}
protected class IntVectorType_IntVectorTypeAction_0 extends ActionToken  {

	public IntVectorType_IntVectorTypeAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getIntVectorTypeAccess().getIntVectorTypeAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getIntVectorTypeAccess().getIntVectorTypeAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "vector<int>"
protected class IntVectorType_VectorIntKeyword_1 extends KeywordToken  {
	
	public IntVectorType_VectorIntKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getIntVectorTypeAccess().getVectorIntKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntVectorType_IntVectorTypeAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule IntVectorType ****************/


/************ begin Rule FloatVectorType ****************
 *
 * FloatVectorType:
 *   {FloatVectorType} "vector<float>";
 *
 **/

// {FloatVectorType} "vector<float>"
protected class FloatVectorType_Group extends GroupToken {
	
	public FloatVectorType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getFloatVectorTypeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FloatVectorType_VectorFloatKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getFloatVectorTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {FloatVectorType}
protected class FloatVectorType_FloatVectorTypeAction_0 extends ActionToken  {

	public FloatVectorType_FloatVectorTypeAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getFloatVectorTypeAccess().getFloatVectorTypeAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getFloatVectorTypeAccess().getFloatVectorTypeAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "vector<float>"
protected class FloatVectorType_VectorFloatKeyword_1 extends KeywordToken  {
	
	public FloatVectorType_VectorFloatKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getFloatVectorTypeAccess().getVectorFloatKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new FloatVectorType_FloatVectorTypeAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule FloatVectorType ****************/


/************ begin Rule DoubleVectorType ****************
 *
 * DoubleVectorType:
 *   {DoubleVectorType} "vector<double>";
 *
 **/

// {DoubleVectorType} "vector<double>"
protected class DoubleVectorType_Group extends GroupToken {
	
	public DoubleVectorType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getDoubleVectorTypeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DoubleVectorType_VectorDoubleKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDoubleVectorTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {DoubleVectorType}
protected class DoubleVectorType_DoubleVectorTypeAction_0 extends ActionToken  {

	public DoubleVectorType_DoubleVectorTypeAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getDoubleVectorTypeAccess().getDoubleVectorTypeAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getDoubleVectorTypeAccess().getDoubleVectorTypeAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "vector<double>"
protected class DoubleVectorType_VectorDoubleKeyword_1 extends KeywordToken  {
	
	public DoubleVectorType_VectorDoubleKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDoubleVectorTypeAccess().getVectorDoubleKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DoubleVectorType_DoubleVectorTypeAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule DoubleVectorType ****************/


/************ begin Rule StringVectorType ****************
 *
 * StringVectorType:
 *   {StringVectorType} "vector<string>";
 *
 **/

// {StringVectorType} "vector<string>"
protected class StringVectorType_Group extends GroupToken {
	
	public StringVectorType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStringVectorTypeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringVectorType_VectorStringKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getStringVectorTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// {StringVectorType}
protected class StringVectorType_StringVectorTypeAction_0 extends ActionToken  {

	public StringVectorType_StringVectorTypeAction_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Action getGrammarElement() {
		return grammarAccess.getStringVectorTypeAccess().getStringVectorTypeAction_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	
	protected IInstanceDescription tryConsumeVal() {
		if(!current.isInstanceOf(grammarAccess.getStringVectorTypeAccess().getStringVectorTypeAction_0().getType().getClassifier())) return null;
		if(!current.isConsumed()) return null;
		return current;
	}
}

// "vector<string>"
protected class StringVectorType_VectorStringKeyword_1 extends KeywordToken  {
	
	public StringVectorType_VectorStringKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStringVectorTypeAccess().getVectorStringKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringVectorType_StringVectorTypeAction_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule StringVectorType ****************/

}
