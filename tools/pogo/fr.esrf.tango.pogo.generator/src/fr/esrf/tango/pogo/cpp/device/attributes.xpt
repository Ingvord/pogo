«IMPORT pogoDsl»
«EXTENSION fr::esrf::tango::pogo::cpp::_CppConstants»
«EXTENSION fr::esrf::tango::pogo::cpp::_CppUtil»





//	=========================================================
//	Define attributes mnanagement
//	=========================================================
«DEFINE cppFile FOR PogoDeviceClass»
«IF attributes.size > 0»
«EXPAND fr::esrf::tango::pogo::cpp::Common::methodHeader(
		"read_attr_hardware", "Hardware acquisition for attributes.")-»
«EXPAND readAttributeHardwareMethod»
«ENDIF»
«FOREACH attributes AS att»
«EXPAND readAttributeHeader(att)»
«EXPAND readAttributeMethod(att)»«IF att.rwTtype.contains("WRITE")»
«EXPAND writeAttributeHeader(att)»
«EXPAND writeAttributeMethod(att)»
«ENDIF»«ENDFOREACH»
«ENDDEFINE»



//	=========================================================
//	Define The header for a read attribute method
//	=========================================================
«DEFINE readAttributeHeader(Attribute att) FOR PogoDeviceClass-»
«separator2()»
/**
 *	Read «att.name» attribute
 *	«att.properties.description.comments(" *	")»
 *
 *	Data type:	«att.dataType.cppType().toString()»
 *	Attr type:	«att.attType» «att.attTypeDimentions()»
 */
«separator2()»«ENDDEFINE»


//	=========================================================
//	Define The header for a read attribute method for prototype
//	=========================================================
«DEFINE readAttributeHeaderProto(Attribute att) FOR PogoDeviceClass-»
	/**
	 *	Read «att.name» attribute
	 *	«att.properties.description.comments(" *	")»
	 *
	 *	Data type:	«att.dataType.cppType().toString()»
	 *	Attr type:	«att.attType» «att.attTypeDimentions()»
	 */«ENDDEFINE»


//	=========================================================
//	Define The method to execute a read attribute
//	=========================================================
«DEFINE readAttributeMethod(Attribute att) FOR PogoDeviceClass-»
void «name»::read_«att.name»(Tango::Attribute &attr)
{
	DEBUG_STREAM << "«name»::read_«att.name»(Tango::Attribute &attr) entering... " << endl;
	«EXPAND fr::esrf::tango::pogo::cpp::Common::ProtectedArea(
			"read_"+att.name,
			"//	Set the attribute value\n" +
			"attr.set_value(attr_"+att.name+"_read"+att.SetAttValueSize()+");")-»
}«ENDDEFINE»


//	=========================================================
//	Define The header for a write attribute method
//	=========================================================
«DEFINE writeAttributeHeader(Attribute att) FOR PogoDeviceClass»
«separator2()»
/**
 *	Write «att.name» attribute values to hardware.
 *
 *	Data type:	«att.dataType.cppType().toString()»
 *	Attr type:	«att.attType» «att.attTypeDimentions()»
 */
«separator2()»«ENDDEFINE»


//	=========================================================
//	Define The method to execute a write attribute
//	=========================================================
«DEFINE writeAttributeMethod(Attribute att) FOR PogoDeviceClass»void «name»::write_«att.name»(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "«name»::write_«att.name»(Tango::Attribute &attr) entering... " << endl;
	«EXPAND fr::esrf::tango::pogo::cpp::Common::ProtectedArea("write_"+att.name,
			"//	Retreive the writing value\n"+
			"const «att.dataType.cppType().toString()	*write_value;\n"+
			"attr.get_write_value(write_value);")-»
}«ENDDEFINE»



//	=========================================================
//	Define The method to read attribute hardware
//	=========================================================
«DEFINE readAttributeHardwareMethod FOR PogoDeviceClass»void «name»::read_attr_hardware(vector<long> &attr_list)
{
	DEBUG_STREAM << "«name»::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	«EXPAND fr::esrf::tango::pogo::cpp::Common::ProtectedArea("read_attr_hardware", "//	Add your own code")»
}«ENDDEFINE»

