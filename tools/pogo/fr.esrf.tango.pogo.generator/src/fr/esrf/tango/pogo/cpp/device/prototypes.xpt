«IMPORT pogoDsl»
«EXTENSION fr::esrf::tango::pogo::cpp::_CppConstants»
«EXTENSION fr::esrf::tango::pogo::cpp::_CppUtil»

//	=========================================================
//	Define protypes the device class
//	=========================================================
«DEFINE headerFile FOR PogoDeviceClass»
//	Constructors and destructors
public:«EXPAND constructorsProto»

//	Miscellaneous methods
public:«EXPAND miscellaneousProto»
«IF attributes.size > 0»
//	Attribute methods
public:
«EXPAND fr::esrf::tango::pogo::cpp::Common::methodHeaderProto(
	"read_attr_hardware",
	"Hardware acquisition for attributes.")-»
	virtual void read_attr_hardware(vector<long> &attr_list);
«FOREACH attributes AS att»
«EXPAND attributeCallsProto(att)»
«ENDFOREACH»
«ENDIF»

//	Command execution methods
public: «FOREACH commands AS cmd»«IF cmd.abstract!="true"»
«EXPAND executeCommandProto(cmd)»
«EXPAND isCommandAllowedProto(cmd)»
«ENDIF»«ENDFOREACH»
«ENDDEFINE»




//	=========================================================
//	Define protypes for a attribute call methods
//	=========================================================
«DEFINE attributeCallsProto(Attribute att) FOR PogoDeviceClass»
«EXPAND attributes::readAttributeHeaderProto(att)-»

	virtual void read_«att.name»(Tango::Attribute &attr);
«IF att.rwTtype.contains("WRITE")-»
	/**
	 *	Write «att.name» attribute values to hardware.
 	 */
	virtual void write_«att.name»(Tango::WAttribute &attr);
«ENDIF»
	 /**
	 *	Execution allowed for «att.name» attribute.
	 */
	virtual bool is_«att.name»_allowed(Tango::AttReqType type);
«ENDDEFINE»

//	=========================================================
//	Define the protype for a execute command method
//	=========================================================
«DEFINE executeCommandProto(Command cmd) FOR PogoDeviceClass-»
«EXPAND commands::executeCommandHeaderProto(cmd)»
«EXPAND commands::executeCommandSignatureProto(cmd)»;
«ENDDEFINE»

//	=========================================================
//	Define the protype for a is_allowed command method
//	=========================================================
«DEFINE isCommandAllowedProto(Command cmd) FOR PogoDeviceClass»
	/**
	 *	Execution allowed for «cmd.name» command.
	 */
	virtual bool is_«cmd.name»_allowed(const CORBA::Any &any);
«ENDDEFINE»


//	=========================================================
//	Define the protype for miscellaneous methods
//	=========================================================
«DEFINE miscellaneousProto FOR PogoDeviceClass»
	/**
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/**
	 *	Initialize the device
	 */
	virtual void init_device();
	/**
	 *	Read the device properties from database
	 */
	 void get_device_property();
	/**
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();
«ENDDEFINE»

//	=========================================================
//	Define the protype for constructors
//	=========================================================
«DEFINE constructorsProto FOR PogoDeviceClass»
	/**
	 * Constructs a newly allocated Command object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	«name»(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly allocated Command object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	«name»(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly allocated Command object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	«name»(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The object destructor.
	 */	
	~«name»() {delete_device();};

«ENDDEFINE»


