#!/bin/sh

TANGO_HOME=/segfs/tango
export TANGO_HOME

#CLASSPATH=$TANGO_HOME/bin/java/Pogo.jar:$TANGO_HOME/release/java/lib/TangORB.jar
CLASSPATH=$TANGO_HOME/tools/bin:$TANGO_HOME/release/java/lib/TangORB.jar
export CLASSPATH

PATH=$PATH:$TANGO_HOME/jdk/Linux/j2sdk1.4.2/bin:$TANGO_HOME/bin

MAIL_FILE_NAME=/tmp/new_tango_ds.html
EMPTY_FILE=/tmp/new_tango_ds.txt

#---------------------------------------------------------
#	Fix OS PATH
#---------------------------------------------------------
TANGO_HOME=/segfs/tango
MY_OS=`uname`
export MY_OS

if [ $MY_OS = "SunOS" ]
then
	OS_DIR=solaris8
	CPP_DOC=$TANGO_HOME/doc/www/doxygen/$OS_DIR/doxygen-1.2.14/bin
else
	if [ $MY_OS == "Linux" ]
	then
		OS_DIR=suse72
		CPP_DOC=$TANGO_HOME/doc/www/doxygen/$OS_DIR/bin
	fi
fi

#---------------------------------------------------------
#	Add sourceforge tmp repository to CVSROOT
#---------------------------------------------------------
SF_TMP_CVS_ROOT=$TANGO_HOME/tmp/servers_list
export SF_TMP_CVS_ROOT

LOCAL_CVSROOT=$TANGO_HOME/backup/esrf
TANGO_CS_CVSROOT=$TANGO_HOME/backup/tango-cs
TANGO_DS_CVSROOT=$TANGO_HOME/backup/tango-ds


#---------------------------------------------------------
#	Set the CVSROOT to many repository
#	and give them a title
#---------------------------------------------------------
CVSROOT=$TANGO_CS_CVSROOT:$TANGO_DS_CVSROOT:$LOCAL_CVSROOT
export CVSROOT

TABLE_TITLES="SourceForge(Tango-cs)":"SourceForge(Tango-ds)":ESRF
export TABLE_TITLES

#---------------------------------------------------------
#	Set the final target
#---------------------------------------------------------
TARGET_FILE=$TANGO_HOME/doc/www/tango/tango_doc/ds_doc
export TARGET_FILE

#---------------------------------------------------------
#	Set the template path
#---------------------------------------------------------
export CPP_DOC
TEMPLATES=$TANGO_HOME/tools/pogo/templates
export TEMPLATES




#=========================================================
#
#             Internal function
#
#=========================================================
ERR_FILE=/tmp/servers2www.err
MailErrors() {
#---------------------------------------------------------
#	Mail error file
#---------------------------------------------------------
	/bin/mailx -s  "Update Tango servers failed"  \
			verdier@esrf.fr < $ERR_FILE
	cd $SF_TMP_CVS_ROOT
	rm -Rf *
}

MailChanges() {
#---------------------------------------------------------
#	Mail New Classes list file
#---------------------------------------------------------
MAIL_LIST=tango@esrf.fr
#MAIL_LIST=verdier@esrf.fr

#	check if file exists
	ls $MAIL_FILE_NAME
	RETVAL=$?
	export RETVAL

	if [ $RETVAL = 0 ]
	then
		touch $EMPTY_FILE
		/users/verdier/bin/nail		              \
			-s  "New Tango Device Server Classes" \
			-a $MAIL_FILE_NAME 	                  \
			$MAIL_LIST < $EMPTY_FILE

		rm $MAIL_FILE_NAME
		rm $EMPTY_FILE
	fi
}




BuildPages() {
#---------------------------------------------------------
#	Start pogo class
#---------------------------------------------------------
	rm -f /tmp/pogo.log
	cd $SF_TMP_CVS_ROOT
	java  -DTEMPL_HOME=$TEMPLATES          \
		  -DSOLEIL_TITLE=$SOLEIL_TITLE     \
		  -DSOLEIL_ADDRESS=$SOLEIL_ADDRESS \
    	  -DCPP_DOC_PATH=$CPP_DOC          \
		  -DCVSROOT=$CVSROOT               \
		  -DTABLE_TITLES=$TABLE_TITLES     \
		  -DTANGO_HOST=corvus:10000        \
    	  pogo.servers2www.Servers2www
#---------------------------------------------------------
#	Test the returned value. If OK (0) 
#---------------------------------------------------------
	RETVAL=$?
	export RETVAL
	if [ $RETVAL = 0 ]
	then
		return=ok
	else
		#exit 0
		MailErrors
		return=failed
	fi
}


CheckNewClasses() {
#---------------------------------------------------------
#	Check if new classes from last time
#---------------------------------------------------------
	rm $MAIL_FILE_NAME
	cd $SF_TMP_CVS_ROOT
	ls -F $TARGET_FILE |grep "/" >/tmp/ds_list_1
	ls -F ServersList  |grep "/" >/tmp/ds_list_2

	cd ServersList
	java -DTEMPL_HOME=$TEMPLATES          \
        	pogo.servers2www.CheckNews    \
        	/tmp/ds_list_1  /tmp/ds_list_2   $MAIL_FILE_NAME 

	rm /tmp/ds_list_1 /tmp/ds_list_2
}




MoveFiles() {
#---------------------------------------------------------
#	Test the returned value. If OK (0) then 
#	move results to final directory and remove tmp dirs
#---------------------------------------------------------
	echo "moving ServersList to  $TARGET_FILE"
	cd $SF_TMP_CVS_ROOT
	rm -Rf $TARGET_FILE
	rm  ServersList/*/*.tar.gz
	mv  ServersList  $TARGET_FILE
#	---	Add help file ----------
	cp $TEMPLATES/html/HowIsGenerated.html  $TARGET_FILE
	cp $TEMPLATES/html/SearchItem.html      $TARGET_FILE
	cp $TEMPLATES/html/*.jpg                $TARGET_FILE

	echo "Clean directory"
	rm -Rf $SF_TMP_CVS_ROOT/*
}


DisplayFinalResult() {
#---------------------------------------------------------
#	Display results on console
#---------------------------------------------------------

	echo
	echo
	echo
	END_DATE=`date`
	export END_DATE
	echo "Started at $START_DATE"
	echo "Stopped at $END_DATE"
#	--- Mail Update done ----------
	/bin/mailx -s  "Update Tango servers done"  \
			verdier@esrf.fr < /tmp/servers2www.log
#	nc /tmp/servers2www.err
}

UpdateWebSite() {
#---------------------------------------------------------
#	Update Web Site
#---------------------------------------------------------
	echo "updating ESRF WEB site............."
#	rsh corvus "$TANGO_HOME/doc/www/bin/tango2www"
	$TANGO_HOME/bin/tango2www   ds_doc
}


BuildAlphabeticList() {
#---------------------------------------------------------
#	Check if new classes from last time
#---------------------------------------------------------
TMP_FILE_NAME=/tmp/ds_list_2;     export TMP_FILE_NAME
LIST_FILE_NAME=FullList.html;         export LIST_FILE_NAME
	cd $SF_TMP_CVS_ROOT
	ls -F ServersList  |grep "/" >$TMP_FILE_NAME

	cd ServersList
	java -DTEMPL_HOME=$TEMPLATES          \
        	pogo.servers2www.CheckNews  $TMP_FILE_NAME  $LIST_FILE_NAME

	rm $TMP_FILE_NAME
}



#=====================================
#
#            Main part
#
#=====================================
case "$1" in

#	----------------------------------------------
#	Start  --> Complete treatement
#	----------------------------------------------
	start)
		BuildPages
		if [ ${return} = ok ]
		then
			BuildAlphabeticList
			CheckNewClasses
			MoveFiles
			UpdateWebSite
			MailChanges
#			DisplayFinalResult
		fi
	;;

	move)
		MoveFiles
	;;

	check)
		CheckNewClasses
	;;

	pages)
		BuildPages
	;;

	mail)
		MailChanges
	;;

	list)
		BuildAlphabeticList
	;;


	test)
		BuildPages
		if [ ${return} = ok ]
		then
			BuildAlphabeticList
#			CheckNewClasses
			MoveFiles
#			UpdateWebSite
#			MailChanges
#			DisplayFinalResult
			echo " DONE !"
		fi
	;;

	update)
#	----------------------------------------------
#	Update only Web Site
#	----------------------------------------------
		UpdateWebSite
    ;;

    *)
#	----------------------------------------------
#	Default case  --> Display syntax
#	----------------------------------------------
    echo "Usage: $0 {start|update}"
    exit 0
esac

