grammar fr.esrf.tango.pogo.PogoDsl with org.eclipse.xtext.common.Terminals

generate pogoDsl "http://www.esrf.fr/tango/pogo/PogoDsl"

PogoSystem:
	(imports+=Import)*
	(classes+=PogoDeviceClass)*;

Import:
	"import" importURI=STRING;
//
//	Class definition
//
PogoDeviceClass:
	"deviceclass" name=ID (isAbstract?="abstract")? ("extends" baseClass=[PogoDeviceClass])?
	"{"
		institute = ID							//	For future specific features 

		"description:"							//	Class information
			(description=ClassDescription)

		"classProperties:"						//	Class property list
			(classProperties+=Property)*

		"deviceProperties:"						//	Device Property list
			(deviceProperties+=Property)*

		"commands:"								//	Device command list
			(commands+=Command)*

		"attributes:"							//	Device attribute list
			(attributes+=Attribute)*

		"states:"								//	Device state list
			(states+=State)*
	"}";

//
//	Miscellaneous definitions
//
Language:		"Cpp"      | "Java"     | "Python";
DisplayLevel:	"OPERATOR" | "EXPERT";
AttrType:		"Scalar"   | "Spectrum" | "Image";
RW_Type:		"READ"     | "WRITE"    | "READ_WRITE" | "READ_WITH_WRITE";
Boolean:		"true"     | "false";


//
//	Class information
//
ClassDescription:
	description    = STRING	//	Class description
	title          = STRING	//	Short description
	sourcePath     = STRING	//	Files location
	inheritance    = Inheritance	//	inheritance clas definition
	language       = Language		//	Language to generate
	filestogenerate= STRING			//	File(s) to generate (code, makefile,....)
	identification = ClassIdentification
	comments       = Comments
	hasAbstractCommand   = Boolean
	hasAbstractAttribute = Boolean;
	
//
//	Inheritance Definition
//
Inheritance:
	classname  = STRING
	sourcePath = STRING;

//
//	Class identification
//
ClassIdentification:
	contact      = STRING	//	email address of the person in charge
	classFamily  = STRING	//	class family to be sorted in html doc
	siteSpecific = STRING	//	If specific for an institute, name of this institute
	platform     = STRING	//	OS where it can run
	bus          = STRING	//	Hardware bus to control.
	manufacturer = STRING	//	mannufacturer if any
	reference    = STRING;	//	product reference if any 

//
//	Comment Definition
//
Comments:
	commandsTable = STRING;

//
//	State Definition
//
State:
	name        = ID
	description = STRING
	status      = InheritanceStatus;

//
//	Property Definition
//
Property:
	name        = ID
	type        = PropType
	status      = InheritanceStatus
	description = STRING
	"defaultPropValue:"
		(DefaultPropValue+=STRING)*;

//	types could be one of the types
PropType:
	SimpleType | VectorType;
	
SimpleType:
	BooleanType | ShortType  | UShortType  |
	IntType     | UIntType   | FloatType   |
	DoubleType  | StringType;

VectorType:	
	ShortVectorType |
	IntVectorType   | FloatVectorType  |
	DoubleVectorType| StringVectorType;


InheritanceStatus:
	abstract     = Boolean	//	is abstract or inherited from abstract
	inherited    = Boolean	//	is hinerited
	concrete     = Boolean	//	is concrete or overloaded
	concreteHere = Boolean	//	is concrete or overloaded in this class
	hasChanged   = Boolean;	//	the type has changed
	

//
//	Command Definition
//
Command:
		name         = ID
		argin        = Argument
		argout       = Argument 
		description  = STRING
		status       = InheritanceStatus
		execMethod   = STRING 
		displayLevel = DisplayLevel
		polledPeriod = STRING
		"excludedStates:"
			(excludedStates+=STRING)*;

Argument:
	type=Type description=STRING; 

//
//	Attribute Definition
//
Attribute:
	name             = ID
	attType          = AttrType
	dataType         = Type
	rwType           = RW_Type
	displayLevel     = DisplayLevel
	polledPeriod     = STRING
	maxX             = STRING
	maxY             = STRING
	memorized        = Boolean
	memorizedAtInit  = Boolean
	changeEvent      = FireEvents
	archiveEvent     = FireEvents
	status           = InheritanceStatus
	properties       = AttrProperties
	
	"excludedStates:"
		(excludedStates+=STRING)*;

FireEvents:
	fire             = Boolean
	libCheckCriteria = Boolean;

//
//	Attribute Properties Definition
//
AttrProperties:
	description   = STRING
	label         = STRING
	unit          = STRING
	standardUnit  = STRING
	displayUnit   = STRING
	format        = STRING
	maxValue      = STRING
	minValue      = STRING
	maxAlarm      = STRING
	minAlarm      = STRING
	maxWarning    = STRING
	minWarning    = STRING
	deltaTime     = STRING
	deltaValue    = STRING;

//
//	types could be one of the types
//
Type:
	VoidType   | BooleanType |
	ShortType  | UShortType  |
	IntType    | UIntType    |
	FloatType  | DoubleType  |
	StringType |
	
	CharArrayType  | ShortArrayType | UShortArrayType |
	IntArrayType   | UIntArrayType  | FloatArrayType  |
	DoubleArrayType| StringArrayType| LongStringArrayType |
	DoubleStringArrayType |
	
	StateType      | ConstStringType| BooleanArrayType |
	LongType       | ULongType      | UCharType        |
	LongArrayType  | ULongArrayType |
	DevIntType     | EncodedType;
	
//
//	Tango type defined by IDL.
//
VoidType:				{VoidType} "void";
BooleanType:			{BooleanType} "boolean";
ShortType:				{ShortType} "short";
UShortType:				{UShortType} "ushort";
IntType:				{IntType} "int";
UIntType:				{UIntType} "uint";
FloatType:				{FloatType} "float";
DoubleType:				{DoubleType} "double";
StringType:				{StringType} "string";

CharArrayType:			{CharArrayType} "DevVarCharArray";
ShortArrayType:			{ShortArrayType} "DevVarShortArray";
UShortArrayType:		{UShortArrayType} "DevVarUShortArray";
IntArrayType:			{IntArrayType} "DevVarLongArray";
UIntArrayType:			{UIntArrayType} "DevVarULongArray";
FloatArrayType:			{FloatArrayType} "DevVarFloatArray";
DoubleArrayType:		{DoubleArrayType} "DevVarDoubleArray";
StringArrayType:		{StringArrayType} "DevVarStringArray";
LongStringArrayType:	{LongStringArrayType} "DevVarLongStringArray";
DoubleStringArrayType:	{DoubleStringArrayType} "DevVarDoubleStringArray";
StateType:				{StateType} "DevState";
ConstStringType:		{ConstStringType} "ConstDevString";
BooleanArrayType:		{BooleanArrayType} "DevVarBooleanArray";
UCharType:				{UCharType} "DevUChar";

LongType:				{LongType} "DevLong64";
ULongType:				{ULongType} "DevULong64";
LongArrayType:			{LongArrayType} "DevVarLong64Array";
ULongArrayType:			{ULongArrayType} "DevVarULong64Array";
DevIntType:				{DevIntType} "DevInt";
EncodedType:			{EncodedType} "DevEncoded";

ShortVectorType:		{ShortVectorType} 	"vector<short>";
IntVectorType:			{IntVectorType} 	"vector<int>";
FloatVectorType:		{FloatVectorType} 	"vector<float>";
DoubleVectorType:		{DoubleVectorType} 	"vector<double>";
StringVectorType:		{StringVectorType} 	"vector<string>";
