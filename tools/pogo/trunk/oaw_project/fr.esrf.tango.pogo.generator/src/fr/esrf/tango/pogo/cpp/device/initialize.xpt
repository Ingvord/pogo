«IMPORT pogoDsl»
«EXTENSION fr::esrf::tango::pogo::cpp::_CppConstants»
«EXTENSION fr::esrf::tango::pogo::cpp::_CppUtil»


//	=========================================================
//	Define The initialization for device.
//	=========================================================
«DEFINE cppFile FOR PogoDeviceClass»
«EXPAND deviceConstructors»
«EXPAND deleteDeviceMethod»
«EXPAND initDeviceMethod»
«ENDDEFINE»



//	=========================================================
//	Define The init_device method
//	=========================================================
«DEFINE initDeviceMethod FOR PogoDeviceClass»
«EXPAND fr::esrf::tango::pogo::cpp::Common::methodHeader("init_device",
			"//	will be called at device initialization.")-»
void «name»::init_device()
{
	DEBUG_STREAM << "«name»::init_device() create device " << device_name << endl;
	«IF description.hasInheritanceClass()==true-»
	if (Tango::Util::instance()->is_svr_starting() == false)
	{
		//	If not starting up call init device for inherited object
		«superClassNameConstr(description.getInheritance())»_ns::«superClassNameConstr(description.getInheritance())»::init_device();
	}«ENDIF»

	«IF description.hasConcreteProperty=="true"-»
	«EXPAND fr::esrf::tango::pogo::cpp::Common::ProtectedArea("init_device_before", "//	Initialization before get_device_property() call")-»
	
	//	Get the device properties (if any) from database
	get_device_property();
	«IF description.hasMandatoryProperty=="true"»if (mandatoryNotDefined)
		return;
	«ENDIF»
	«ENDIF-»
	«EXPAND attributes::allocateReadMembers-»
	«EXPAND fr::esrf::tango::pogo::cpp::Common::ProtectedArea("init_device", "//	Initialize device")-»
}
«ENDDEFINE»


//	=========================================================
//	Define The delete_device method
//	=========================================================
«DEFINE deleteDeviceMethod FOR PogoDeviceClass»
«EXPAND fr::esrf::tango::pogo::cpp::Common::methodHeader("delete_device()",
		"will be called at device destruction or at init command")»void «name»::delete_device()
{
	DEBUG_STREAM << "«name»::delete_device() " << device_name << endl;
	«EXPAND fr::esrf::tango::pogo::cpp::Common::ProtectedArea(
		"delete_device",
		"//	Delete device allocated objects")-»
	«EXPAND attributes::deleteReadMembers-»
	«IF description.hasInheritanceClass()==true-»
	if (Tango::Util::instance()->is_svr_shutting_down() == false)
	{
		//	If not shutting down call delete device for inherited object
		«superClassNameConstr(description.getInheritance())»_ns::«superClassNameConstr(description.getInheritance())»::delete_device();
	}«ENDIF»
}
«ENDDEFINE»


//	=========================================================
//	Define The device constructors
//	=========================================================
«DEFINE deviceConstructors FOR PogoDeviceClass»
«EXPAND fr::esrf::tango::pogo::cpp::Common::methodHeader(name,
 	"Constructors for a Tango device\n"+
 	"implementing the class " + name)»«name»::«name»(Tango::DeviceClass *cl, string &s)«EXPAND inheritanceManagement("cl, s.c_str()")-»
{
	«EXPAND fr::esrf::tango::pogo::cpp::Common::ProtectedArea("constructor_1", "init_device();")-»
}
«separator2()»
«name»::«name»(Tango::DeviceClass *cl, const char *s)«EXPAND inheritanceManagement("cl, s")-»
{
	«EXPAND fr::esrf::tango::pogo::cpp::Common::ProtectedArea("constructor_2", "init_device();")-»
}
«separator2()»
«name»::«name»(Tango::DeviceClass *cl, const char *s, const char *d)«EXPAND inheritanceManagement("cl, s, d")-»
{
	«EXPAND fr::esrf::tango::pogo::cpp::Common::ProtectedArea("constructor_3", "init_device();")-»
}
«ENDDEFINE»




//
//	Define the inheritance added to the constructors
//
«DEFINE inheritanceManagement(String params) FOR PogoDeviceClass»
«IF description.inheritances.size==0»	: «tangoDeviceImpl()»(«params»)
«ELSEIF description.hasInheritanceClass()==false» 	: «tangoDeviceImpl()»(«params»)
«ELSE» : «superClassNameConstr(description.getInheritance())»(«params»)
«ENDIF-»
«ENDDEFINE»
