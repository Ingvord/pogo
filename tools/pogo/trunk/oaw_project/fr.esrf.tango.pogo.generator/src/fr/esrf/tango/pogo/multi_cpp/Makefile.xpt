«IMPORT pogoDsl»
«EXTENSION fr::esrf::tango::pogo::cpp::_CppUtil»
«EXTENSION fr::esrf::tango::pogo::cpp::_CppConstants»


«DEFINE multiCppFile FOR PogoMultiClasses»
«FILE "Makefile.multi"»«PROTECT CSTART '#' CEND '#' ID concatString(name, "::Makefile.multi")»
#=============================================================================
#
# file :        Makefile
#
# description : Makefile to generate a TANGO device server.
#
# project :     «title»
#
# «cvsEscaped("Author:")»
#
# «cvsEscaped("Revision:")»
#
# «cvsEscaped("Log:")»
#
#=============================================================================
#                This file is generated by POGO
#        (Program Obviously used to Generate tango Object)
#=============================================================================
#
#
#=============================================================================
# MAKE_ENV is the path to find common environment to buil project
#
MAKE_ENV = «IF preferences.makefileHome=="" || preferences.makefileHome==null»$(TANGO_HOME)«ELSE»«preferences.makefileHome»«ENDIF»

#=============================================================================
# PACKAGE_NAME is the name of the library/device/exe you want to build
#
PACKAGE_NAME = «name»
MAJOR_VERS   = 1
MINOR_VERS   = 0
RELEASE      = Release_$(MAJOR_VERS)_$(MINOR_VERS)

# #=============================================================================
# # RELEASE_TYPE
# # - DEBUG     : debug symbols - no optimization
# # - OPTIMIZED : no debug symbols - optimization level set to O2
# #-----------------------------------------------------------------------------
RELEASE_TYPE = DEBUG

#=============================================================================
# OUTPUT_TYPE can be one of the following :
#   - 'STATIC_LIB' for a static library (.a)
#   - 'SHARED_LIB' for a dynamic library (.so)
#   - 'DEVICE' for a device server (will automatically include and link
#            with Tango dependencies)
#   - 'SIMPLE_EXE' for an executable with no dependency (for exemple the test tool
#                of a library with no Tango dependencies)
#
OUTPUT_TYPE = DEVICE

#=============================================================================
# OUTPUT_DIR  is the directory which contains the build result.
# if not set, the standard location is :
#	- $HOME/DeviceServers if OUTPUT_TYPE is DEVICE
#	- ../bin for others
#
OUTPUT_DIR = ./bin/$(BIN_DIR)

«EXPAND addClassDefinitions»


#=============================================================================
# INC_DIR_USER is the list of all include path needed by your sources
#   - for a device server, tango dependencies are automatically appended
#   - '-I ../include' and '-I .' are automatically appended in all cases
#
#
INC_DIR_USER= -I . «EXPAND addClassIncludeFiles»


#=============================================================================
# LIB_DIR_USER is the list of user library directories
#   - for a device server, tango libraries directories are automatically appended
#   - '-L ../lib' is automatically appended in all cases
#
LIB_DIR_USER=

#=============================================================================
# LFLAGS_USR is the list of user link flags
#   - for a device server, tango libraries directories are automatically appended
#   - '-ldl -lpthread' is automatically appended in all cases
#
# !!! ATTENTION !!!
# Be aware that the order matters. 
# For example if you must link with libA, and if libA depends itself on libB
# you must use '-lA -lB' in this order as link flags, otherwise you will get
# 'undefined reference' errors
#
#LFLAGS_USR+=


#=============================================================================
# CXXFLAGS_USR lists the compilation flags specific for your library/device/exe
# This is the place where to put your compile-time macros using '-Dmy_macro'
#
# -DACE_HAS_EXCEPTIONS -D__ACE_INLINE__ for ACE
#
#CXXFLAGS_USR+= -Wall


#=============================================================================
# TANGO_REQUIRED 
# - TRUE  : your project depends on TANGO
# - FALSE : your project does not depend on TANGO
#-----------------------------------------------------------------------------
# - NOTE : if PROJECT_TYPE is set to DEVICE, TANGO will be auto. added
#-----------------------------------------------------------------------------  
TANGO_REQUIRED = TRUE



#=============================================================================
#	include Standard TANGO compilation options
#
include $(MAKE_ENV)/tango.opt

#=============================================================================
#	POST_PROCESSING: action to be done after normal make.
#	e.g.:  change executable file name, .....
#POST_PROCESSING = \
#	mv bin/$(BIN_DIR)/$(PACKAGE_NAME) bin/$(BIN_DIR)/$(PACKAGE_NAME)_DS

#=============================================================================
# SVC_OBJS is the list of all objects needed to make the output
#

SVC_OBJS =  $(OBJDIR)/MultiClassesFactory.o \
            $(OBJDIR)/main.o «EXPAND addClassObjectFiles»
            

#=============================================================================
#	include common targets
#
include $(MAKE_ENV)/common_target.opt

«EXPAND classDependancies-»

«ENDPROTECT»
«ENDFILE»
«ENDDEFINE»







#=============================================================================
#	Define the definition for all classes
#=============================================================================
«DEFINE addClassDefinitions FOR PogoMultiClasses-»
#=============================================================================
#	Tango Class list
#
«FOREACH classes AS _class-»
«EXPAND addInheritanceDefinitions(_class)-»
«_class.classname.toUpperCase()»_HOME  = «_class.sourcePath»
«ENDFOREACH-»
«ENDDEFINE»

#=============================================================================
#	Define the definition for inheritance classes
#=============================================================================
«DEFINE addInheritanceDefinitions(OneClassSimpleDef _class) FOR PogoMultiClasses-»
«FOREACH _class.inheritances AS inher-»«IF inher.isInheritanceClass()-»
«inher.classname.toUpperCase()»_HOME  = «inher.sourcePath»«ENDIF»
«ENDFOREACH-»
«ENDDEFINE»




#=============================================================================
#	Add class include files
#=============================================================================
«DEFINE addClassIncludeFiles FOR PogoMultiClasses-»
«FOREACH classes AS _class-»«EXPAND addInheritancIncludeFiles(_class)-»\
              -I $(«_class.classname.toUpperCase()»_HOME) «ENDFOREACH»
«ENDDEFINE»

#=============================================================================
#	Add inheritance include files if any
#=============================================================================
«DEFINE addInheritancIncludeFiles(OneClassSimpleDef _class) FOR PogoMultiClasses-»
«FOREACH _class.inheritances AS inher-»«IF inher.isInheritanceClass()-»\
              -I $(«inher.classname.toUpperCase()»_HOME)«ENDIF-»
«ENDFOREACH-»
«ENDDEFINE»




#=============================================================================
#	Add Class object files
#=============================================================================
«DEFINE addClassObjectFiles FOR PogoMultiClasses-»
	«FOREACH classes AS _class-» \
            $(SVC_«_class.classname.toUpperCase()»_OBJ)«ENDFOREACH-» \
            $(ADDITIONAL_OBJS)

	«FOREACH classes AS _class-»

#------------  Object files for «_class.classname» class  ------------
SVC_«_class.classname.toUpperCase()»_OBJ = \
		$(OBJDIR)/«_class.classname».o \
		$(OBJDIR)/«_class.classname»Class.o \
		$(OBJDIR)/«_class.classname»StateMachine.o«EXPAND addInheritedClassObjectFiles(_class)-»
	«ENDFOREACH-»

«EXPAND addAdditionalObjectFiles»

«ENDDEFINE»




#=============================================================================
#	Add Additional object files if any (Utils, threads, ...)
#=============================================================================
«DEFINE addAdditionalObjectFiles FOR PogoMultiClasses-»

#------------  Object files for additional files (add your own ones) ------------
ADDITIONAL_OBJS = «FOREACH classes AS _class-»«FOREACH _class.additionalFiles AS file-» \
	$(OBJDIR)/«file.name».o«ENDFOREACH-»«ENDFOREACH-»
«ENDDEFINE»





#=============================================================================
#	Add inherited Class object files
#=============================================================================
«DEFINE addInheritedClassObjectFiles(OneClassSimpleDef _class) FOR PogoMultiClasses-»
«FOREACH _class.inheritances AS inher-»«IF inher.isInheritanceClass()-» \
		$(OBJDIR)/«inher.classname».o \
		$(OBJDIR)/«inher.classname»Class.o \
		$(OBJDIR)/«inher.classname»StateMachine.o «ENDIF-»«ENDFOREACH-»
«ENDDEFINE»


#=============================================================================
#	Define the dependancies for class object files
#=============================================================================
«DEFINE classDependancies FOR PogoMultiClasses-»

#=============================================================================
# Following are dependancies of the abstract classes used by project
#
«FOREACH classes AS _class-»

#------------  Object files dependancies for «_class.classname» class  ------------
«EXPAND classDependancyIncludes(_class)-»
«EXPAND classDependancy(_class, "")-»
«EXPAND classDependancy(_class, "Class")-»
«EXPAND classDependancy(_class, "StateMachine")-»
	«FOREACH _class.inheritances AS inher-»«IF inher.isInheritanceClass()»
«EXPAND inheritanceDependancy(inher, "")-»
«EXPAND inheritanceDependancy(inher, "Class")-»
«EXPAND inheritanceDependancy(inher, "StateMachine")-»
	«ENDIF»«ENDFOREACH-»
«ENDFOREACH»

«EXPAND additionalFileDependancy»

«ENDDEFINE»


#=============================================================================
#	Define the dependancy for each inherited class include files
#	For each class (includes are own ones and inherited ones)
#=============================================================================
«DEFINE classDependancyIncludes(OneClassSimpleDef _class) FOR PogoMultiClasses-»
«FOREACH _class.inheritances AS inher-»«IF inher.isInheritanceClass()-»
«inher.makeVariable("_INCL")» = $(«inher.makeVariable("_HOME")»)/«inher.classname».h $(«inher.makeVariable("_HOME")»)/«inher.classname»Class.h
«ENDIF-»«ENDFOREACH-»
«_class.makeVariable("_INCL")» = \
		$(«_class.makeVariable("_HOME")»)/«_class.classname».h \
		$(«_class.makeVariable("_HOME")»)/«_class.classname»Class.h«FOREACH _class.inheritances AS inher-»«IF inher.isInheritanceClass()-» \
		$(«inher.makeVariable("_INCL")»)«ENDIF-»«ENDFOREACH-»

«ENDDEFINE»

#=============================================================================
#	Define the dependancy for each class object file
#=============================================================================
«DEFINE classDependancy(OneClassSimpleDef _class, String str) FOR PogoMultiClasses-»
$(OBJDIR)/«_class.classname»«str».o: $(«_class.classname.toUpperCase()»_HOME)/«_class.classname»«str».cpp $(«_class.makeVariable("_INCL")»)
	$(CC) $(CFLAGS) -c $< -o $(OBJDIR)/«_class.classname»«str».o
«ENDDEFINE»

#=============================================================================
#	Define the dependancy for inherited class object file
#=============================================================================
«DEFINE inheritanceDependancy(Inheritance inher, String str) FOR PogoMultiClasses-»
$(OBJDIR)/«inher.classname»«str».o: $(«inher.classname.toUpperCase()»_HOME)/«inher.classname»«str».cpp $(«inher.makeVariable("_INCL")»)
	$(CC) $(CFLAGS) -c $< -o $(OBJDIR)/«inher.classname»«str».o
«ENDDEFINE»

#=============================================================================
#	Define the dependancy for each additional files
#=============================================================================
«DEFINE additionalFileDependancy FOR PogoMultiClasses-»
#------------  Object files dependancies for additional files  ------------
«FOREACH classes AS _class-»«FOREACH _class.additionalFiles AS file-»
«file.name.toUpperCase()»_HOME = «_class.sourcePath»
$(OBJDIR)/«file.name».o: $(«file.name.toUpperCase()»_HOME)/«file.name».cpp $(«_class.makeVariable("_INCL")»)
	$(CC) $(CFLAGS) -c $< -o $(OBJDIR)/«file.name».o
«ENDFOREACH-»«ENDFOREACH-»
«ENDDEFINE»




