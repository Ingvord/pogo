«IMPORT pogoDsl»

«EXTENSION fr::esrf::tango::pogo::java::javaUtils»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«DEFINE javaFile FOR PogoDeviceClass»
«FILE javaDeviceClassFileName()»
package «javaDevicePackage()»;

import java.util.Vector;

import org.omg.CORBA.SystemException;
import org.omg.CORBA.UserException;

import fr.esrf.Tango.DevFailed;
import fr.esrf.TangoApi.DbDatum;
import fr.esrf.TangoDs.Attribute;
import fr.esrf.TangoDs.DeviceClass;
import fr.esrf.TangoDs.DeviceImpl;
import fr.esrf.TangoDs.Except;
import fr.esrf.TangoDs.TangoConst;
import fr.esrf.TangoDs.Util;

/**
 *	Class Description: «description.description»
 *	
 * @author	«vcsEscaped("Author")»
 * @version	 «vcsEscaped("Revision")»
 */
public class «javaDeviceName()» extends DeviceImpl implements TangoConst{

	// properties
	«FOREACH deviceProperties AS prop »
		«prop.type.javaPropType()» «prop.name.toFirstLower()»;
	«ENDFOREACH-»
	// attributes
	«FOREACH attributes AS attr»
		«javaType(attr.dataType).toString()»  attr«attr.name»;
	«ENDFOREACH-»		

/**
 *	Constructor for Device Server.
 *
 *	@param	cl	The DeviceClass object
 *	@param	s	The Device name.
 */
	«javaDeviceName()»(DeviceClass cl, String s) throws DevFailed
	{
		super(cl,s);

		init_device();
	}

//=========================================================
/**
 *	Constructor for simulated Time Device Server.
 *
 *	@param	cl	The DeviceClass object
 *	@param	s	The Device name.
 *	@param	d	Device description.
 */
//=========================================================
	«javaDeviceName()»(DeviceClass cl, String s, String d) throws DevFailed
	{
		super(cl,s,d);
		init_device();
	}



	/**
 	*	Initialize the device.
 	*/
	public void init_device() throws DevFailed
	{
		System.out.println("«javaDeviceName()» create " + device_name);

		«IF deviceProperties.size>0 »
		//	Initialise variables to default values
		//-------------------------------------------
		get_device_property();
		«ENDIF»
		
		«EXPAND pr( javaDeviceName()+".init_device", "put your device initialization code here" )»
		

	}
	
	«IF deviceProperties.size>0 »
	/**
 	*	Read the device properties from database.
 	*/		
	public void get_device_property() throws DevFailed
	{
		«EXPAND pr( name+".get_device_property", "Initialize your default values here" )»

		//	Read device properties from database.
		//-------------------------------------------------------------
		if (Util._UseDb==false)
			return;
		String[]	propnames = {
				«FOREACH deviceProperties AS prop SEPARATOR ","»
					"«prop.name»"
				«ENDFOREACH-»
			};

		//	Call database and extract values
		//--------------------------------------------
		DbDatum[]	dev_prop = get_db_device().get_property(propnames);
		«javaDServerClassName()»	ds_class = («javaDServerClassName()»)get_device_class();
		
		int	i = -1;
		«FOREACH deviceProperties AS prop»
			if (dev_prop[++i].is_empty()==false) {
				«prop.name.toFirstLower()» = dev_prop[i].«prop.type.javaExtractorFunctionName()»();
			} else {
				//	Try to get value from class property
				DbDatum	cl_prop = ds_class.get_class_property(dev_prop[i].name);
				if (cl_prop.is_empty()==false)	«prop.name.toFirstLower()» = cl_prop.«prop.type.javaExtractorFunctionName()»();
			}
		«ENDFOREACH»
		
		«EXPAND pr( name + ".get_device_property_afterLoad", "Do what U want here" )»
	}
	«ENDIF»
	
	
	/**
 	*	Method always executed before command execution.
 	*/
	public void always_executed_hook() {	
		//get_logger().info("In always_executed_hook method()");
	}
	
	«FOREACH commands AS command»
	/**
	 *	Execute command "«command.name»".
	 *	«command.description»
	 *  @param argin «command.argin.description»
	 *  @param argout «command.argout.description»
	 */
	
	public «javaType(command.argout.type).toString()» «command.name»(«commandArginGen(command)») throws DevFailed {
		//get_logger().info("Entering «command.name»");
	
	}
	«ENDFOREACH»
	
	«IF attributes.size>0 »
	/**
	 *	Method called by the read_attributes CORBA operation to
	 *	read device hardware
	 *
	 *	@param	attr_list	Vector of index in the attribute vector
	 *		of attribute to be read
	 */			
	public void read_attr_hardware(Vector attr_list) throws DevFailed {
		get_logger().info("In read_attr_hardware for "+attr_list.size()+" attribute(s)");

		//	Switch on attribute name
		//---------------------------------
	}
	
	/**
	 *	Method called by the read_attributes CORBA operation to
	 *	set internal attribute value.
	 *
	 *	@param	attr	reference to the Attribute object
	 */
	public void read_attr(Attribute attr) throws DevFailed{
		String attr_name = attr.get_name();
		get_logger().info("In read_attr for attribute " + attr_name);

		//	Switch on attribute name
		//---------------------------------
		«FOREACH attributes AS attr SEPARATOR "else"»
		if (attr_name =="«attr.name»"){
		«attr.attType»
			attr.set_value(attr«attributeSetValueGen(attr)»);
		}
		«ENDFOREACH-»		
	}
	«ENDIF»
	
	/**
	 *	main part for the device server class
	 */
	public static void main(String[] argv){
		Util tg = Util.init(argv,"«javaDeviceName()»");
		try {
			tg.server_init();
			System.out.println("Ready to accept request");
			tg.server_run();
		} catch (DevFailed e) {
			Except.print_exception(e);
			System.err.println("Exiting");
		}		
	}	
}


«ENDFILE»
«ENDDEFINE»


«DEFINE pr(String id, String desc) FOR Object»
«PROTECT CSTART '/*' CEND '*/' ID id»
	// «desc»
«ENDPROTECT»
«ENDDEFINE»


