«IMPORT pogoDsl»
«EXTENSION fr::esrf::tango::pogo::python::pythonUtils»

«DEFINE pythonFile FOR PogoDeviceClass»
«FOREACH attributes AS att»
	«IF att.status.concreteHere == "true"»
		«EXPAND readHeaderAttribute( att )»
		«EXPAND readMethodAttribute( att )»«IF att.rwType.contains("WRITE")»
		«EXPAND writeHeaderAttribute( att )»
		«EXPAND writeMethodAttribute( att )»«ENDIF»
		«EXPAND isAllowedAttributeMethod( att )»
	«ENDIF»
«ENDFOREACH»
«ENDDEFINE»

«DEFINE readHeaderAttribute( Attribute att ) FOR PogoDeviceClass»
«separator2()»
#
#	Reads «att.name» attribute
#	Description:	«att.properties.description.toString()»
#
#	Data type:		«att.dataType.pyType()»
#	Attr type:		«att.attType» «att.attTypeDimensions()»
#
«separator2()»
«ENDDEFINE»

«DEFINE readMethodAttribute(Attribute att) FOR PogoDeviceClass-»
«IF att.attType.toLowerCase() == "scalar"»
	def read_«att.name»(self, attr)
		print "In ", self.get_name(), "::read_«att.name»()"

		attr_«att.name»_read = 1
		attr_set_value( attr_«att.name»_read )
«ELSEIF att.attType.toLowerCase() == "spectrum"»
	def read_«att.name»( self, attr )
		print "In ", self.get_name(), "::read_«att.name»()"
	
		attr_«att.name»_read = [1]
		attr_set_value( attr_«att.name»_read, 1 )
«ELSE»
	def read_«att.name»( self, attr )
		print "In ", self.get_name(), "::read_«att.name»()"
		
		attr_«att.name»_read = [1] [2]
		attr_set_value( attr_«att.name»_read, 1, 1 )
«ENDIF»
«ENDDEFINE»

«DEFINE writeHeaderAttribute( Attribute att ) FOR PogoDeviceClass»
«separator2()»
#
#	Writes «att.name» attribute values to hardware
#
#	Data type:	«att.dataType.pyType()»
#	Attr type:	«att.attType»	«att.attTypeDimensions()»
«separator2()»«ENDDEFINE»

«DEFINE writeMethodAttribute( Attribute att ) FOR PogoDeviceClass»
	def write_«att.name»( self, attr )
		print "In ", self.getName(), "::write_«att.name»"
		data = []
		attr.get_write_value( data )
		print "Attribute value = ", data
		
«ENDDEFINE»

// =======================================================================================
// Defines the is_allowed attribute method
// TODO Manages the write and read attribute State Machine in a same function
// =======================================================================================
«DEFINE isAllowedAttributeMethod( Attribute att ) FOR PogoDeviceClass»
«separator2()»
# Read «att.name» attribute State Machine
# TODO Manages the write and read attribute State Machine in a same function
«separator2()»
	def is_«att.name»_allowed( self ):
		if self.get_state() in [«FOREACH att.readExcludedStates AS e SEPARATOR ','»«e»«ENDFOREACH»]
			return False
		return True

«separator2()»
# Write «att.name» attribute State Machine
# TODO Manages the write and read attribute State Machine in a same function
«separator2()»
	def is_«att.name»_allowed( self ):
		if self.get_state() in [«FOREACH att.writeExcludedStates AS e SEPARATOR ','»«e»«ENDFOREACH»]
			return False
		return True
«ENDDEFINE»

«DEFINE ProtectedArea( String id ) FOR PogoDeviceClass»
	«PROTECT CSTART "\t#---" CEND "---#" ID name + "->" + id»
	«ENDPROTECT»
«ENDDEFINE»

«DEFINE ProtectedArea( String id, String lines ) FOR PogoDeviceClass»
	«PROTECT CSTART "\t#---" CEND "---#" ID name + "->" + id»
	«lines»
	«ENDPROTECT»
«ENDDEFINE»
