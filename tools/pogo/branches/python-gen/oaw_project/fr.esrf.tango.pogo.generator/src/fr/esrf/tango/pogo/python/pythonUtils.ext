import pogoDsl;

tagForSourceCode( PogoDeviceClass this ): "Code files";

defaultPythonExtension(): ".py";

devicePythonClassName( PogoDeviceClass this ): name;
devicePythonFileName( PogoDeviceClass this ): devicePythonClassName() + defaultPythonExtension();
dserverClassPythonClassName( PogoDeviceClass this ): name + "Class";

classFactoryFileName( PogoDeviceClass this ): "ClassFactory" + defaultPythonExtension();
stateMachineFileName( PogoDeviceClass this ): name + "StateMachine" + defaultPythonExtension();

separator1(): "#=============================================================================";
separator2(): "#------------------------------------------------------------------";

attTypeDimensions(Attribute this):
	attType == "Spectrum"
	? " max = "+maxX
	:	(attType == "Image"
		?	" max = "+maxX+" x "+maxY
		: null);

SetAttValueSize(Attribute this):	//	attribute set value (scalar, spectrum, image)
	attType == "Spectrum"
	? ", "+maxX
	:	(attType == "Image"
		?	", "+maxX+", "+maxY
		: "");
		
cvsEscaped( String s ): "$" + s + "  $";

//	Type utilities
pyType(Type this):					null;
pyType(VoidType this):				"void";
pyType(BooleanType this):			"Tango::DevBoolean";
pyType(ShortType this):				"Tango::DevShort";
pyType(IntType this):				"Tango::DevLong";
pyType(FloatType this):				"Tango::DevFloat";
pyType(DoubleType this):			"Tango::DevDouble";
pyType(UShortType this):			"Tango::DevUShort";
pyType(UIntType this):				"Tango::DevULong";
pyType(StringType this):			"Tango::DevString";
pyType(CharArrayType this):			"Tango::DevVarCharArray";
pyType(ShortArrayType this):		"Tango::DevVarShortArray";
pyType(IntArrayType this):			"Tango::DevVarLongArray";
pyType(FloatArrayType this):		"Tango::DevVarFloatArray";
pyType(DoubleArrayType this):		"Tango::DevVarDoubleArray";
pyType(UShortArrayType this):		"Tango::DevVarUShortArray";
pyType(UIntArrayType this):			"Tango::DevVarULongArray";
pyType(StringArrayType this):		"Tango::DevVarStringArray";
pyType(LongStringArrayType this):	"Tango::DevVarLongStringArray";
pyType(DoubleStringArrayType this):	"Tango::DevVarDoubleStringArray";
pyType(StateType this):				"Tango::DevState";
pyType(ConstStringType this):		"Tango::ConstDevString";
pyType(BooleanArrayType this):		"Tango::DevVarBooleanArray";
pyType(UCharType this):				"Tango::DevUChar";
pyType(LongType this):				"Tango::DevLong64";
pyType(ULongType this):				"Tango::DevULong64";
pyType(LongArrayType this):			"Tango::DevVarLong64Array";
pyType(ULongArrayType this):		"Tango::DevVarULong64Array";
pyType(DevIntType this):			"Tango::DevInt";
pyType(EncodedType this):			"Tango::DevEncoded";

//	Property Type utilities
pyTangoType(PropType this):			null;
pyTangoType(BooleanType this):		"PyTango.DevBoolean";
pyTangoType(ShortType this):		"PyTango.DevShort";
pyTangoType(IntType this):			"PyTango.DevInt";
pyTangoType(UShortType this):		"PyTango.DevUShort";
pyTangoType(UIntType this):			"PyTango.DevUInt";
pyTangoType(FloatType this):		"PyTango.DevFloat";
pyTangoType(DoubleType this):		"PyTango.DevDouble";
pyTangoType(StringType this):		"PyTango.DevString";
pyTangoType(LongType this):			"PyTango.DevInt";
pyTangoType(ULongType this):		"PyTango.DevUInt";

pyTangoType(ShortVectorType this):	"PyTango.DevVarShortArray";
pyTangoType(IntVectorType this):	"PyTango.DevVarLongArray";
pyTangoType(FloatVectorType this):	"PyTango.DevVarFloatArray";
pyTangoType(DoubleVectorType this):	"PyTango.DevVarDoubleArray";
pyTangoType(StringVectorType this):	"PyTango.DevVarStringArray";
