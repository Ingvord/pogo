«IMPORT pogoDsl»

«EXTENSION fr::esrf::tango::pogo::python::pythonUtils»

«DEFINE pythonFile FOR PogoDeviceClass»
«IF description.filestogenerate.contains(tagForSourceCode())»
«FILE devicePythonFileName()»«separator1()»
#
# file :        «devicePythonFileName()»
#
# description :	Python source for the «devicePythonClassName()» and its commands. 
#				The class is derived from Device. It represents the
#				CORBA servant object which will be accessed from the
#				network. All commands which can be executed on the
#				«devicePythonClassName()» are implemented in this file.
#
# project :     «description.title»
#
# «cvsEscaped("Author:")»
#
# «cvsEscaped("Revision:")»
#
# «cvsEscaped("Log:")»
#
# copyleft :    AKKA Technologies
#				Toulouse 31100
#				FRANCE
#
«separator1()»
#  		This file is generated by POGO
#	(Program Obviously used to Generate tango Object)
#
#         (c) - AKKA Technologies
«separator1()»
#


import PyTango
import sys

«separator2()»
#	«devicePythonClassName()» Class Description:
#
#	«description.description»
#
«separator2()»
#	«devicePythonClassName()» States Description:
#
#	«FOREACH states AS state»«state.name» : «state.description»
#	«ENDFOREACH»
#
«separator2()»

class «devicePythonClassName()»(PyTango.Device_4Impl):

#--------- Add your global variables here --------------------------

«separator2()»
#	Device constructor
«separator2()»
	def __init__(self, cl, name):
		PyTango.Device_4Impl.__init__(self, cl, name)
		«devicePythonClassName()».init_device(self)
		
«separator2()»
#	Device destructor
«separator2()»
	def delete_device(self):
		print "[Device delete_device method] for device",self.get_name()
		
«separator2()»
#	Device initialization
«separator2()»
	def init_device(self):
		print "In ", self.get_name(), "::init_device()"
		self.set_state(PyTango.DevState.ON)
		self.get_device_properties(self.get_device_class())
		
«separator2()»
#	Always excuted hook method
«separator2()»
	def always_executed_hook(self):
		print "In ", self.get_name(), "::always_excuted_hook()"
		
«separator1()»
#
#	«devicePythonClassName()» read/write attribute methods
#
«separator1()»
«EXPAND attributes::pythonFile»

«separator1()»
#
#	«devicePythonClassName()» command methods
#
«separator1()»

«separator1()»
#
#	TemplateDevServClass class definition
#
«separator1()»
class «dserverClassPythonClassName()»(PyTango.DeviceClass):

	# Class properties
	class_property_list = {
		}
		
	# Device properties
	device_property_list = {
		}
		
	# Command definitions
	cmd_list = {
		}
		
	# Attribute definitions
	attr_list = {
		}
		
«separator2()»
#	«dserverClassPythonClassName()» Constructor
«separator2()»
	def __init__(self, name):
		PyTango.DeviceClass.__init__(self, name)
		self.set_type(name);
		print "In «dserverClassPythonClassName()»  constructor"
		
«separator1()»
#
#	«dserverClassPythonClassName()» class main method
#
«separator1()»
if __name__ == '__main__':
	try:
		py = PyTango.Util(sys.argv)
		py.add_TgClass(«dserverClassPythonClassName()»,«devicePythonClassName()»,'«devicePythonClassName()»')

		U = PyTango.Util.instance()
		U.server_init()
		U.server_run()

	except PyTango.DevFailed,e:
		print '-------> Received a DevFailed exception:',e
	except Exception,e:
		print '-------> An unforeseen exception occured....',e

«ENDFILE»
«ENDIF»
«ENDDEFINE»
