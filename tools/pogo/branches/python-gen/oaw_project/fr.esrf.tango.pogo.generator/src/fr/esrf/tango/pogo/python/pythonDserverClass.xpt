«IMPORT pogoDsl»

«EXTENSION fr::esrf::tango::pogo::python::pythonUtils»

«DEFINE pythonFile FOR PogoDeviceClass»
«IF description.filestogenerate.contains(tagForSourceCode())»
«FILE dserverClassPythonFileName()»«separator1()»
#
# file :        «dserverClassPythonFileName()»
#
# description :	Python source for the «dserverClassPythonClassName()» and its commands. 
#				The class is derived from Device. It represents the
#				CORBA servant object which will be accessed from the
#				network. All commands which can be executed on the
#				«dserverClassPythonClassName()» are implemented in this file.
#
# project :     «description.title»
#
# «cvsEscaped("Author:")»
#
# «cvsEscaped("Revision:")»
#
# «cvsEscaped("Log:")»
#
# copyleft :    AKKA Technologies
#				Toulouse 31100
#				FRANCE
#
«separator1()»
#  		This file is generated by POGO
#	(Program Obviously used to Generate tango Object)
#
#         (c) - AKKA Technologies
«separator1()»
#

«separator1()»
#
#	TemplateDevServClass class definition
#
«separator1()»
class «dserverClassPythonClassName()»(PyTango.DeviceClass):

	# Class properties
	class_property_list = {
		«FOREACH classProperties AS cp»'«cp.name»':
			«IF cp.status.concreteHere == "true"»[«cp.type.pyTangoType()»,
			"«cp.description»",«IF cp.DefaultPropValue.size == 1»«cp.DefaultPropValue.get(0)»
			«ELSEIF cp.DefaultPropValue.size == 2»[«cp.DefaultPropValue.get(0)», «cp.DefaultPropValue.get(1)»]
			«ELSE»
			«FOREACH cp.DefaultPropValue AS val SEPARATOR ","»
			«IF cp.DefaultPropValue.get(0) == val»[«val»«ELSEIF cp.DefaultPropValue.get(cp.DefaultPropValue.size - 1).compareTo(val) == 0»«val»]«ELSE»«val»«ENDIF»«ENDFOREACH»«ENDIF»]
			«ENDIF»
		«ENDFOREACH»}
		
	# Device properties
	device_property_list = {
		«FOREACH deviceProperties AS dev»'«dev.name»':
			«IF dev.status.concreteHere == "true"»[«dev.type.pyTangoType()»,
			"«dev.description»",«IF dev.DefaultPropValue.size == 1»«dev.DefaultPropValue.get(0)»
			«ELSEIF dev.DefaultPropValue.size == 2»[«dev.DefaultPropValue.get(0)», «dev.DefaultPropValue.get(1)»]
			«ELSE»
			«FOREACH dev.DefaultPropValue AS val SEPARATOR ","»
			«IF dev.DefaultPropValue.get(0) == val»[«val»«ELSEIF dev.DefaultPropValue.get(dev.DefaultPropValue.size - 1).compareTo(val) == 0»«val»]«ELSE»«val»«ENDIF»«ENDFOREACH»«ENDIF»]
			«ENDIF»
		«ENDFOREACH»}
		
	# Command definitions
	cmd_list = {
		«FOREACH commands AS cmd»'«cmd.name»':
			«IF cmd.status.concreteHere == "true"»
			[[«cmd.argin.type.pyTangoType()», «displayDescription(cmd.argin.description)»],
			[«cmd.argout.type.pyTangoType()», «displayDescription(cmd.argout.description)»]]
			«ENDIF»
		«ENDFOREACH»}
		
	# Attribute definitions
	attr_list = {
		«FOREACH attributes AS att»'«att.name»':
			«IF att.status.concreteHere == "true"-»
			«IF att.attType == "Scalar"-»
			[[«att.dataType.pyTangoType()», «att.pyTangoFromAtt()», «att.pyTangoFromRw()»]
			«ELSEIF att.attType == "Spectrum"-»
			[[«att.dataType.pyTangoType()», «att.pyTangoFromAtt()», «att.pyTangoFromRw()», «att.maxX»]
			«ELSEIF att.attType == "Image"-»
			[[«att.dataType.pyTangoType()», «att.pyTangoFromAtt()», «att.pyTangoFromRw()», «att.maxX», «att.maxY»]
			«ENDIF»
			{'description': "«att.properties.description»",
			'label': "«att.properties.label»",
			'unit': "«att.properties.unit»",
			'standard_unit': «att.properties.standardUnit»,
			'display_unit': "«att.properties.displayUnit»",
			'format': "«att.properties.format»",
			'max_value': «att.properties.maxValue»,
			'min_value': «att.properties.minValue»,
			'max_alarm': «att.properties.maxAlarm»,
			'min_alarm': «att.properties.minAlarm»,
			'max_warning': «att.properties.maxWarning»,
			'min_warning': «att.properties.minWarning»,
			'delta_t': «att.properties.deltaTime»,
			'delta_val': «att.properties.deltaValue»
			}]
			«ENDIF»
		«ENDFOREACH»
		}
		
«separator2()»
#	«dserverClassPythonClassName()» Constructor
«separator2()»
	def __init__(self, name):
		PyTango.DeviceClass.__init__(self, name)
		self.set_type(name);
		print "In «dserverClassPythonClassName()»  constructor"
«ENDFILE»
«ENDIF»
«ENDDEFINE»
