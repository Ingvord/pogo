package fr.esrf.tango.pogo.generator.python

import org.eclipse.xtext.generator.IGenerator
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import fr.esrf.tango.pogo.pogoDsl.PogoDeviceClass
import com.google.inject.Inject
import static org.eclipse.xtext.xtend2.lib.ResourceExtensions.*
import static extension fr.esrf.tango.pogo.generator.python.ProtectedArea.*
import static extension fr.esrf.tango.pogo.generator.python.PythonTypeDefinitions.*

class PythonDevice implements IGenerator {
	@Inject	extension ProtectedArea
	@Inject	extension PythonUtils
	@Inject extension fr.esrf.tango.pogo.generator.common.StringUtils
	override void doGenerate(Resource resource, IFileSystemAccess fsa){
		//println("doGenerate for python")
		for(cls : allContentsIterable(resource).filter(typeof(PogoDeviceClass))){
			if (cls.description.language.toLowerCase.equals("python")) {
				println("doGenerate for python " + cls.name)
				fsa.generateFile(cls.name.toLowerCase + '.py', cls.generate_pythonFile)
			}
		}
	}
	
	def generate_pythonFile(PogoDeviceClass cls)'''
#!/usr/bin/env python
# -*- coding:utf-8 -*- 


##############################################################################
## license :
##============================================================================
##
## File :        «cls.name + ".py"»
## 
## Project :     «cls.description.title»
##
## $Author :      «cls.description.identification.author»$
##
## $Revision :    $
##
## $Date :        $
##
## $HeadUrl :     $
##============================================================================
##            This file is generated by POGO
##    (Program Obviously used to Generate tango Object)
##
##        (c) - Software Engineering Group - ESRF
##############################################################################

"""«cls.description.description»"""

__all__ = ["«cls.name»", "«cls.name»Class", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
«cls.protectedArea("additionnal_import")»

##############################################################################
## Device States Description
##
«IF !cls.states.empty»«FOR state : cls.states»
## «state.name» : «state.description»
«ENDFOR»
«ELSE»
## No states for this device
«ENDIF»
##############################################################################

class «cls.name» (PyTango.Device_4Impl):

#--------- Add you global variables here --------------------------
«cls.protectedArea("global_variables")»
#------------------------------------------------------------------
#    Device constructor
#------------------------------------------------------------------
    def __init__(self,cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In " + self.get_name() + ".__init__()")
        «cls.name».init_device(self)

#------------------------------------------------------------------
#    Device destructor
#------------------------------------------------------------------
    def delete_device(self):
        self.debug_stream("In " + self.get_name() + ".delete_device()")
        «cls.protectedArea("delete_device")»

#------------------------------------------------------------------
#    Device initialization
#------------------------------------------------------------------
    def init_device(self):
        self.debug_stream("In " + self.get_name() + ".init_device()")
        self.get_device_properties(self.get_device_class())
«FOR attr: cls.attributes»
«IF attr.read»        self.attr_«attr.name»_read = «attr.defaultValueDim»«ENDIF»
«ENDFOR»
«FOR attr : cls.dynamicAttributes»
«IF true»        # Code for adding dynamically «attr.name» - move it where you want«ENDIF»
«IF attr.scalar»        attr = PyTango.Attr('«attr.name»', «attr.dataType.pythonType», PyTango.«attr.rwType.toUpperCase»)«ENDIF»
«IF attr.spectrum»        attr = PyTango.SpectrumAttr('«attr.name»', «attr.dataType.pythonType», PyTango.«attr.rwType.toUpperCase», «attr.maxX»)«ENDIF»
«IF attr.image»        attr = PyTango.ImageAttr('«attr.name»', «attr.dataType.pythonType», PyTango.«attr.rwType.toUpperCase», «attr.maxX», «attr.maxY»)«ENDIF»
        self.add_attribute(attr,«IF attr.read»self.read_«attr.name»«ELSE»None«ENDIF», «IF attr.write»self.write_«attr.name»«ELSE»None«ENDIF», None)
«IF attr.read»        self.attr_«attr.name»_read = «attr.defaultValueDim»«ENDIF»
«ENDFOR»
        «cls.protectedArea("init_device")»

#------------------------------------------------------------------
#    Always excuted hook method
#------------------------------------------------------------------
    def always_executed_hook(self):
        self.debug_stream("In " + self.get_name() + ".always_excuted_hook()")
        «cls.protectedArea("always_executed_hook")»

#==================================================================
#
#    «cls.name» read/write attribute methods
#
#==================================================================

«FOR attr: cls.attributes»
	«IF attr.isRead»
		«readAttributeMethod(cls, attr)»
	«ENDIF»
	«IF attr.isWrite»
		«writeAttributeMethod(cls, attr)»
	«ENDIF»
	«IF !attr.readExcludedStates.empty»
		«attr.attributeMethodStateMachine»
	«ENDIF»
«ENDFOR»

«FOR attr: cls.dynamicAttributes»
	«IF attr.isRead»
		«readAttributeMethod(cls, attr)»
	«ENDIF»
	«IF attr.isWrite»
		«writeAttributeMethod(cls, attr)»
	«ENDIF»
«ENDFOR»

«IF !cls.dynamicAttributes.empty»
#------------------------------------------------------------------
#    dyn_attr method
#------------------------------------------------------------------
    def dyn_attr(self, dev_list):
        self.debug_stream("In " + self.get_name() + ".dyn_attr()")
        «cls.protectedArea("dyn_attr")»
«ENDIF»

#------------------------------------------------------------------
#    Read Attribute Hardware
#------------------------------------------------------------------
    def read_attr_hardware(self, data):
        self.debug_stream("In " + self.get_name() + ".read_attr_hardware()")
        «cls.protectedArea("read_attr_hardware")»


#==================================================================
#
#    «cls.name» command methods
#
#==================================================================

«FOR cmd: cls.commands»
	«IF cmd.name.equals("State")==false && cmd.name.equals("Status")==false»
		«commandExecution(cls, cmd)»
		«IF !cmd.excludedStates.empty»
			«cmd.commandMethodStateMachine»
		«ENDIF»
	«ENDIF»
«ENDFOR»

#==================================================================
#
#    «cls.name»Class class definition
#
#==================================================================
class «cls.name»Class(PyTango.DeviceClass):

    #    Class Properties
    class_property_list = {
		«FOR prop : cls.classProperties»
            «prop.pythonPropertyClass»
		«ENDFOR»
        }


    #    Device Properties
    device_property_list = {
		«FOR prop : cls.deviceProperties»
            «prop.pythonPropertyClass»
		«ENDFOR»
        }


    #    Command definitions
    cmd_list = {
		«FOR cmd : cls.commands»
			«IF cmd.name.equals("State")==false && cmd.name.equals("Status")==false»
		    «cmd.pythonCommandClass»
		    «ENDIF»
		«ENDFOR»
        }


    #    Attribute definitions
    attr_list = {
		«FOR attr : cls.attributes»
            «attr.pythonAttributeClass»
		«ENDFOR»
        }


#------------------------------------------------------------------
#    «cls.name»Class Constructor
#------------------------------------------------------------------
    def __init__(self, name):
        PyTango.DeviceClass.__init__(self, name)
        self.set_type(name);
        print "In «cls.name» Class  constructor"

#==================================================================
#
#    «cls.name» class main method
#
#==================================================================
def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(«cls.name»Class,«cls.name»,'«cls.name»')

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed,e:
        print '-------> Received a DevFailed exception:',e
    except Exception,e:
        print '-------> An unforeseen exception occured....',e

if __name__ == '__main__':
    main()
	'''
}