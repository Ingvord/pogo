package fr.esrf.tango.pogo.generator.cpp;

import com.google.inject.Inject;
import fr.esrf.tango.pogo.generator.cpp.CppUtil;
import fr.esrf.tango.pogo.generator.cpp.Headers;
import fr.esrf.tango.pogo.pogoDsl.AttrProperties;
import fr.esrf.tango.pogo.pogoDsl.Attribute;
import fr.esrf.tango.pogo.pogoDsl.ClassDescription;
import fr.esrf.tango.pogo.pogoDsl.PogoDeviceClass;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.eclipse.xtext.xtend2.lib.ResourceExtensions;

@SuppressWarnings("all")
public class HeaderDevice implements IGenerator {
  @Inject
  private CppUtil _cppUtil;
  
  @Inject
  private Headers _headers;
  
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    Iterable<EObject> _allContentsIterable = ResourceExtensions.allContentsIterable(resource);
    Iterable<PogoDeviceClass> _filter = IterableExtensions.<PogoDeviceClass>filter(_allContentsIterable, fr.esrf.tango.pogo.pogoDsl.PogoDeviceClass.class);
    for (final PogoDeviceClass cls : _filter) {
      String _name = cls.getName();
      String _operator_plus = StringExtensions.operator_plus(_name, ".h");
      CharSequence _generateDeviceHeaderFile = this.generateDeviceHeaderFile(cls);
      fsa.generateFile(_operator_plus, _generateDeviceHeaderFile);
    }
  }
  
  public CharSequence generateDeviceHeaderFile(final PogoDeviceClass cls) {
    StringConcatenation _builder = new StringConcatenation();
    String _deviceHeaderFileHeader = this._headers.deviceHeaderFileHeader(cls);
    _builder.append(_deviceHeaderFileHeader, "");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("#ifndef ");
    String _name = cls.getName();
    _builder.append(_name, "");
    _builder.append("_H");
    _builder.newLineIfNotEmpty();
    _builder.append("#define ");
    String _name_1 = cls.getName();
    _builder.append(_name_1, "");
    _builder.append("_H");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("#include <tango.h>");
    _builder.newLine();
    _builder.append("#include <");
    String _name_2 = cls.getName();
    _builder.append(_name_2, "");
    _builder.append("Class.h>");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/** ");
    String _name_3 = cls.getName();
    _builder.append(_name_3, "");
    _builder.append(" class description:");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("* ");
    ClassDescription _description = cls.getDescription();
    String _description_1 = _description.getDescription();
    String _comments = this._cppUtil.comments(_description_1, " *  ");
    _builder.append(_comments, " ");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("namespace ");
    String _name_4 = cls.getName();
    _builder.append(_name_4, "");
    _builder.append("_ns");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.newLine();
    String _protedtedArea = this._cppUtil.protedtedArea(cls, "extraClassDeclarations", "Add your extra class declarations");
    _builder.append(_protedtedArea, "");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("class ");
    String _name_5 = cls.getName();
    _builder.append(_name_5, "");
    _builder.append(" : public Tango::Device_4Impl");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("public:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*\twill be called at device destruction or at init command.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void delete_device();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*\tInitialize the device");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("virtual void init_device();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*\tRead the device properties from database");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("void get_device_property();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*\tAlways executed method before execution command method.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("virtual void always_executed_hook();");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("//\tAttribute methods");
    _builder.newLine();
    _builder.append("public:");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*\tMethod      : Starter::read_attr_hardware()");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*\tDescription : Hardware acquisition for attributes.");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("virtual void read_attr_hardware(vector<long> &attr_list);");
    _builder.newLine();
    _builder.newLine();
    {
      EList<Attribute> _attributes = cls.getAttributes();
      for(final Attribute attr : _attributes) {
        _builder.append("\t");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("\t");
        _builder.append(" ");
        _builder.append("*\t");
        AttrProperties _properties = attr.getProperties();
        String _description_2 = _properties.getDescription();
        String _comments_1 = this._cppUtil.comments(_description_2, "\t *\t");
        _builder.append(_comments_1, "	 ");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append(" ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("\t");
        _builder.append(" ");
        _builder.append("*\tData type:\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append(" ");
        _builder.append("*\tAttr type:\t");
        String _attType = attr.getAttType();
        _builder.append(_attType, "	 ");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append(" ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("virtual void read_");
        String _name_6 = attr.getName();
        _builder.append(_name_6, "	");
        _builder.append("(Tango::Attribute &attr);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("virtual bool is_");
        String _name_7 = attr.getName();
        _builder.append(_name_7, "	");
        _builder.append("_allowed(Tango::AttReqType type);");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("};");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}\t//\tEnd of namespace");
    _builder.newLine();
    _builder.newLine();
    _builder.append("#endif   //\t");
    String _name_8 = cls.getName();
    _builder.append(_name_8, "");
    _builder.append("_H");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
}
