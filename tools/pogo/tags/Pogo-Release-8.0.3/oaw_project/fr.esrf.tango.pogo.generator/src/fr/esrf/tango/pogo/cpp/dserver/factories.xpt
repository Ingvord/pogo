«IMPORT pogoDsl»
«EXTENSION fr::esrf::tango::pogo::cpp::_CppConstants»
«EXTENSION fr::esrf::tango::pogo::cpp::_CppUtil»

«DEFINE cppFile FOR PogoDeviceClass»
//===================================================================
//	Factory methods
//===================================================================

«EXPAND deviceFactory»
«EXPAND attributeFactory»
«EXPAND commandFactory»
«ENDDEFINE»




//	=========================================================
//	Define the device_factory method
//
//	This factory does something only if class is not abstract
//	A special case is managed for DataBase class
//	=========================================================
«DEFINE deviceFactory FOR PogoDeviceClass»
«separator2()»
/**
 * method : 		«name»Class::device_factory
 * description : 	Create the device object(s)
 *                  and store them in the device list
 *
 * @param	*devlist_ptr	The device name list
 */
«separator2()»
void «name»Class::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{
«IF name=="DataBase"»
	device_list.push_back(new DataBase(this, DataBase::db_name.c_str(),
                                    	"TANGO database device server"));
	export_device(device_list[0],"database");
«ELSE»
«IF description.hasAbstractAttribute=="false" && description.hasAbstractCommand=="false"-»
«EXPAND fr::esrf::tango::pogo::cpp::Common::ProtectedArea(
			"Class::device_factory_before",
			"//	Add your own code")»
	//	Create devices and add it into the device list
	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
		device_list.push_back(new «name»(this, (*devlist_ptr)[i]));							 
	}

	//	Manage dynamic attributes if any
	erase_dynamic_attributes(devlist_ptr, get_class_attr()->get_attr_list());

	//	Export devices to the outside world
	for (unsigned long i=1 ; i<=devlist_ptr->length() ; i++)
	{
		//	Add dynamic attributes if any
		«name» *dev = static_cast<«name» *>(device_list[device_list.size()-i]);
		dev->add_dynamic_attributes();

		//	Check before if database used.
		if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
			export_device(dev);
		else
			export_device(dev, dev->get_name().c_str());
	}

	«EXPAND fr::esrf::tango::pogo::cpp::Common::ProtectedArea(
			"Class::device_factory_after",
			"//	Add your own code")»
	«ELSE»

	//	This class is not concrete and cannot implement devices

	«ENDIF»
«ENDIF-»
}
«ENDDEFINE»





//	=========================================================
//	Define the attribute_factory method
//	=========================================================
«DEFINE attributeFactory FOR PogoDeviceClass»
«EXPAND fr::esrf::tango::pogo::cpp::Common::methodHeader(
			name + "Class::attribute_factory",
			"Create the attribute object(s)\n" +
			"and store them in the attribute list")-»
void «name»Class::attribute_factory(vector<Tango::Attr *> &att_list)
{
«EXPAND fr::esrf::tango::pogo::cpp::Common::ProtectedArea(
			"Class::attribute_factory_before",
			"//	Add your own code")»
«IF description.hasInheritanceClass()-»
	//	Call atribute_factory for inherited class
	«description.getInheritance().classname»_ns::«
		description.getInheritance().classname»Class::attribute_factory(att_list);

«ENDIF-»
«EXPAND attributeCreation-»
«IF description.hasAbstractAttribute=="false" && description.hasAbstractCommand=="false"-»
	//	Create a list of static attributes
	create_static_attribute_list(get_class_attr()->get_attr_list());

«EXPAND fr::esrf::tango::pogo::cpp::Common::ProtectedArea(
			"Class::attribute_factory_after",
			"//	Add your own code")»
«ENDIF-»
}
«EXPAND getAttributeByName»
«ENDDEFINE»




//	=========================================================
//	Define the attribute creation for attribute_factory 
//	=========================================================
«DEFINE attributeCreation FOR PogoDeviceClass-»
«FOREACH attributes AS att-»
	«IF att.status.concreteHere=="true"-»
	//	Attribute : «att.name»«IF att.status.inherited=="true"» if not concrete in inherited class
	«EXPAND testAlreadyConcrete(att)-»
	«ELSE»
	«att.name»Attrib	*«att.name.toLowerCase()» = new «att.name»Attrib();
	«EXPAND manageAttributeProperties(att, "	")»
	att_list.push_back(«att.name.toLowerCase()»);
	«ENDIF»«ENDIF»
«ENDFOREACH»
«ENDDEFINE»


//	=========================================================
//	Define code to overload attribute polling period if any
//	=========================================================
«DEFINE overloadAttributePollingPeriod(String attName) FOR PogoDeviceClass-»
«FOREACH overlodedPollPeriodObject AS obj-»«IF obj.type=="attribute"  && obj.name==attName-»
	else
	{
		//	Overload polling period for «obj.name»
		«obj.name»Attr->set_polling_period(«obj.pollPeriod»);
	}«ENDIF»
«ENDFOREACH-»
«ENDDEFINE»

//	=========================================================
//	Define code to define attribute creation if not done
//		in inherited class
//	=========================================================
«DEFINE testAlreadyConcrete(Attribute att) FOR PogoDeviceClass-»
	Tango::Attr *«att.name»Attr = get_attr_object_by_name(att_list, "«att.name»");
	if («att.name»Attr == NULL)
	{	
		«att.name»Attrib	*«att.name.toLowerCase()» = new «att.name»Attrib();
		«EXPAND manageAttributeProperties(att, "		")»
		att_list.push_back(«att.name.toLowerCase()»);
	}
	«EXPAND overloadAttributePollingPeriod(att.name)-»
«ENDDEFINE»


//	=========================================================
//	Define the set attribute properties part for attribute_factory
//	=========================================================
«DEFINE manageAttributeProperties(Attribute att, String tab) FOR PogoDeviceClass-»
«tab»Tango::UserDefaultAttrProp	«att.name.toLowerCase()»_prop;
«tab»«setAttributeProperty(att.name, "description",   att.properties.description.replaceAll("\n", "\\\\n"))»
«tab»«setAttributeProperty(att.name, "label",         att.properties.label)»
«tab»«setAttributeProperty(att.name, "unit",          att.properties.unit)»
«tab»«setAttributeProperty(att.name, "standard_unit", att.properties.standardUnit)»
«tab»«setAttributeProperty(att.name, "display_unit",  att.properties.displayUnit)»
«tab»«setAttributeProperty(att.name, "format",        att.properties.format)»
«tab»«setAttributeProperty(att.name, "max_value",     att.properties.maxValue)»
«tab»«setAttributeProperty(att.name, "min_value",     att.properties.minValue)»
«tab»«setAttributeProperty(att.name, "max_alarm",     att.properties.maxAlarm)»
«tab»«setAttributeProperty(att.name, "min_alarm",     att.properties.minAlarm)»
«tab»«setAttributeProperty(att.name, "max_warning",   att.properties.maxWarning)»
«tab»«setAttributeProperty(att.name, "min_warning",   att.properties.minWarning)»
«tab»«setAttributeProperty(att.name, "delta_t",       att.properties.deltaTime)»
«tab»«setAttributeProperty(att.name, "delta_val",     att.properties.deltaValue)»
«EXPAND attributeEventCriteria(att, tab)»
«IF att.isDynamic!="true"»«tab»«att.name.toLowerCase()»->set_default_properties(«att.name.toLowerCase()»_prop);«ENDIF»
«tab»«att.name.toLowerCase()»->set_polling_period(«att.polledPeriod»);
«tab»«att.name.toLowerCase()»->set_disp_level(Tango::«IF att.displayLevel == "EXPERT"»EXPERT«ELSE»OPERATOR«ENDIF»);
	«EXPAND manageMemorized(att, tab)»
«tab»«setAttributeFireEvent(att.name, "change",     att.changeEvent)»
«tab»«setAttributeFireEvent(att.name, "archive",    att.archiveEvent)»
«tab»«setAttributeFireDataReadyEvent(att.name, att.dataReadyEvent)»
«ENDDEFINE»



//	=========================================================
//	Define the Event Criteria for attribute factory
//	=========================================================
«DEFINE attributeEventCriteria(Attribute att, String tab) FOR PogoDeviceClass-»
«IF att.eventCriteria!=null-»
«IF att.eventCriteria.period.length>0»«tab»«att.name.toLowerCase()»_prop.set_event_period("«att.eventCriteria.period»");«ENDIF»
«IF att.eventCriteria.relChange.length>0»«tab»«att.name.toLowerCase()»_prop.set_event_rel_change("«att.eventCriteria.relChange»");«ENDIF»
«IF att.eventCriteria.absChange.length>0»«tab»«att.name.toLowerCase()»_prop.set_event_abs_change("«att.eventCriteria.absChange»");«ENDIF»
«ENDIF-»
«IF att.evArchiveCriteria!=null-»
«IF att.evArchiveCriteria.period.length>0»«tab»«att.name.toLowerCase()»_prop.set_archive_event_period("«att.evArchiveCriteria.period»");«ENDIF»
«IF att.evArchiveCriteria.relChange.length>0»«tab»«att.name.toLowerCase()»_prop.set_archive_event_rel_change("«att.evArchiveCriteria.relChange»");«ENDIF»
«IF att.evArchiveCriteria.absChange.length>0»«tab»«att.name.toLowerCase()»_prop.set_archive_event_abs_change("«att.evArchiveCriteria.absChange»");«ENDIF»
«ENDIF-»
«ENDDEFINE»


//	=========================================================
//	Define a little method to retreive Tango::Attr * object by name
//	=========================================================
«DEFINE getAttributeByName FOR PogoDeviceClass-»
«IF description.hasInheritanceClass()-»
«EXPAND fr::esrf::tango::pogo::cpp::Common::methodHeader(
		name + "Class::get_attr_by_name",
		"returns Tango::Attr * object found by name")-»
Tango::Attr *«name»Class::get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname)
{
	vector<Tango::Attr *>::iterator it;
	for (it=att_list.begin() ; it<att_list.end() ; it++)
		if ((*it)->get_name()==attname)
			return (*it);
	//	Attr does not exist
	return NULL;
}
«ENDIF-»
«ENDDEFINE»






//	=========================================================
//	Define the memorized part for attribute_factory
//	=========================================================
«DEFINE manageMemorized(Attribute att, String tab) FOR PogoDeviceClass-»
«IF att.memorized == "true"-»
«tab»«att.name.toLowerCase()»->set_memorized();
	«IF att.memorizedAtInit == "true"-»
«tab»«att.name.toLowerCase()»->set_memorized_init(true);«ELSE-»
«tab»«att.name.toLowerCase()»->set_memorized_init(false);«ENDIF-»
«ELSE-»
«tab»//	Not memorized
«ENDIF-»
«ENDDEFINE»




//	=========================================================
//	Define the command_factory method
//	=========================================================
«DEFINE commandFactory FOR PogoDeviceClass»
«EXPAND fr::esrf::tango::pogo::cpp::Common::methodHeader(
		name + "Class::command_factory",
		"Create the command object(s)\n" +
		"and store them in the command list")-»
void «name»Class::command_factory()
{
«EXPAND fr::esrf::tango::pogo::cpp::Common::ProtectedArea("Class::command_factory_before")»
«IF description.hasInheritanceClass()-»
	//	Call command_factory for inherited class
	«description.getInheritance().classname»_ns::«description.getInheritance().classname»Class::command_factory();
«ENDIF-»
«EXPAND createAllCommands»
«EXPAND fr::esrf::tango::pogo::cpp::Common::ProtectedArea(
				"Class::command_factory_after")»
}
«ENDDEFINE»


//	=========================================================
//	Define code to create commands
//	=========================================================
«DEFINE createAllCommands FOR PogoDeviceClass»
«FOREACH commands AS cmd-»
«IF cmd.status.concreteHere=="true" && cmd.name!="State" && cmd.name!="Status"-»
«IF cmd.status.inherited=="true"-»
	//	Get inherited Command object «cmd.name» if already created
	try
	{
		get_cmd_by_name("«cmd.name»")«EXPAND overloadCommandPollingPeriod(cmd)-»;
	}
	catch (Tango::DevFailed &e)
	{
		«EXPAND createCommand(cmd, "\t\t")-»
	}
«ELSE-»
	«EXPAND createCommand(cmd, "\t")»
«ENDIF»
«ENDIF-»
«ENDFOREACH»
«ENDDEFINE»


//	=========================================================
//	Define code to create specified command
//	=========================================================
«DEFINE createCommand(Command cmd, String tab) FOR PogoDeviceClass»
«tab»//	Create «cmd.name» command object
«tab»«cmd.name»Class	*p«cmd.name»Cmd =
«tab»	new «cmd.name»Class("«cmd.name»",
«tab»		«cmd.argin.type.cppTypeEnum()», «cmd.argout.type.cppTypeEnum()»,
«tab»		"«cmd.argin.description.inOneLine()»",
«tab»		"«cmd.argout.description.inOneLine()»",
«tab»		«cmd.cppDisplayLevel()»);
«IF cmd.polledPeriod!=null && cmd.polledPeriod!="0"-»
«tab»p«cmd.name»Cmd->set_polling_period(«cmd.polledPeriod»);
«ENDIF-»
«tab»command_list.push_back(p«cmd.name»Cmd);
«ENDDEFINE»



//	=========================================================
//	Define code to overload polling period if any
//	=========================================================
«DEFINE overloadCommandPollingPeriod(Command cmd) FOR PogoDeviceClass-»
«FOREACH  overlodedPollPeriodObject AS obj-»
«IF obj.type=="command" && obj.name==cmd.name-».set_polling_period(«obj.pollPeriod»)«ENDIF-»
«ENDFOREACH-»
«ENDDEFINE»
