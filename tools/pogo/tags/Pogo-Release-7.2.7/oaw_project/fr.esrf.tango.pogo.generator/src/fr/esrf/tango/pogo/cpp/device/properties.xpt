«IMPORT pogoDsl»
«EXTENSION fr::esrf::tango::pogo::cpp::_CppConstants»
«EXTENSION fr::esrf::tango::pogo::cpp::_CppUtil»


//	=========================================================
//	Define get_device_property method
//	=========================================================
«DEFINE cppFile FOR PogoDeviceClass»
«IF deviceProperties.size>0-»
«EXPAND fr::esrf::tango::pogo::cpp::Common::methodHeader(
		"get_device_property",
		"Read database to initialize property data members.")-»
void «name»::get_device_property()
{
«EXPAND fr::esrf::tango::pogo::cpp::Common::ProtectedArea(
		"get_device_property_before",
		"//	Initialize property data members")»
«IF description.hasMandatoryProperty=="true"-»
	mandatoryNotDefined = false;
	set_status("Initializing....");
«ENDIF-»
«EXPAND getDevicePropertyFromDatabase»
«FOREACH deviceProperties AS prop-»
	«IF prop.status.concreteHere=="true"-»
		«EXPAND initializeDataMember(prop)»
	«ENDIF-»
«ENDFOREACH»
	}
«EXPAND fr::esrf::tango::pogo::cpp::Common::ProtectedArea(
		"get_device_property_after",
		"//	Check device property data members init")»
«ENDIF-»
}
«IF description.hasMandatoryProperty=="true"» «EXPAND checkMandatoryPropertyMethod» «ENDIF-»
«ENDDEFINE»




//	=========================================================
//	Define the databse read
//	=========================================================
«DEFINE getDevicePropertyFromDatabase FOR PogoDeviceClass»
	//	Read device properties from database.
	Tango::DbData	dev_prop;
	«FOREACH deviceProperties AS prop-»
	«IF prop.status.concreteHere=="true"-»
	dev_prop.push_back(Tango::DbDatum("«prop.name»"));
	«ENDIF»«ENDFOREACH-»

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on «name»Class to get class property
		Tango::DbDatum	def_prop, cl_prop;
		«name»Class	*ds_class =
			(static_cast<«name»Class *>(get_device_class()));
		int	i = -1;
«ENDDEFINE»


//	=========================================================
//	Define the property data members initialization
//	=========================================================
«DEFINE initializeDataMember(Property prop) FOR PogoDeviceClass-»
		//	Try to initialize «prop.name» from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  «prop.name.dataMemberName()»;
		else {
			//	Try to initialize «prop.name» from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  «prop.name.dataMemberName()»;
		}
		//	And try to extract «prop.name» value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  «prop.name.dataMemberName()»;
	«IF prop.mandatory=="true"-»
		//	Property «prop.name» is mandatory, check if has been defined in database.
		check_mandatory_property(cl_prop, dev_prop[i]);
	«ENDIF-»
«ENDDEFINE»


//	=========================================================
//	Define code to check mandatory properties
//	=========================================================
«DEFINE checkMandatoryPropertyMethod FOR PogoDeviceClass-»
«EXPAND fr::esrf::tango::pogo::cpp::Common::methodHeader(
		"check_mandatory_property",
		"For mandatory properties check if defined in database.")-»
void «name»::check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop)
{
	//	Check if all properties are empty
	if (class_prop.is_empty() && dev_prop.is_empty())
	{
		TangoSys_OMemStream	tms;
		tms << endl <<"Property \'" << dev_prop.name << "\' is mandatory but not defined in database";
		string	status(get_status());
		status += tms.str();
		set_status(status);
		mandatoryNotDefined = true;
«EXPAND fr::esrf::tango::pogo::cpp::Common::ProtectedArea(
		"check_mandatory_property",
		"	cerr << tms.str() << \" for \" << device_name << endl;")»
	}
}
«ENDDEFINE»